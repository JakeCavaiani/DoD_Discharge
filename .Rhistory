French.final
### MOOS ###
# PT1 #
Moose1comb$pred.moos1.Q <- coef(MOOS1.lm)[2] * Moose1comb$WaterLevel+ coef(MOOS1.lm)[1]
ggplot(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Moose1 predicted all measured Q") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("Date") +
ylab("Predicted Discharge")
# PT2 #
Moose2comb$pred.moos2.Q <- coef(MOOS2.lm)[2] * Moose2comb$WaterLevel+ coef(MOOS2.lm)[1]
ggplot(aes(x = DateTime, y = pred.moos2.Q), data = Moose2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Moose") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge (L/s)")
ggplot(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Moose1 predicted all measured Q") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("Date") +
ylab("Predicted Discharge")
View(Moose2comb)
Moose1comb$pred.moos1.Q[540:1594, 13] <- NA
# Final Discharge #
Moose1comb %>% mutate(Moose1comb$pred.moos1.Q = ifelse(DateTime > "2020-06-21" & DateTime <"2020-07-02",NA, pred.moos1.Q))
# Final Discharge #
Moose1comb %>% mutate(pred.moos1.Q = ifelse(DateTime > "2020-06-21" & DateTime <"2020-07-02",NA, pred.moos1.Q))
# Final Discharge #
Moose1comb %>% mutate(pred.moos1.Q = ifelse(DateTime > "2020-06-21" & DateTime <"2020-07-02",NA, pred.moos1.Q))
# Final Discharge #
Moose1comb %>% mutate(pred.moos1.Q = ifelse(DateTime == "NA", NA, pred.moos1.Q))
# Final Discharge #
Moose1comb$pred.moos1.Q[which(Moose1comb$DateTime == "NA")] <- NA
# Final Discharge #
Moose1comb$pred.moos1.Q[c(540:1594), 13] <- NA
# Final Discharge #
Moose1comb$pred.moos1.Q[c(540:1594),] <- NA
# Final Discharge #
Moose1comb[c(540:1594), 13] <- NA
moos.final.discharge <- full_join(Moose1comb, Moose2comb, by = c("DateTime"))
moos.final.discharge$MeanDischarge <- rowMeans(moos.final.discharge[,c(13,25)], na.rm = TRUE)
moos.final.discharge <- moos.final.discharge[,-c(2:4, 6:12, 14:24)]
moos.final.discharge <- moos.final.discharge[,-(3:4)]
moos.final <- ggplot(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb) +
geom_line(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.moos2.Q), data = Moose2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = DateTime, y = MeanDischarge), data = moos.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3500) +
ggtitle("Moose1(light) & Moose2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
moos.final
Poke1comb$pred.poke1.Q <- coef(POKE1.lm)[2] * Poke1comb$WaterLevel+ coef(POKE1.lm)[1]
ggplot(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Poker1 predicted all measured Q") +
xlab("Date") +
ylab("Predicted Discharge")
# PT2 #
Poke2comb$pred.poke2.Q <- coef(POKE2.lm)[2] * Poke2comb$WaterLevel+ coef(POKE2.lm)[1]
ggplot(aes(x = DateTime, y = pred.poke2.Q), data = Poke2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Poker") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge(L/s)") +
scale_x_datetime(limits = as_datetime(c("2020-05-15", "2020-10-10")))
# POKE
poke.final.discharge <- data.frame(Poke1comb$Site, Poke1comb$DateTime, Poke1comb$pred.poke1.Q, Poke2comb$pred.poke2.Q)
poke.final.discharge$MeanDischarge <- rowMeans(poke.final.discharge[,c('Poke1comb.pred.poke1.Q', 'Poke2comb.pred.poke2.Q')], na.rm = TRUE)
poke.final.discharge <- poke.final.discharge[,-(3:4)]
### Poker1 (light blue) and Poker2 (dark blue) with observed Q.
poke.final <- ggplot(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb) +
geom_line(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.poke2.Q), data = Poke2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = Poke1comb.DateTime, y = MeanDischarge), data = poke.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("Poker1(light) & Poker2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
### STRT ###
# PT1 #
Strt1comb$pred.strt1.Q <- coef(STRT1.lm)[2] * Strt1comb$WaterLevel+ coef(STRT1.lm)[1]
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge (L/s)") +
scale_x_datetime(limits = as_datetime(c("2020-05-15", "2020-10-09")))
# PT2 #
Strt2comb$pred.strt2.Q <- coef(STRT2.lm)[2] * Strt2comb$WaterLevel+ coef(STRT2.lm)[1]
ggplot(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart2 predicted all measured Q") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("Date") +
ylab("Predicted Discharge")
# Final STRT #
strt.final.discharge <- data.frame(Strt1comb$Site, Strt1comb$DateTime, Strt1comb$pred.strt1.Q)
strt.final.discharge <- strt.final.discharge %>% subset(strt.stream.one$DateTime > "2020-06-16")
### Stuart1 (light blue), Stuart2 (dark blue), and Stuart1 (red) because STRT2 seems bad with observed Q.
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb) +
geom_line(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = Strt1comb.DateTime, y = Strt1comb.pred.strt1.Q), data = strt.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("Stuart1(light) & Stuart2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
### VAUL ###
# PT2 #
Vaul2comb$pred.vaul2.Q <- coef(VAUL2.lm)[2] * Vaul2comb$WaterLevel+ coef(VAUL2.lm)[1]
ggplot(aes(x = DateTime, y = pred.vaul2.Q), data = Vaul2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Vault") +
scale_shape_discrete(name = "Mehtod", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge (L/s)") +
scale_x_datetime(limits = as_datetime(c("2020-05-15", "2020-10-10")))
# Final VAUL #
vaul.final.discharge <- data.frame(Vaul2comb$Site, Vaul2comb$DateTime, Vaul2comb$pred.vaul2.Q)
vaul.final.discharge <- vaul.final.discharge %>%  subset(vaul.stream$DateTime > "2020-06-16")
setwd(here())
# check: should be at DoD_Discharge
getwd()
### Write CSV ###
write.csv(frch.final.discharge,"Predicted_Discharge/processed/FRCH.csv", row.names = FALSE)
write.csv(moos.final.discharge,"Predicted_Discharge/processed/MOOS.csv", row.names = FALSE)
write.csv(poke.final.discharge,"Predicted_Discharge/processed/POKE.csv", row.names = FALSE)
write.csv(strt.final.discharge,"Predicted_Discharge/processed/STRT.csv", row.names = FALSE)
write.csv(vaul.final.discharge,"Predicted_Discharge/processed/VAUL.csv", row.names = FALSE)
### Rename Columns ###
names(frch.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(moos.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(poke.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(strt.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(vaul.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
moos.final.discharge <- na.omit(moos.final.discharge) # cleaning NaN in data set
poke.final.discharge <- na.omit(poke.final.discharge) # cleaning NaN in data set
final_discharge_2020 <- rbind(frch.final.discharge, moos.final.discharge,
poke.final.discharge, strt.final.discharge,
vaul.final.discharge)
write.csv(final_discharge_2020,"Predicted_Discharge/processed/All_Sites.csv", row.names = FALSE)
Q_2020 <- final_discharge_2020
Q_2020$day = format(as.POSIXct(Q_2020$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
Q_2020$day = as.POSIXct(Q_2020$day, "%Y-%m-%d", tz="America/Anchorage")
Q_2020$DateTime = NULL
Q.daily = with(Q_2020, tapply(MeanDischarge, list(day, Site), mean))
Q.daily = as.data.frame(Q.daily)
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(RColorBrewer)
library(gridExtra)
### Import Data ###
strt.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vT05dgyg07MOSVdaEFFywTuktj7TTY0ukYjp5ZckRTP5BJ9dFaq5fT0MppdTchBJseTlLSzoyuLbWNS/pub?output=csv"
frch.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSXjY8hE7y3xpQs42ce8tTuqxadD-9GSLdlzmlzapcdxZoYwZ0M3GOjrQfKshj5Cw1XlPMICGK2v51L/pub?output=csv"
vaul.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTd-IH6XcwWpzDQav6eQO5NBzV2XB3XzCwJdxHarSiOniu57EoqegV8vU4eF8bo_8REcr8SxsXaDMpR/pub?output=csv"
### from CPCRW Caribou Peak Met Station ###
precip.cariboupeak = read.csv("CPCRW_Caribou_2020.csv",
skip = 4)
precip.cariboupeak$date_timeAK = as.POSIXct(precip.cariboupeak$Time, "%m/%d/%y %H:%M", tz="America/Anchorage")
class(precip.cariboupeak$date_timeAK)
tz(precip.cariboupeak$date_timeAK)
precip.cariboupeak = precip.cariboupeak[,-1]
names(precip.cariboupeak) = c("Precip", "DateTime")
### from CPCRW CRREL Main Met Station ###
precip.crrel <- read_csv("CPCRW_CRREL_2020_Precip.csv",
skip = 4)
precip.crrel$DateTime = as.POSIXct(precip.crrel$Time, "%m/%d/%Y %H:%M", tz="America/Anchorage")
class(precip.crrel$DateTime)
tz(precip.crrel$DateTime)
precip.crrel = precip.crrel[,-1]
names(precip.crrel) = c("Precip", "DateTime")
strt.gauge <- read.csv(url(strt.url), skip = 1)
frch.gauge <- read.csv(url(frch.url), skip = 1)
vaul.gauge <- read.csv(url(vaul.url), skip = 1)
### Rename columns ###
names(strt.gauge) <- c("Site", "DateTimeGMT", "Precip")
names(frch.gauge) <- c("Site", "DateTimeGMT", "Precip")
names(vaul.gauge) <- c("Site", "DateTimeGMT", "Precip")
strt.gauge$Site <- "STRT"
frch.gauge$Site <- "FRCH"
vaul.gauge$Site <- "VAUL"
# Input NA for missing time #
strt.gauge$DateTimeGMT[strt.gauge$DateTimeGMT == ""] <- NA
frch.gauge$DateTimeGMT[frch.gauge$DateTimeGMT == ""] <- NA
vaul.gauge$DateTimeGMT[vaul.gauge$DateTimeGMT == ""] <- NA
# Convert time and put in AK time #
strt.gauge$DateTime <- mdy_hms(strt.gauge$DateTimeGMT, tz = "GMT")
attributes(strt.gauge$DateTime)$tzone <- 'America/Anchorage'
frch.gauge$DateTime <- mdy_hms(frch.gauge$DateTimeGMT, tz = "GMT")
attributes(frch.gauge$DateTime)$tzone <- 'America/Anchorage'
vaul.gauge$DateTime <- mdy_hms(vaul.gauge$DateTimeGMT, tz = "GMT")
attributes(vaul.gauge$DateTime)$tzone <- 'America/Anchorage'
# Plot data #
STRT <- ggplot(strt.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("Stuart Rain Gauge")
STRT
FRCH <- ggplot(frch.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("French Rain Gauge")
FRCH
VAUL <- ggplot(vaul.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("Vault Rain Gauge")
VAUL
POKE.precip <- ggplot(precip.cariboupeak) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("CPCRW Rain Gauge")
POKE.precip
POKE.precip.crrel <- ggplot(precip.crrel) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("CPCRW CRREL Rain Gauge")
POKE.precip.crrel
## STRT ##
strt.gauge$inst_rainfall_mm = 0.2
## FRCH ##
frch.gauge$inst_rainfall_mm = 0.2
## VAUL ##
vaul.gauge$inst_rainfall_mm = 0.2
#### compile into per 15 min rainfall ###
## STRT ##
min<-cut(strt.gauge$DateTime, breaks="15 min")
STRT.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = strt.gauge, FUN=function(x)
sum=sum(x)))
STRT.st$DateTime <-as.POSIXct(STRT.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
## FRCH ##
min<-cut(frch.gauge$DateTime, breaks="15 min")
FRCH.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = frch.gauge, FUN=function(x)
sum=sum(x)))
FRCH.st$DateTime<-as.POSIXct(FRCH.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
## VAUL ##
min<-cut(vaul.gauge$DateTime, breaks="15 min")
VAUL.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data=vaul.gauge, FUN=function(x)
sum=sum(x)))
VAUL.st$DateTime<-as.POSIXct(VAUL.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
#### round time to nearest 15 min ####
STRT.st$DateTime = lubridate::round_date(STRT.st$DateTime, "15 minutes")
FRCH.st$DateTime = lubridate::round_date(FRCH.st$DateTime, "15 minutes")
VAUL.st$DateTime = lubridate::round_date(VAUL.st$DateTime, "15 minutes")
#### plot to check ####
par(mfrow=c(1,1))
plot(STRT.st$inst_rainfall_mm ~ STRT.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2020-07-25 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$DateTime, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
plot(VAUL.st$inst_rainfall_mm ~ VAUL.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
# Bind Together #
poke.gauge <- data.frame(precip.cariboupeak$DateTime, precip.crrel$Precip, precip.cariboupeak$Precip)
poke.gauge$MeanPrecip <- rowMeans(poke.gauge[,c('precip.crrel.Precip', 'precip.cariboupeak.Precip')], na.rm = TRUE)
poke.gauge$Site <- "POKE"
names(poke.gauge) <- c("DateTime", "CRREL_Precip", "Caribou_Precip", "Precip", "Site")
allrain.2020 <- bind_rows(strt.gauge, frch.gauge, vaul.gauge)
allrain.2020$Precip <- allrain.2020$Precip/10
ALL <- ggplot(allrain.2020) +
geom_line(aes(x = DateTime, y = Precip, color = Site)) +
xlab("Date") +
ylab("Cumulative Precipitation in cm") +
ggtitle("STRT FRCH VAUL Rain Gauge")
ALL
dir.create("RainGauge")
write.csv(allrain,"RainGauge/allrain_2020.csv", row.names = FALSE)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(plyr)
library(imputeTS)
library(TSA)
library(bbmle)
library(zoo)
library(xts)
library(forecast)
library(stats)
library(lattice)
library(nlme)
library(geosphere)
library(car)
library(EcoHydRology)
### Load from local machine ###
EXO_ALL <- read_csv("~/Documents/DoD_2020/EXO_data/from_internal_harddrive/processed/EXO.ALL.csv")
EXO_ALL$Site <- EXO_ALL$site.ID
EXO_ALL$DateTime <- as.POSIXct(EXO_ALL$DateTime)
ALL <- full_join(EXO_ALL, final_discharge_2020)
SUNA_ALL <- read_csv("~/Documents/DoD_2020/SUNA_data/from_internal_harddrive/processed/SUNA.processed.csv")
SUNA_ALL <- SUNA_ALL[, -(14:269)] # Remove channels
SUNA_ALL$Site <- SUNA_ALL$site.ID
SUNA_ALL$DateTime <- SUNA_ALL$datetimeAK
ALL <- full_join(ALL, SUNA_ALL)
#### subset data by site ####
FRCH <-  subset(ALL, Site == "FRCH")
head(FRCH$DateTime)
STRT = subset(ALL, Site == "STRT")
head(STRT$DateTime)
POKE = subset(ALL, Site == "POKE")
head(POKE$DateTime)
VAUL = subset(ALL, Site == "VAUL")
head(VAUL$DateTime)
MOOS = subset(ALL, Site == "MOOS")
head(MOOS$DateTime)
FRCH_Q = as.data.frame(Q.daily$FRCH)
FRCH_Q$day = as.Date(rownames(Q.daily))
names(FRCH_Q) = c("Discharge_Lsec", "day")
write.csv(FRCH_Q, "Predicted_Discharge/processed/FRCH_Q_2020.csv", row.names = FALSE)
STRT_Q = as.data.frame(Q.daily$STRT)
STRT_Q$day = as.Date(rownames(Q.daily))
names(STRT_Q) = c("Discharge_Lsec", "day")
POKE_Q = as.data.frame(Q.daily$POKE)
POKE_Q$day = as.Date(rownames(Q.daily))
names(POKE_Q) = c("Discharge_Lsec", "day")
VAUL_Q = as.data.frame(Q.daily$VAUL)
VAUL_Q$day = as.Date(rownames(Q.daily))
names(VAUL_Q) = c("Discharge_Lsec", "day")
MOOS_Q = as.data.frame(Q.daily$MOOS)
MOOS_Q$day = as.Date(rownames(Q.daily))
names(MOOS_Q) = c("Discharge_Lsec", "day")
#### data wrangling - fill gaps ####
# fxn #
fillgaps15 = function(df, dat, datquotes, largegap.num){
## Document gaps >= largegap.num (1 largegap.num = 15 min) ##
# (note - the criteria of what constitutes a "large" gap should be reevaluated depending on the trend being characterized)
is.na.rle <- rle(is.na(dat))
is.na.rle$values <- is.na.rle$values & is.na.rle$lengths >= (largegap.num)
biggaps = df[inverse.rle(is.na.rle), ]
tz(biggaps$DateTime) = "America/Anchorage"
biggaps = subset(biggaps, select = "DateTime")
# Make univariate time series, covert to zoo, then to ts #
ts.xts = subset(df, select = c("DateTime",datquotes))
ts.xts<-read.zoo(ts.xts, index.column=1, format="%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
ts.xts<-as.xts(ts.xts)
# remove leading and trailing NAs #
ts.xts = na.trim(ts.xts, is.na="any")
# Apply auto.arima and kalman filter to impute missing values #
fit2 = auto.arima(ts.xts)
kal = KalmanSmooth(ts.xts, fit2$model)
id.na<-which(is.na(ts.xts))
for(i in id.na)
ts.xts[i]<-fit2$model$Z %*% kal$smooth[i,]
# revert to dataframe #
ts.df = as.data.frame((ts.xts))
ts.df$date_timeAK = as.POSIXct(row.names(ts.df), tz="America/Anchorage")
names(ts.df) = c("dat_filled", "DateTime")
# remove large gaps #
ts.df$dat_filled[ts.df$date_timeAK %in% as.POSIXct(biggaps$DateTime)] = NA
# Replace large gaps with linear interpolation #
ts.df$dat_filled = na.interpolation(ts.df$dat_filled)
ts.df = subset(ts.df, select = c("dat_filled", "DateTime"))
return(ts.df)
}
# FRCH #
FRCH.no3 <- subset(FRCH, select = c("datetimeAK","nitrateuM"))
FRCH.no3 <-  fillgaps15(FRCH.no3, FRCH.no3$nitrateuM, "nitrateuM", 16)
names(FRCH.no3) = c("DateTime", "nitrate_uM_filled")
FRCH.fDOM = subset(FRCH, select = c("date","fDOM.RFU"))
names(FRCH.fDOM) = c("fDOM_filled", "DateTime")
FRCH.fDOM = subset(FRCH, select = c("date","fDOM.RFU"))
names(FRCH.fDOM) = c("fDOM_filled", "DateTime")
#
### STRT ###
STRT.no3 <- subset(STRT, select = c("DateTime", "nitrateuM"))
names(STRT.no3) = c("nitrate_uM_filled", "DateTime")
STRT.fDOM = subset(STRT, select = c("DateTime","fDOM.QSU"))
names(STRT.fDOM) = c("fDOM_filled", "DateTime")
### POKE ###
POKE.no3 <- subset(POKE, select = c("DateTime", "nitrateuM"))
POKE.no3 <- POKE.no3[!is.na(POKE.no3$DateTime), ]
names(POKE.no3) = c("nitrate_uM_filled", "DateTime")
POKE.fDOM = subset(POKE, select = c("DateTime","fDOM.RFU"))
names(POKE.fDOM) = c("fDOM_filled", "DateTime")
### VAUL ###
VAUL.no3 <- subset(VAUL, select = c("DateTime", "nitrateuM"))
names(VAUL.no3) = c("nitrate_uM_filled", "DateTime")
VAUL.fDOM = subset(VAUL, select = c("DateTime","fDOM.RFU"))
names(VAUL.fDOM) = c("fDOM_filled", "DateTime")
### MOOS ###
MOOS.no3 <- subset(MOOS, select = c("DateTime", "nitrateuM"))
names(MOOS.no3) = c("nitrate_uM_filled", "DateTime")
MOOS.fDOM = subset(MOOS, select = c("DateTime","fDOM.RFU"))
names(MOOS.fDOM) = c("fDOM_filled", "DateTime")
any(is.na(FRCH_Q$day))
any(is.na(FRCH_Q$Discharge_Lsec))
FRCH_Q <- na.omit(FRCH_Q) # Remove NaNs
any(is.na(STRT_Q$day))
any(is.na(STRT_Q$Discharge_Lsec))
STRT_Q <- na.omit(STRT_Q) # Remove NaNs
any(is.na(POKE_Q$day))
any(is.na(POKE_Q$Discharge_Lsec))
POKE_Q <- na.omit(POKE_Q) # Remove NaNs
any(is.na(VAUL_Q$day))
any(is.na(VAUL_Q$Discharge_Lsec))
VAUL_Q <- na.omit(VAUL_Q) # Remove NaNs
any(is.na(MOOS_Q$day))
any(is.na(MOOS_Q$Discharge_Lsec))
MOOS_Q <- na.omit(MOOS_Q) # Remove NaNs
### examine the recursive digital filter at .9, .925, .95 levels ###
plot(FRCH$MeanDischarge ~ FRCH$DateTime, type = "l", xlab = "", ylab = "Q (L/sec)",
xlim =  as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0, 3000), col="blue")
#
plot(poke.final.discharge$MeanDischarge ~ poke.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(vaul.final.discharge$MeanDischarge ~ vaul.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(strt.final.discharge$MeanDischarge ~ strt.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(moos.final.discharge$MeanDischarge ~ moos.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
### Hydrograph Separation ###
#
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
#
strt.final.discharge <- strt.final.discharge[-c(10815:10817), ] # clean Nas.
STRT_Q_bf = BaseflowSeparation(strt.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(STRT_Q, select = c(day, Discharge_Lsec)), streamflow2=STRT_Q_bf$bt)
#
POKE_Q_bf = BaseflowSeparation(poke.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(POKE_Q, select = c(day, Discharge_Lsec)), streamflow2=POKE_Q_bf$bt)
#
VAUL_Q_bf = BaseflowSeparation(vaul.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(VAUL_Q, select = c(day, Discharge_Lsec)), streamflow2=VAUL_Q_bf$bt)
MOOS_Q_bf = BaseflowSeparation(moos.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(MOOS_Q, select = c(day, Discharge_Lsec)), streamflow2=MOOS_Q_bf$bt)
###.925 ###
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
#
STRT_Q_bf = BaseflowSeparation(strt.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(STRT_Q, select = c(day, Discharge_Lsec)), streamflow2=STRT_Q_bf$bt)
#
POKE_Q_bf = BaseflowSeparation(poke.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(POKE_Q, select = c(day, Discharge_Lsec)), streamflow2=POKE_Q_bf$bt)
#
VAUL_Q_bf = BaseflowSeparation(vaul.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(VAUL_Q, select = c(day, Discharge_Lsec)), streamflow2=VAUL_Q_bf$bt)
MOOS_Q_bf = BaseflowSeparation(moos.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(MOOS_Q, select = c(day, Discharge_Lsec)), streamflow2=MOOS_Q_bf$bt)
MOOS_Q_bf = BaseflowSeparation(moos.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(MOOS_Q, select = c(day, Discharge_Lsec)), streamflow2=MOOS_Q_bf$bt)
MOOS_Q_bf = BaseflowSeparation(moos.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(MOOS_Q, select = c(day, Discharge_Lsec)), streamflow2=MOOS_Q_bf$bt)
plot(moos.final.discharge$MeanDischarge ~ moos.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
View(moos.final.discharge)
rm(moos.final.discharge)
moos.final.discharge <- full_join(Moose1comb, Moose2comb, by = c("DateTime"))
rm(moos.stream.one)
### Import Raw Data ###
# VAUL only has one because data for PT1 was very erroneous
moos.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS_IoyPoUK6tDeBoPsTibXES49eORxi6SUzt5Df3iSmMmIXncaIAQWlsmzKwjecJelrcKDL3rryyKjS/pub?output=csv"
# Load Data#
moos.stream.one <- read.csv(url(moos.stream.url), skip = 491)
# Rename columns #
names(moos.stream.one) <- c("Site", "DateTimeGMT", "AbsolutePressure", "WaterLevel")
# Input NA for missing time #
moos.stream.one$DateTimeGMT[moos.stream.one$DateTimeGMT == ""] <- NA
# Convert time and put in AK time #
moos.stream.one$DateTime <- mdy_hms(moos.stream.one$DateTimeGMT, tz = "GMT")
attributes(moos.stream.one$DateTime)$tzone <- 'America/Anchorage'
### Filtering out data ###
### MOOS ###
moos.stream.one <- moos.stream.one %>% filter(moos.stream.one$WaterLevel > 165.5) %>% subset(moos.stream.one$DateTime < "2020-10-14") # cleaning data that is below 165.5 because those are errant and then before 10/14 because thats when we took the PTs out
str(moos.stream.one)
moos.stream.two <- moos.stream.two %>% subset(moos.stream.two$DateTime < "2020-10-14")

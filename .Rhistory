any(is.na(POKE_Q$day))
any(is.na(POKE_Q$Discharge_Lsec))
POKE_Q <- na.omit(POKE_Q) # Remove NaNs
any(is.na(VAUL_Q$day))
any(is.na(VAUL_Q$Discharge_Lsec))
VAUL_Q <- na.omit(VAUL_Q) # Remove NaNs
any(is.na(MOOS_Q$day))
any(is.na(MOOS_Q$Discharge_Lsec))
MOOS_Q <- na.omit(MOOS_Q) # Remove NaNs
### examine the recursive digital filter at .9, .925, .95 levels ###
plot(FRCH$MeanDischarge ~ FRCH$DateTime, type = "l", xlab = "", ylab = "Q (L/sec)",
xlim =  as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0, 3000), col="blue")
#
plot(poke.final.discharge$MeanDischarge ~ poke.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(vaul.final.discharge$MeanDischarge ~ vaul.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(strt.final.discharge$MeanDischarge ~ strt.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(moos.final.discharge$MeanDischarge ~ moos.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
### Hydrograph Separation ###
#
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
#
strt.final.discharge <- strt.final.discharge[-c(10815:10817), ] # clean Nas.
STRT_Q_bf = BaseflowSeparation(strt.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(STRT_Q, select = c(day, Discharge_Lsec)), streamflow2=STRT_Q_bf$bt)
#
POKE_Q_bf = BaseflowSeparation(poke.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(POKE_Q, select = c(day, Discharge_Lsec)), streamflow2=POKE_Q_bf$bt)
#
VAUL_Q_bf = BaseflowSeparation(vaul.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(VAUL_Q, select = c(day, Discharge_Lsec)), streamflow2=VAUL_Q_bf$bt)
MOOS_Q_bf = BaseflowSeparation(moos.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(MOOS_Q, select = c(day, Discharge_Lsec)), streamflow2=MOOS_Q_bf$bt)
###.925 ###
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
#
STRT_Q_bf = BaseflowSeparation(strt.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(STRT_Q, select = c(day, Discharge_Lsec)), streamflow2=STRT_Q_bf$bt)
#
POKE_Q_bf = BaseflowSeparation(poke.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(POKE_Q, select = c(day, Discharge_Lsec)), streamflow2=POKE_Q_bf$bt)
#
VAUL_Q_bf = BaseflowSeparation(vaul.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(VAUL_Q, select = c(day, Discharge_Lsec)), streamflow2=VAUL_Q_bf$bt)
MOOS_Q_bf = BaseflowSeparation(moos.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(MOOS_Q, select = c(day, Discharge_Lsec)), streamflow2=MOOS_Q_bf$bt)
### .95 ###
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
#
STRT_Q_bf = BaseflowSeparation(strt.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(STRT_Q, select = c(day, Discharge_Lsec)), streamflow2=STRT_Q_bf$bt)
#
POKE_Q_bf = BaseflowSeparation(poke.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(POKE_Q, select = c(day, Discharge_Lsec)), streamflow2=POKE_Q_bf$bt)
#
VAUL_Q_bf = BaseflowSeparation(vaul.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(VAUL_Q, select = c(day, Discharge_Lsec)), streamflow2=VAUL_Q_bf$bt)
MOOS_Q_bf = BaseflowSeparation(moos.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(MOOS_Q, select = c(day, Discharge_Lsec)), streamflow2=MOOS_Q_bf$bt)
FRCH_bfQ_mn = mean(FRCH_Q_bf$bt)
FRCH_bfQ_mn
FRCH_bfQ_mn*2
STRT_bfQ_mn = mean(STRT_Q_bf$bt)
STRT_bfQ_mn
STRT_bfQ_mn*2
VAUL_bfQ_mn = mean(VAUL_Q_bf$bt)
VAUL_bfQ_mn
VAUL_bfQ_mn*2
POKE_bfQ_mn = mean(POKE_Q_bf$bt)
POKE_bfQ_mn
POKE_bfQ_mn*2
MOOS_bfQ_mn = mean(MOOS_Q_bf$bt)
MOOS_bfQ_mn
MOOS_bfQ_mn*2
View(STRT.st)
View(FRCH.st)
STRT.st.final <- full_join(FRCH.st, STRT.st, by = c("DateTime"))
View(STRT.st.final)
str(FRCH.st)
STRT.FRCH <- FRCH.st %>% subset(FRCH.st$DateTime < "2020-07-29") # Cleaning data that is before October 10th due to ice (Site was taken down Oct 14th)
### POKE ###
poke.stream.one <- poke.stream.one %>% subset(poke.stream.one$DateTime < "2020-10-10") # Cleaning data that is before October 10th due to ice (Site was taken down Oct 14th)
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(here)
STRT.FRCH <- FRCH.st %>% subset(FRCH.st$DateTime < "2020-07-29") # Cleaning data that is before October 10th due to ice (Site was taken down Oct 14th)
STRT.FRCH <- FRCH.st[-c(1:437), ]
rm(STRT.FRCH)
STRT.FRCH <- FRCH.st[-c(438:677), ]
View(STRT.FRCH)
STRT.st.final <- full_join(STRT.FRCH, STRT.st, by = c("DateTime"))
STRT.st.final <- left_join(STRT.FRCH, STRT.st, by = c("DateTime"))
STRT.st.final <- full_join(STRT.FRCH, STRT.st, by = c("DateTime"))
STRT.st.final$Precip <- rowMeans(STRT.st.final[,c(2,5)], na.rm = TRUE)
## FRCH ##
min<-cut(frch.gauge$DateTime, breaks="15 min")
FRCH.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = frch.gauge, FUN=function(x)
sum=sum(x)))
FRCH.st$DateTime<-as.POSIXct(FRCH.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
## VAUL ##
min<-cut(vaul.gauge$DateTime, breaks="15 min")
VAUL.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data=vaul.gauge, FUN=function(x)
sum=sum(x)))
VAUL.st$DateTime<-as.POSIXct(VAUL.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
#### round time to nearest 15 min ####
STRT.st$DateTime = lubridate::round_date(STRT.st$DateTime, "15 minutes")
FRCH.st$DateTime = lubridate::round_date(FRCH.st$DateTime, "15 minutes")
VAUL.st$DateTime = lubridate::round_date(VAUL.st$DateTime, "15 minutes")
#### plot to check ####
par(mfrow=c(1,1))
plot(STRT.st$inst_rainfall_mm ~ STRT.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2020-07-25 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$DateTime, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
plot(VAUL.st$inst_rainfall_mm ~ VAUL.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
# Bind Together #
poke.gauge <- data.frame(precip.cariboupeak$DateTime, precip.crrel$Precip, precip.cariboupeak$Precip)
poke.gauge$MeanPrecip <- rowMeans(poke.gauge[,c('precip.crrel.Precip', 'precip.cariboupeak.Precip')], na.rm = TRUE)
poke.gauge$Site <- "POKE"
names(poke.gauge) <- c("DateTime", "CRREL_Precip", "Caribou_Precip", "Precip", "Site")
allrain.2020 <- bind_rows(strt.gauge, frch.gauge, vaul.gauge)
allrain.2020$Precip <- allrain.2020$Precip/10
ALL <- ggplot(allrain.2020) +
geom_line(aes(x = DateTime, y = Precip, color = Site)) +
xlab("Date") +
ylab("Cumulative Precipitation in cm") +
ggtitle("STRT FRCH VAUL Rain Gauge")
ALL
dir.create("RainGauge")
write.csv(allrain,"RainGauge/allrain_2020.csv", row.names = FALSE)
### Merge Discharge and Precip ###
frch.precip.discharge <- full_join(frch.final.discharge, FRCH.st) # merging precip data and discharge
strt.precip.discharge <- full_join(strt.final.discharge, STRT.st.final) # merging precip data and discharge
vaul.precip.discharge <- full_join(vaul.final.discharge, VAUL.st) # merging precip data and discharge
poke.precip.discharge <- full_join(poke.final.discharge, poke.gauge) # merging precip data and discharge
### Sum daily discharge ###
frch.precip.discharge$twentyfour <- rollapplyr(frch.precip.discharge$inst_rainfall_mm, 96, sum, na.rm = TRUE, fill = NA)
frch.precip.discharge$fourtyeight <- rollapplyr(frch.precip.discharge$inst_rainfall_mm, 192, sum, na.rm = TRUE, fill = NA)
strt.precip.discharge$twentyfour <- rollapplyr(strt.precip.discharge$inst_rainfall_mm, 96, sum, na.rm = TRUE, fill = NA)
strt.precip.discharge$fourtyeight <- rollapplyr(strt.precip.discharge$inst_rainfall_mm, 192, sum, na.rm = TRUE, fill = NA)
vaul.precip.discharge$twentyfour <- rollapplyr(vaul.precip.discharge$inst_rainfall_mm, 96, sum, na.rm = TRUE, fill = NA)
vaul.precip.discharge$fourtyeight <- rollapplyr(vaul.precip.discharge$inst_rainfall_mm, 192, sum, na.rm = TRUE, fill = NA)
poke.precip.discharge$twentyfour <- rollapplyr(poke.precip.discharge$Precip, 96, sum, na.rm = TRUE, fill = NA)
poke.precip.discharge$fourtyeight <- rollapplyr(poke.precip.discharge$Precip, 192, sum, na.rm = TRUE, fill = NA)
# Greater than 10 #
frch.ten.twenty.four <- frch.precip.discharge[which(frch.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
frch.ten.fourty.eight <- frch.precip.discharge[which(frch.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
strt.ten.twenty.four <- strt.precip.discharge[which(strt.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
strt.ten.fourty.eight <- strt.precip.discharge[which(strt.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
vaul.ten.twenty.four <- vaul.precip.discharge[which(vaul.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
vaul.ten.fourty.eight <- vaul.precip.discharge[which(vaul.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
poke.ten.twenty.four <- poke.precip.discharge[which(poke.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
poke.ten.fourty.eight <- poke.precip.discharge[which(poke.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
### Discharge/Chem/Precip ###
# FRCH #
### Import precipitation data into the *ALL document ###
# FRCH rain gauge installed on the 11th of June.
par(mfrow=c(1,1))
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$datetimeAK, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(25,0),
axes=F, xlab="", ylab="")
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(25,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'FRCH precip. (mm)')
abline(v = as.POSIXct(frch.ten.fourty.eight$DateTime), col = "red", lwd = 0.1)
abline(v = as.POSIXct(frch.ten.fourty.eight$DateTime), col = "red", lwd = 0.1)
### Discharge/Chem/Precip ###
# FRCH #
### Import precipitation data into the *ALL document ###
# FRCH rain gauge installed on the 11th of June.
par(mfrow=c(1,1))
abline(v = as.POSIXct(frch.ten.fourty.eight$DateTime), col = "red", lwd = 0.1)
abline(v = as.POSIXct(frch.ten.twenty.four$DateTime), col="blue", lwd = 0.1)
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(25,0),
axes=F, xlab="", ylab="")
### Discharge/Chem/Precip ###
# FRCH #
### Import precipitation data into the *ALL document ###
# FRCH rain gauge installed on the 11th of June.
par(mfrow=c(1,1))
abline(v = as.POSIXct(frch.ten.fourty.eight$DateTime), col = "red", lwd = 0.1)
abline(v = as.POSIXct(frch.ten.twenty.four$DateTime), col="blue", lwd = 0.1)
par(new = T)
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(25,0),
axes=F, xlab="", ylab="")
### Discharge/Chem/Precip ###
# FRCH #
### Import precipitation data into the *ALL document ###
# FRCH rain gauge installed on the 11th of June.
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(25,0),
axes=F, xlab="", ylab="")
par(mfrow=c(1,1))
abline(v = as.POSIXct(frch.ten.fourty.eight$DateTime), col = "red", lwd = 0.1)
abline(v = as.POSIXct(frch.ten.twenty.four$DateTime), col="blue", lwd = 0.1)
par(new = T)
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(25,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'FRCH precip. (mm)')
par(new = T)
plot(FRCH$MeanDischarge ~ FRCH$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
abline(h=FRCH_bfQ_mn*2, col="red", lty=2)
abline(h=FRCH_bfQ_mn, col="red")
# STRT #
# STRT rain gauge installed on the 29th of July #
plot(STRT.st.final$inst_rainfall_mm ~ STRT.st.final$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
# STRT #
# STRT rain gauge installed on the 29th of July #
plot(STRT.st.final$Precip ~ STRT.st.final$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'STRT precip. (mm)')
par(new = T)
abline(v = as.POSIXct(strt.ten.fourty.eight$DateTime), col = "red", lwd = 0.1)
abline(v = as.POSIXct(strt.ten.twenty.four$DateTime), col="blue", lwd = 0.1)
View(strt.precip.discharge)
View(frch.precip.discharge)
strt.precip.discharge$twentyfour <- rollapplyr(strt.precip.discharge$Precip, 96, sum, na.rm = TRUE, fill = NA)
strt.precip.discharge$fourtyeight <- rollapplyr(strt.precip.discharge$Precip, 192, sum, na.rm = TRUE, fill = NA)
strt.ten.twenty.four <- strt.precip.discharge[which(strt.precip.discharge$twentyfour >= 10),] # twenty four hour period where the precip is 10
strt.ten.fourty.eight <- strt.precip.discharge[which(strt.precip.discharge$fourtyeight >= 10),] # fourty eight hour period where the precip is greater than 10
# STRT #
# STRT rain gauge installed on the 29th of July #
plot(STRT.st.final$Precip ~ STRT.st.final$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'STRT precip. (mm)')
par(new = T)
abline(v = as.POSIXct(strt.ten.fourty.eight$DateTime), col = "red", lwd = 0.1)
abline(v = as.POSIXct(strt.ten.twenty.four$DateTime), col="blue", lwd = 0.1)
par(new = T)
plot(STRT.st.final$Precip ~ STRT.st.final$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
par(new = T)
plot(strt.final.discharge$MeanDischarge ~ strt.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
abline(h=STRT_bfQ_mn*2, col="red", lty=2)
abline(h=STRT_bfQ_mn, col="red")
moos.final <- ggplot(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb) +
geom_line(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.moos2.Q), data = Moose2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = DateTime, y = MeanDischarge), data = moos.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3500) +
ggtitle("Moose1(light) & Moose2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
moos.final
# STRT #
# STRT rain gauge installed on the 29th of July #
plot(STRT.st.final$Precip ~ STRT.st.final$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'STRT precip. (mm)')
par(new = T)
abline(v = as.POSIXct(strt.ten.fourty.eight$DateTime), col = "red", lwd = 0.1)
abline(v = as.POSIXct(strt.ten.twenty.four$DateTime), col="blue", lwd = 0.1)
par(new = T)
plot(STRT.st.final$Precip ~ STRT.st.final$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
par(new = T)
plot(strt.final.discharge$MeanDischarge ~ strt.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
abline(h=STRT_bfQ_mn*2, col="red", lty=2)
abline(h=STRT_bfQ_mn, col="red")
write.csv(frch.precip.discharge, "frch.precip.discharge.csv", row.names = FALSE)
getwd()
### Sum daily discharge ###
frch.precip.discharge$twentyfour <- rollapplyr(frch.precip.discharge$inst_rainfall_mm, 96, sum, na.rm = TRUE, fill = NA)
frch.precip.discharge$fourtyeight <- rollapplyr(frch.precip.discharge$inst_rainfall_mm, 192, sum, na.rm = TRUE, fill = NA)
# VAUL #
# VAUL rain gauge installed on the 22nd of June #
plot(VAUL.st$inst_rainfall_mm ~ VAUL.st$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
# VAUL #
# VAUL rain gauge installed on the 22nd of June #
plot(VAUL.st$inst_rainfall_mm ~ VAUL.st$DateTime, type="h",
xlim = as.POSIXct(c("2020-05-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
# VAUL #
# VAUL rain gauge installed on the 22nd of June #
plot(VAUL.st$inst_rainfall_mm ~ VAUL.st$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'VAUL precip. (mm)')
abline(v = as.POSIXct(vaul.ten.fourty.eight$DateTime), col = "red", lwd = 0.1)
abline(v = as.POSIXct(vaul.ten.twenty.four$DateTime), col="blue", lwd = 0.1)
par(new = T)
plot(vaul.final.discharge$MeanDischarge ~ vaul.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
## POKE ##
### Import precipitation data from LTER ###
plot(poke.gauge$Precip ~ poke.gauge$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-31 00:00:00"), tz="America/Anchorage"),
ylim = c(20,0),
axes=F, xlab="", ylab="")
axis(side = 4)
## POKE ##
### Import precipitation data from LTER ###
plot(poke.gauge$Precip ~ poke.gauge$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-31 00:00:00"), tz="America/Anchorage"),
ylim = c(15,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'POKE precip. (mm)')
abline(v = as.POSIXct(poke.ten.fourty.eight$DateTime), col = "red", lwd = 0.1)
abline(v = as.POSIXct(poke.ten.twenty.four$DateTime), col="blue", lwd = 0.1)
par(new = T)
plot(poke.final.discharge$MeanDischarge ~ poke.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
abline(h=POKE_bfQ_mn*2, col="red", lty=2)
abline(h=POKE_bfQ_mn, col="red")
POKE.precip <- ggplot(precip.cariboupeak) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("CPCRW Rain Gauge")
POKE.precip
plot(moos.final.discharge$MeanDischarge ~ moos.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
### Poker1 (light blue) and Poker2 (dark blue) with observed Q.
poke.final <- ggplot(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb) +
geom_line(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.poke2.Q), data = Poke2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = Poke1comb.DateTime, y = MeanDischarge), data = poke.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("Poker1(light) & Poker2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
poke.final
### POKE ###
# PT1 #
Poke1comb$pred.poke1.Q <- coef(POKE1.lm)[2] * Poke1comb$WaterLevel+ coef(POKE1.lm)[1]
ggplot(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Poker1 predicted all measured Q") +
xlab("Date") +
ylab("Predicted Discharge")
# PT2 #
Poke2comb$pred.poke2.Q <- coef(POKE2.lm)[2] * Poke2comb$WaterLevel+ coef(POKE2.lm)[1]
ggplot(aes(x = DateTime, y = pred.poke2.Q), data = Poke2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Poker") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge(L/s)") +
scale_x_datetime(limits = as_datetime(c("2020-05-15", "2020-10-10")))
### POKE ###
# PT1 #
Poke1comb$pred.poke1.Q <- coef(POKE1.lm)[2] * Poke1comb$WaterLevel+ coef(POKE1.lm)[1]
ggplot(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Poker1 predicted all measured Q") +
xlab("Date") +
ylab("Predicted Discharge")
# PT2 #
Poke2comb$pred.poke2.Q <- coef(POKE2.lm)[2] * Poke2comb$WaterLevel+ coef(POKE2.lm)[1]
ggplot(aes(x = DateTime, y = pred.poke2.Q), data = Poke2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Poker") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylim(0, 3500) +
ylab("Discharge(L/s)") +
scale_x_datetime(limits = as_datetime(c("2020-05-15", "2020-10-10")))
moos.final <- ggplot(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb) +
geom_line(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.moos2.Q), data = Moose2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = DateTime, y = MeanDischarge), data = moos.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3500) +
ggtitle("Moose1(light) & Moose2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
moos.final
?rollapply
plot(poke.final.discharge$MeanDischarge ~ poke.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
abline(h=POKE_bfQ_mn*2, col="red", lty=2)
abline(h=POKE_bfQ_mn, col="red")
lines(POKE$nitrateuM * 25 ~ POKE.no3$DateTime, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 01:00:00"), tz="America/Anchorage"))
### POKE ###
POKE.no3 <- subset(POKE, select = c("DateTime", "nitrateuM"))
POKE.no3 <- POKE.no3[!is.na(POKE.no3$DateTime), ]
names(POKE.no3) = c("nitrate_uM_filled", "DateTime")
POKE.fDOM = subset(POKE, select = c("DateTime","fDOM.RFU"))
names(POKE.fDOM) = c("fDOM_filled", "DateTime")
plot(poke.final.discharge$MeanDischarge ~ poke.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
abline(h=POKE_bfQ_mn*2, col="red", lty=2)
abline(h=POKE_bfQ_mn, col="red")
lines(POKE$nitrateuM * 25 ~ POKE.no3$DateTime, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 01:00:00"), tz="America/Anchorage"))
moos.final
French.final
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb) +
geom_line(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = Strt1comb.DateTime, y = Strt1comb.pred.strt1.Q), data = strt.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("Stuart1(light) & Stuart2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
ggplot(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart2 predicted all measured Q") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("Date") +
ylab("Predicted Discharge")
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge (L/s)") +
scale_x_datetime(limits = as_datetime(c("2020-05-15", "2020-10-09")))
FRCH_bfQ_mn
STRT_bfQ_mn
MOOS_bfQ_mn
Moos.stream.one <- read_csv("~/Downloads/10710340_MOOS_stream_1 - 10710340_MOOS_stream_1 (1).csv",
skip = 491)
head(Moos.stream.one)
names(Moos.stream.one) <- c("Site", "DateTimeGMT", "AbsolutePressure", "WaterLevel")
head(Moos.stream.one)
# Input NA for missing time #
moos.stream.one$DateTimeGMT[moos.stream.one$DateTimeGMT == ""] <- NA
Moos.stream.one$DateTime <- mdy_hms(Moos.stream.one$DateTimeGMT, tz = "GMT")
attributes(Moos.stream.one$DateTime)$tzone <- 'America/Anchorage'
plot(x = Moos.stream.one$DateTime, y = Moos.stream.one$WaterLevel) # Plot check
### Filtering out data ###
### MOOS ###
moos.stream.one <- moos.stream.one %>% filter(moos.stream.one$WaterLevel > 165.5) %>% subset(moos.stream.one$DateTime < "2020-10-14") # cleaning data that is below 165.5 because those are errant and then before 10/14 because thats when we took the PTs out

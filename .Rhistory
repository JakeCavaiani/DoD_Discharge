c <- ggplot(strt.pt.2020) +
geom_line(aes(x = DateTime , y= MeanWL), size=1.25) +
xlab("Date") +
ylab("Water Level") +
theme_classic() +
ggtitle("Stuart PT comparison") +
scale_color_brewer(palette = "Paired")
d <- ggplot(vaul.pt.2020) +
geom_line(aes(x = DateTime , y= MeanWL), size=1.25) +
xlab("Date") +
ylab("Water Level") +
theme_classic() +
ggtitle("Vault PT comparison") +
scale_color_brewer(palette = "Paired")
e <- ggplot(poke.pt.2020) +
geom_line(aes(x = DateTime , y= MeanWL), size=1.25) +
xlab("Date") +
ylab("Water Level") +
theme_classic() +
ggtitle("Poker average WL") +
scale_color_brewer(palette = "Paired")
plot_grid(b,
d,
e,
c,
a,
ncol = 1)
d <- ggplot(vaul.pt.2020) +
geom_line(aes(x = DateTime , y= MeanWL), size=1.25) +
xlab("Date") +
ylab("Water Level") +
theme_classic() +
ggtitle("Vault PT comparison") +
scale_color_brewer(palette = "Paired")
d <- ggplot(vaul.stream.2020) +
geom_line(aes(x = DateTime , y= MeanWL), size=1.25) +
xlab("Date") +
ylab("Water Level") +
theme_classic() +
ggtitle("Vault PT comparison") +
scale_color_brewer(palette = "Paired")
d
d <- ggplot(vaul.stream.2020) +
geom_line(aes(x = DateTime , y= WaterLevel), size=1.25) +
xlab("Date") +
ylab("Water Level") +
theme_classic() +
ggtitle("Vault PT comparison") +
scale_color_brewer(palette = "Paired")
d
# Moos Clean #
a <- ggplot(moos.pt.2020) +
geom_line(aes(x = DateTime , y= MeanWL), size=1.25) +
xlab("Date") +
ylab("Water Level") +
theme_classic() +
ggtitle("Moose final") +
scale_color_brewer(palette = "Paired")
b <- ggplot(frch.pt.2020) +
geom_line(aes(x = DateTime , y= MeanWL), size=1.25) +
xlab("Date") +
ylab("Water Level") +
theme_classic() +
ggtitle("French final") +
scale_color_brewer(palette = "Paired")
c <- ggplot(strt.pt.2020) +
geom_line(aes(x = DateTime , y= MeanWL), size=1.25) +
xlab("Date") +
ylab("Water Level") +
theme_classic() +
ggtitle("Stuart final") +
scale_color_brewer(palette = "Paired")
d <- ggplot(vaul.stream.2020) +
geom_line(aes(x = DateTime , y= WaterLevel), size=1.25) +
xlab("Date") +
ylab("Water Level") +
theme_classic() +
ggtitle("Vault final") +
scale_color_brewer(palette = "Paired")
e <- ggplot(poke.pt.2020) +
geom_line(aes(x = DateTime , y= MeanWL), size=1.25) +
xlab("Date") +
ylab("Water Level") +
theme_classic() +
ggtitle("Poker final") +
scale_color_brewer(palette = "Paired")
plot_grid(b,
d,
e,
c,
a,
ncol = 1)
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
################################## 2020 ###################################################################
myurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRUMy2yDlF5WQRDGgbuNHeVNp7diusfPJuKgikGY2ZQ8ewbG4Tyxm5TeN0shtDkxMmeL9M0AzhaL8l7/pub?output=csv"
QSummary.2019 <- read.csv(url(myurl))
QSummary.2019$Time[QSummary.2019$Time == ""] <- NA
QSummary.2019$Q_Ls[QSummary.2019$Q_Ls == ""] <- NA
QSummary.2019$Date <- mdy(QSummary.2019$Date)
QSummary.2019$DateTime <- as.POSIXct(paste(QSummary.2019$Date, QSummary.2019$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
QSummary.2019$DateTime <- lubridate::round_date(QSummary.2019$DateTime, "15 minutes")
# Import data from google drive #
discharge.2020 <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTPrFKu3yyEDEDkxPVJW2vIWznwmSUcwuNlHInDmrD4EjOQYAkHmtnWJXRT1toDa74ptmHj4O1My3xw/pub?output=csv"
QSummary.2020 <- read.csv(url(discharge.2020))
QSummary.2020 <-  subset(QSummary.2020, select = -c(X2019, Notes, Average, X, Observations, X.1, X2020, average.as.of.8.29., X.2, observations.as.of.8.29.)) # Cleaning columns that are not important to the dataset
QSummary.2020$date <- mdy(QSummary.2020$Date)
QSummary.2020$DateTime <- as.POSIXct(paste(QSummary.2020$date, QSummary.2020$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
### ALL Sites ###
ggplot(QSummary.2020) +
geom_point(aes(x=Date, y=MeasuredQ_Ls, color=Site, shape=Method), size=3) +
theme_classic() +
scale_color_brewer(palette = "Set1") +
ggtitle("ALL SITES")
# Filter French #
QSummary.FR.2020 <- QSummary.2020 %>% filter(Site =="FRCH")
### Rating curve for FRCH PT1 ###
frch.stream.one.2020$Site <- "FRCH"
French1comb.2020 <- full_join(frch.stream.one.2020, QSummary.FR.2020) # Join PT data with Discharge
French1.lm.2020 <- lm(French1comb.2020$MeasuredQ_Ls ~ French1comb.2020$WaterLevel) # linear model with discharge and water level
frch.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = French1comb.2020) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(184,185.5) +
theme_classic() +
ggtitle("French1 all measured Q")
### Rating curve for FRCH PT2 ###
frch.stream.two.2020$Site <- "FRCH"
French2comb.2020 <- full_join(frch.stream.two.2020, QSummary.FR.2020)
French2.lm.2020 <- lm(French2comb.2020$MeasuredQ_Ls ~ French2comb.2020$WaterLevel)
ggplot(aes(x= WaterLevel, y = MeasuredQ_Ls), data = French2comb.2020) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(184, 185.5) +
theme_classic() +
ggtitle("French2 all measured Q")
### Filter Moose ###
QSummary.MO.2020 <- QSummary.2020 %>% filter(Site =="MOOS")
moos.stream.one.2020.final$Site <- "MOOS"
Moose1comb.2020 <- full_join(moos.stream.one.2020.final, QSummary.MO.2020)
MOOS1.lm.2020 <- lm(Moose1comb.2020$MeasuredQ_Ls ~ Moose1comb.2020$WaterLevel)
moos.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Moose1comb.2020) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = moos.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(165.75,166.5) +
ylim(600, 1500) +
theme_classic() +
ggtitle("Moose1 all measured Q")
moos.stream.two.2020.final$Site <- "MOOS"
Moose2comb.2020 <- full_join(moos.stream.two.2020.final, QSummary.MO.2020)
MOOS2.lm.2020 <- lm(Moose2comb.2020$MeasuredQ_Ls ~ Moose2comb.2020$WaterLevel)
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Moose2comb.2020) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = moos.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(165.75,166.75) +
ylim(600, 1500) +
theme_classic() +
ggtitle("Moose2 all measured Q")
### Filter Poker ###
QSummary.PO.2020 <- QSummary.2020 %>% filter(Site =="POKE")
### Rating curve for POKE PT1 ###
poke.stream.one.2020$Site <- "POKE"
Poke1comb.2020 <- full_join(poke.stream.one.2020, QSummary.PO.2020)
POKE1.lm.2020 <- lm(Poke1comb.2020$MeasuredQ_Ls ~ Poke1comb.2020$WaterLevel)
poke.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Poke1comb.2020) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = poke.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(215.9, 216.5) +
ylim(200, 2000) +
theme_classic() +
ggtitle("Poke1 all measured Q")
poke.stream.two.2020$Site <- "POKE"
Poke2comb.2020 <- full_join(poke.stream.two.2020, QSummary.PO.2020)
POKE2.lm.2020 <- lm(Poke2comb.2020$MeasuredQ_Ls ~ Poke2comb.2020$WaterLevel)
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Poke2comb.2020) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(215.8, 216.5) +
ylim(200, 2000) +
theme_classic() +
ggtitle("Poker2 all measured Q")
### Filter Stuart ###
QSummary.ST.2020 <- QSummary.2020 %>% filter(Site =="STRT")
strt.stream.one.2020$Site <- "STRT"
Strt1comb.2020 <- full_join(strt.stream.one.2020, QSummary.ST.2020)
STRT1.lm.2020 <- lm(Strt1comb.2020$MeasuredQ_Ls ~ Strt1comb.2020$WaterLevel)
strt.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt1comb.2020) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(248.4, 248.7) +
ylim(200, 3000) +
theme_classic() +
ggtitle("Strt1 all measured Q")  # I think this worked
strt.stream.two.2020$Site <- "STRT"
Strt2comb.2020 <- full_join(strt.stream.two.2020, QSummary.ST.2020)
STRT2.lm.2020 <- lm(Strt2comb.2020$MeasuredQ_Ls ~ Strt2comb.2020$WaterLevel)
strt.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt2comb.2020) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(248.5, 248.7) +
ylim(200, 2000) +
theme_classic() +
ggtitle("Strt2 all measured Q")
### Filter Vault ###
QSummary.VA.2020 <- QSummary.2020 %>% filter(Site =="VAUL") %>% filter(MeasuredQ_Ls < 2000)
### Rating curve for VAUL PT2 ###
vaul.stream.2020$Site <- "VAUL"
Vaul2comb.2020 <- full_join(vaul.stream.2020, QSummary.VA.2020)
VAUL2.lm.2020 <- lm(Vaul2comb.2020$MeasuredQ_Ls ~ Vaul2comb.2020$WaterLevel)
vaul.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Vaul2comb.2020) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(197.5, 198.5) +
ylim(0, 1500) +
theme_classic() +
ggtitle("Vault2 all measured Q")
########################################### 2021 ##############################################################
QSummary.2021 <- read_csv("~/Desktop/Q_Summary_2021.csv")
################################### 2020 ##################################################
### FRCH ###
# PT1 #
French1comb.2020$pred.french1.Q <- coef(French1.lm.2020)[2] * French1comb.2020$WaterLevel+ coef(French1.lm.2020)[1]
ggplot(aes(x = DateTime, y = pred.french1.Q), data=French1comb.2020) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
ggtitle("French1 predicted all measured Q") +
xlab("Date") +
ylab("Predicted Discharge")
# PT2 #
French2comb.2020$pred.french2.Q <- coef(French2.lm.2020)[2] * French2comb.2020$WaterLevel+ coef(French2.lm.2020)[1]
ggplot(aes(x = DateTime, y = pred.french2.Q), data=French2comb.2020) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
ggtitle("French") +
xlab("") +
ylab("Discharge (L/s)")
# Final Discharge #
French1comb.2020$DateTimeGMT <- mdy_hms(French1comb.2020$DateTimeGMT, tz = "GMT")
attributes(French1comb.2020$DateTimeGMT)$tzone <- 'America/Anchorage' # Changing GMT to AK time to prep to remove pred Q for PT1
French1comb.2020[c(1039:2382), 13] <- NA # Setting NA to noisy part of the data set
frch.final.discharge.2020 <- data.frame(French1comb.2020$Site, French2comb.2020$DateTime, French1comb.2020$pred.french1.Q, French2comb.2020$pred.french2.Q)
frch.final.discharge.2020$MeanDischarge <- rowMeans(frch.final.discharge.2020[,c ('French1comb.2020.pred.french1.Q', 'French2comb.2020.pred.french2.Q')], na.rm = TRUE)
frch.final.discharge.2020 <- frch.final.discharge.2020[,-(3:4)] # Just mean discharge because it looks fine
frch.final.discharge.2020<- frch.final.discharge.2020[-c(1:2), ] # Removing errant points
frch.final.discharge.2020<- frch.final.discharge.2020[-c(1:2), ] # Removing errant points
names(frch.final.discharge.2020) <- c("Site", "DateTime", "MeanDischarge")
### French1 (light blue), French2 (dark blue), and mean (red) with observed Q.
ggplot(aes(x = DateTime, y = pred.french2.Q), data = French2comb.2020) +
geom_line(aes(x = DateTime, y = pred.french1.Q), data = French1comb.2020, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.french2.Q), data = French2comb.2020,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = DateTime, y = MeanDischarge), data = frch.final.discharge.2020, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ggtitle("French1(light) & French2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
ggplot(frch.final.discharge.2020) +
geom_line(aes(x = DateTime, y = MeanDischarge)) +
theme_classic() +
ylab("Discharge (L/s)") +
xlab("Date") +
ggtitle("French")
### MOOS ###
# PT1 #
Moose1comb.2020$pred.moos1.Q <- coef(MOOS1.lm.2020)[2] * Moose1comb.2020$WaterLevel+ coef(MOOS1.lm.2020)[1]
ggplot(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb.2020) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Moose1 predicted all measured Q") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("Date") +
ylab("Predicted Discharge")
# PT2 #
Moose2comb.2020$pred.moos2.Q <- coef(MOOS2.lm.2020)[2] * Moose2comb.2020$WaterLevel+ coef(MOOS2.lm.2020)[1]
ggplot(aes(x = DateTime, y = pred.moos2.Q), data = Moose2comb.2020) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Moose") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge (L/s)")
French1.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQeBCz7Rq59AjhTnjeJH_H9ot8gtiujyv9-W7KOAKYacPFizjOp4KqxGbhMWmsT756KEGzBYQjeRpgz/pub?output=csv"
French2.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRCm-lCZI01xF1g4ytFCMECZJoUhjjEd11_cQTLDGzyv_4GHeLVEwX5alAVyO8hiDLzJOwWVYQui7E_/pub?output=csv"
Moose1.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTAzlkTb2-hfKPTXP1ZWp1vYCqK1irV4Gy2UMcjF7HSDdUq1WZCRNBfJs07VDrB7dGeHgIalOzrsKPG/pub?output=csv"
Moose2.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTGobrtIaYMa8-jDTYvO2s9OBsnQyksLPLRXPycD0pLi3_Asd786dK0XGnYowobM0p7NLZM5qpxmk9S/pub?output=csv"
# read in data #
French1 <- read.csv(url(French1.url))
French2 <- read.csv(url(French2.url))
Moose1 <- read.csv(url(Moose1.url))
Moose2 <- read.csv(url(Moose2.url))
French1$DateTime <- mdy_hm(French1$DateTimeGMT, tz="GMT") #convert date format.
attributes(French1$DateTime)$tzone <-'America/Anchorage'
French2$DateTime <- mdy_hm(French2$DateTimeGMT, tz="GMT") #convert date format.
attributes(French2$DateTime)$tzone <-'America/Anchorage'
Moose1$DateTime <- mdy_hm(Moose1$DateTimeGMT, tz="GMT") #convert date format.
attributes(Moose1$DateTime)$tzone <-'America/Anchorage'
Moose2$DateTime <- mdy_hm(Moose2$DateTimeGMT, tz="GMT") #convert date format.
attributes(Moose2$DateTime)$tzone <-'America/Anchorage'
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(data.table)
library(rio)
library(neonUtilities)
library(raster)
French1.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQeBCz7Rq59AjhTnjeJH_H9ot8gtiujyv9-W7KOAKYacPFizjOp4KqxGbhMWmsT756KEGzBYQjeRpgz/pub?output=csv"
French2.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRCm-lCZI01xF1g4ytFCMECZJoUhjjEd11_cQTLDGzyv_4GHeLVEwX5alAVyO8hiDLzJOwWVYQui7E_/pub?output=csv"
Moose1.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTAzlkTb2-hfKPTXP1ZWp1vYCqK1irV4Gy2UMcjF7HSDdUq1WZCRNBfJs07VDrB7dGeHgIalOzrsKPG/pub?output=csv"
Moose2.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTGobrtIaYMa8-jDTYvO2s9OBsnQyksLPLRXPycD0pLi3_Asd786dK0XGnYowobM0p7NLZM5qpxmk9S/pub?output=csv"
# read in data #
French1 <- read.csv(url(French1.url))
French2 <- read.csv(url(French2.url))
Moose1 <- read.csv(url(Moose1.url))
Moose2 <- read.csv(url(Moose2.url))
# Convert time and put in AK time
French1$DateTime <- mdy_hm(French1$DateTimeGMT, tz="GMT") #convert date format.
attributes(French1$DateTime)$tzone <-'America/Anchorage'
French2$DateTime <- mdy_hm(French2$DateTimeGMT, tz="GMT") #convert date format.
attributes(French2$DateTime)$tzone <-'America/Anchorage'
Moose1$DateTime <- mdy_hm(Moose1$DateTimeGMT, tz="GMT") #convert date format.
attributes(Moose1$DateTime)$tzone <-'America/Anchorage'
Moose2$DateTime <- mdy_hm(Moose2$DateTimeGMT, tz="GMT") #convert date format.
attributes(Moose2$DateTime)$tzone <-'America/Anchorage'
French2 <- French2[1:nrow(French1),] # French 2 has a few extra rows on it from when stopping logger. Stripping them.
French1$name <- "French1" #add column identifier
French2$name <- "French2"
allfrench <- bind_rows(French1, French2) # combine 1&2 into one dataframe French
Moose1$name <- "Moose1" #add column indentifier
Moose2$name <- "Moose2"
allmoose <- bind_rows(Moose1, Moose2) # combine 1&2 into one dataframe Moose
frenchmoose <- bind_rows(allfrench, allmoose) # combine all french and all moose
# check closeness between two HOBOs at each station
plot(x= French1$WaterLevelmeters[100:nrow(French1)], y=French2$WaterLevelmeters[100:nrow(French2)],
main = "French PT comparison", xlab = "French1 PT", ylab = "French2 PT")
# check closeness between two HOBOs at each station
plot(x = French1$DateTime, y = French1$WaterLevelmeters)
plot(x = French2$DateTime, y = French2$WaterLevelmeters)
# check closeness between two HOBOs at each station
plot(x = French1$DateTime, y = French1$WaterLevelmeters,
ylim(184:186))
# check closeness between two HOBOs at each station
plot(x = French1$DateTime, y = French1$WaterLevelmeters,
ylim(c(184,186)))
# check closeness between two HOBOs at each station
plot(x = French1$DateTime, y = French1$WaterLevelmeters,
ylim = (c(184,186)))
# check closeness between two HOBOs at each station
plot(x = French1$DateTime, y = French1$WaterLevelmeters,
ylim = (c(184,185.5)))
plot(x = French2$DateTime, y = French2$WaterLevelmeters)
plot(x= French1$WaterLevelmeters[100:nrow(French1)], y=French2$WaterLevelmeters[100:nrow(French2)],
main = "French PT comparison", xlab = "French1 PT", ylab = "French2 PT")
plot(x = Moose1$DateTime, y = Moose1$WaterLevelmeters)
plot(x = Moose2$DateTime, y = Moose2$WaterLevelmeters)
plot(x= Moose1$WaterLevelmeters[100:nrow(Moose1)-15], y=Moose2$WaterLevelmeters[100:nrow(Moose2)-15],
main = "Moose PT comparison", xlab = "Moose1 PT", ylab = "Moose2 PT")
moos.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTpuXf_81xoWO_N3uJY8qT_ZY-a9CfjFsl-UavJ8vXjBkfiR3cT9YcXo8xXncjN0Yph_6tHEY9iMJVM/pub?output=csv"
frch.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRVR3fDBQNFLI3kvdH2jgM_ktS2S4MuAnBnMct6LC3_Ph2xAwBWQP7XHkMvDDF1oiSkB58NrANhu601/pub?output=csv"
# Load Data#
moos.stream <- read.csv(url(moos.stream.url), skip = 24)
frch.stream <- read.csv(url(frch.stream.url), skip = 1)
moos.stream <- moos.stream[,-c(5:7)] # Remove Na columns
# Rename columns #
names(moos.stream) <- c("Date", "Time", "AbsolutePressure", "WaterLevel")
names(frch.stream) <- c("Date", "Time", "AbsolutePressure", "WaterLevel")
# Convert time and put in AK time #
moos.stream$Date <- mdy(moos.stream$Date)
moos.stream$DateTime <- as.POSIXct(paste(moos.stream$Date, moos.stream$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
frch.stream$Date <- mdy(frch.stream$Date)
frch.stream$DateTime <- as.POSIXct(paste(frch.stream$Date, frch.stream$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
plot(moos.stream$DateTime, moos.stream$AbsolutePressure)
plot(frch.stream$DateTime, frch.stream$AbsolutePressure)
frch.stream.2019.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vStPTLYv7j4tC3hGRHQ3rW8oCTx9_I0bekcLBjCl4jKQT8GLImI_hXp9qq6UsmdVAaPd7vr4r3BsLZJ/pub?output=csv"
frch.stream.2019.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQmHJ-1aQ_8UWAPq-v_us3gz-JTv7vsdVVKNnnMUloJwJNK7TTgvU8kLeUOCbIYU_mHz8v1k1CFz2Vl/pub?output=csv"
vaul.stream.2019.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSo7CfzMCKXdPmdVZ2c8tJQ-_NzKkje0QWYIseiLxH82hJeJZZ1wtiuL6ZleDoEaPPJMzuWdqB3NaAQ/pub?output=csv"
poke.stream.2019.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR5CEMDu-NFH49FcPmbf_QglRqVaEV-0xgcGJWz3kWuuGP8pwI-OhXtSZCwN4uwBlOq0CuuQ9tMYLXX/pub?output=csv"
poke.stream.2019.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTInrTbsXhYZ0Hcn0YZIBF7LWimNdO0V1e_06hKNaIriwxszvphODlUDfRnT_5_Xgi63k2WFW4q8EKm/pub?output=csv"
strt.stream.2019.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTgVqJmbVgtXVDGQL_SiQqHphyUBuXG-w0bCk8mLn-IksFrqg3PMvRveGizqHM9lhq_rhqozKseAD_7/pub?output=csv"
strt.stream.2019.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRNwL17hN8tMuyzDCDKCTeXGjQ1eN7j881D0-pyi46PhTK7LwoqQ_jrwZWQrSypd3icId9KFpqsuatj/pub?output=csv"
moos.stream.2019.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQMF0fbfNRwgU-9DfsCJ7LpPd_LoAL01gcSdHzNIFXJ5sSnXwH8Vvsqyj_nZAeWVcXGDWhyJP2TbjZq/pub?output=csv"
frch.stream.one.2019 <- read.csv(url(frch.stream.2019.url))
frch.stream.two.2019 <- read.csv(url(frch.stream.2019.url.two))
vaul.stream.one.2019 <- read.csv(url(vaul.stream.2019.url))
poke.stream.one.2019 <- read.csv(url(poke.stream.2019.url))
poke.stream.two.2019 <- read.csv(url(poke.stream.2019.url.two))
strt.stream.one.2019 <- read.csv(url(strt.stream.2019.url)) # only goes to august
strt.stream.two.2019 <- read.csv(url(strt.stream.2019.url.two)) # goes all the way to october.
moos.stream.one.2019 <- read.csv(url(moos.stream.2019.url))
# Rename column headers #
names(frch.stream.one.2019) <- c("Site", "DateTimeGMT", "Temp", "AbsPTDepth")
names(frch.stream.two.2019) <- c("Site", "DateTimeGMT", "Temp", "AbsPTDepth")
names(vaul.stream.one.2019) <- c("Site", "DateTimeGMT", "Temp", "AbsPTDepth")
names(poke.stream.one.2019) <- c("Site", "DateTimeGMT", "Temp", "AbsPTDepth")
names(poke.stream.two.2019) <- c("Site", "DateTimeGMT", "Temp", "AbsPTDepth")
names(strt.stream.one.2019) <- c("Site", "DateTimeGMT", "Temp", "AbsPTDepth")
names(strt.stream.two.2019) <- c("Site", "DateTimeGMT", "Temp", "AbsPTDepth")
names(moos.stream.one.2019) <- c("Site", "DateTimeGMT", "Temp", "AbsPTDepth")
# Input NA for missing time #
frch.stream.one.2019$DateTimeGMT[frch.stream.one.2019$DateTimeGMT == ""] <- NA
frch.stream.two.2019$DateTimeGMT[frch.stream.two.2019$DateTimeGMT == ""] <- NA
vaul.stream.one.2019$DateTimeGMT[vaul.stream.one.2019$DateTimeGMT == ""] <- NA
poke.stream.one.2019$DateTimeGMT[poke.stream.one.2019$DateTimeGMT == ""] <- NA
poke.stream.two.2019$DateTimeGMT[poke.stream.two.2019$DateTimeGMT == ""] <- NA
strt.stream.one.2019$DateTimeGMT[strt.stream.one.2019$DateTimeGMT == ""] <- NA
strt.stream.two.2019$DateTimeGMT[strt.stream.two.2019$DateTimeGMT == ""] <- NA
moos.stream.one.2019$DateTimeGMT[moos.stream.one.2019$DateTimeGMT == ""] <- NA
# Convert time and put in AK time #
frch.stream.one.2019$DateTime <- as.POSIXct(paste(frch.stream.one.2019$DateTimeGMT), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
frch.stream.one.2019$DateTime <- lubridate::round_date(frch.stream.one.2019$DateTime, "15 minutes")
frch.stream.two.2019$DateTime <- as.POSIXct(paste(frch.stream.two.2019$DateTimeGMT), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
vaul.stream.one.2019$DateTime <- as.POSIXct(paste(vaul.stream.one.2019$DateTimeGMT), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
poke.stream.one.2019$DateTime <- as.POSIXct(paste(poke.stream.one.2019$DateTimeGMT), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
poke.stream.one.2019$DateTime <- lubridate::round_date(poke.stream.one.2019$DateTime, "15 minutes")
poke.stream.two.2019$DateTime <- as.POSIXct(paste(poke.stream.two.2019$DateTimeGMT), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
strt.stream.one.2019$DateTime <- as.POSIXct(paste(strt.stream.one.2019$DateTimeGMT), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
strt.stream.two.2019$DateTime <- as.POSIXct(paste(strt.stream.two.2019$DateTimeGMT), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
moos.stream.one.2019$DateTime <- as.POSIXct(paste(moos.stream.one.2019$DateTimeGMT), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
plot(frch.stream.one.2019$DateTime, frch.stream.one.2019$AbsPTDepth)
plot(frch.stream.one.2019$DateTime, frch.stream.one.2019$AbsPTDepth, type = "l")
plot(frch.stream.two.2019$DateTime, frch.stream.two.2019$AbsPTDepth, type = "l")
frch.stream.one.2019 <- frch.stream.one.2019 %>% subset(frch.stream.one.2019$DateTime > "2019-04-29" & frch.stream.one.2019$DateTime < "2019-10-10") # removed on 10/10
frch.stream.two.2019 <- frch.stream.two.2019 %>% subset(frch.stream.two.2019$DateTime > "2019-04-29" & frch.stream.two.2019$DateTime < "2019-10-10") # removed on 10/10
# Checking closeness between two PT #
plot(x = frch.stream.one.2019$AbsPTDepth, y = frch.stream.two.2019$AbsPTDepth, main = "French PT comparison",
xlab = "French1 PT",
ylab = "French2 PT")
abline(1,1)
plot(frch.stream.one.2019$DateTime, frch.stream.one.2019$AbsPTDepth, type = "l")
plot(frch.stream.two.2019$DateTime, frch.stream.two.2019$AbsPTDepth, type = "l")
plot(moos.stream.one.2019$DateTime, moos.stream.one.2019$AbsPTDepth, type = "l")
plot(poke.stream.one.2019$DateTime, poke.stream.one.2019$AbsPTDepth, type = "l")
plot(poke.stream.two.2019$DateTime, poke.stream.two.2019$AbsPTDepth, type = "l")
poke.stream.one.2019 <- poke.stream.one.2019 %>% subset(poke.stream.one.2019$DateTime > "2019-05-10" & poke.stream.one.2019$DateTime < "2019-10-14") # removed on 10/18 but erroneous values starting after the 14th....maybe ice...maybe beaver dam?
poke.stream.two.2019 <- poke.stream.two.2019 %>% subset(poke.stream.two.2019$DateTime > "2019-05-14" & poke.stream.two.2019$DateTime < "2019-10-18") # removed on 10/18
plot(poke.stream.one.2019$DateTime, poke.stream.one.2019$AbsPTDepth, type = "l")
plot(frch.stream.two.2019$DateTime, frch.stream.two.2019$AbsPTDepth, type = "l")
plot(frch.stream.one.2019$DateTime, frch.stream.one.2019$AbsPTDepth, type = "l")
plot(frch.stream.two.2019$DateTime, frch.stream.two.2019$AbsPTDepth, type = "l")
plot(moos.stream.one.2019$DateTime, moos.stream.one.2019$AbsPTDepth, type = "l")
plot(poke.stream.one.2019$DateTime, poke.stream.one.2019$AbsPTDepth, type = "l")
plot(poke.stream.two.2019$DateTime, poke.stream.two.2019$AbsPTDepth, type = "l")
plot(strt.stream.one.2019$DateTime, strt.stream.one.2019$AbsPTDepth, type = "l")
plot(strt.stream.two.2019$DateTime, strt.stream.two.2019$AbsPTDepth, type = "l")
plot(vaul.stream.one.2019$DateTime, vaul.stream.one.2019$AbsPTDepth, type = "l")

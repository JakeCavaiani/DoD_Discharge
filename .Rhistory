### Import Data ###
strt.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vT05dgyg07MOSVdaEFFywTuktj7TTY0ukYjp5ZckRTP5BJ9dFaq5fT0MppdTchBJseTlLSzoyuLbWNS/pub?output=csv"
frch.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSXjY8hE7y3xpQs42ce8tTuqxadD-9GSLdlzmlzapcdxZoYwZ0M3GOjrQfKshj5Cw1XlPMICGK2v51L/pub?output=csv"
vaul.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTd-IH6XcwWpzDQav6eQO5NBzV2XB3XzCwJdxHarSiOniu57EoqegV8vU4eF8bo_8REcr8SxsXaDMpR/pub?output=csv"
strt.gauge <- read.csv(url(strt.url), skip = 1)
frch.gauge <- read.csv(url(frch.url), skip = 1)
vaul.gauge <- read.csv(url(vaul.url), skip = 1)
### Rename columns ###
names(strt.gauge) <- c("Site", "DateTimeGMT", "Precip")
names(frch.gauge) <- c("Site", "DateTimeGMT", "Precip")
names(vaul.gauge) <- c("Site", "DateTimeGMT", "Precip")
strt.gauge$Site <- "STRT"
frch.gauge$Site <- "FRCH"
vaul.gauge$Site <- "VAUL"
# Input NA for missing time #
strt.gauge$DateTimeGMT[strt.gauge$DateTimeGMT == ""] <- NA
frch.gauge$DateTimeGMT[frch.gauge$DateTimeGMT == ""] <- NA
vaul.gauge$DateTimeGMT[vaul.gauge$DateTimeGMT == ""] <- NA
# Convert time and put in AK time #
strt.gauge$DateTime <- mdy_hms(strt.gauge$DateTimeGMT, tz = "GMT")
attributes(strt.gauge$DateTime)$tzone <- 'America/Anchorage'
frch.gauge$DateTime <- mdy_hms(frch.gauge$DateTimeGMT, tz = "GMT")
attributes(frch.gauge$DateTime)$tzone <- 'America/Anchorage'
vaul.gauge$DateTime <- mdy_hms(vaul.gauge$DateTimeGMT, tz = "GMT")
attributes(vaul.gauge$DateTime)$tzone <- 'America/Anchorage'
# Plot data #
STRT <- ggplot(strt.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("Stuart Rain Gauge")
STRT
FRCH <- ggplot(frch.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("French Rain Gauge")
FRCH
VAUL <- ggplot(vaul.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("Vault Rain Gauge")
VAUL
## STRT ##
strt.gauge$inst_rainfall_mm = 0.2
## FRCH ##
frch.gauge$inst_rainfall_mm = 0.2
## VAUL ##
vaul.gauge$inst_rainfall_mm = 0.2
#### compile into per 15 min rainfall ###
## STRT ##
min<-cut(strt.gauge$DateTime, breaks="15 min")
STRT.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = strt.gauge, FUN=function(x)
sum=sum(x)))
STRT.st$datetimeAK<-as.POSIXct(STRT.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
## FRCH ##
min<-cut(frch.gauge$DateTime, breaks="15 min")
FRCH.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = frch.gauge, FUN=function(x)
sum=sum(x)))
FRCH.st$datetimeAK<-as.POSIXct(FRCH.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
## VAUL ##
min<-cut(vaul.gauge$DateTime, breaks="15 min")
VAUL.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data=vaul.gauge, FUN=function(x)
sum=sum(x)))
VAUL.st$datetimeAK<-as.POSIXct(VAUL.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
#### round time to nearest 15 min ####
STRT.st$datetimeAK = lubridate::round_date(STRT.st$datetimeAK, "15 minutes")
FRCH.st$datetimeAK = lubridate::round_date(FRCH.st$datetimeAK, "15 minutes")
VAUL.st$datetimeAK = lubridate::round_date(VAUL.st$datetimeAK, "15 minutes")
#### plot to check ####
par(mfrow=c(3,1))
plot(STRT.st$inst_rainfall_mm ~ STRT.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2020-07-25 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
plot(VAUL.st$inst_rainfall_mm ~ VAUL.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
allrain.2020 <- bind_rows(strt.gauge, frch.gauge, vaul.gauge)
allrain.2020$Precip <- allrain$Precip/10
ALL <- ggplot(allrain.2020) +
geom_line(aes(x = DateTime, y = Precip, color = Site)) +
xlab("Date") +
ylab("Cumulative Precipitation in cm") +
ggtitle("STRT FRCH VAUL Rain Gauge")
ALL
dir.create("RainGauge")
write.csv(allrain,"RainGauge/allrain_2020.csv", row.names = FALSE)
allrain.2020 <- bind_rows(strt.gauge, frch.gauge, vaul.gauge)
allrain.2020$Precip <- allrain$Precip/10
ALL <- ggplot(allrain.2020) +
geom_line(aes(x = DateTime, y = Precip, color = Site)) +
xlab("Date") +
ylab("Cumulative Precipitation in cm") +
ggtitle("STRT FRCH VAUL Rain Gauge")
allrain.2020$Precip <- allrain.2020$Precip/10
ALL <- ggplot(allrain.2020) +
geom_line(aes(x = DateTime, y = Precip, color = Site)) +
xlab("Date") +
ylab("Cumulative Precipitation in cm") +
ggtitle("STRT FRCH VAUL Rain Gauge")
ALL
plot(STRT.st$inst_rainfall_mm ~ STRT.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2020-07-25 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
plot(VAUL.st$inst_rainfall_mm ~ VAUL.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(plyr)
library(imputeTS)
library(TSA)
library(bbmle)
library(zoo)
library(xts)
library(forecast)
library(stats)
library(lattice)
library(nlme)
library(geosphere)
library(car)
library(EcoHydRology)
### Load from local machine ###
EXO_ALL <- read_csv("~/Documents/DoD_2020/EXO_data/from_internal_harddrive/processed/EXO.ALL.csv")
EXO_ALL$Site <- EXO_ALL$site.ID
EXO_ALL$DateTime <- as.POSIXct(EXO_ALL$DateTime)
ALL <- full_join(EXO_ALL, final_discharge_2020)
SUNA_ALL <- read_csv("~/Documents/DoD_2020/SUNA_data/from_internal_harddrive/processed/SUNA.processed.csv")
SUNA_ALL <- SUNA_ALL[, -(14:269)] # Remove channels
SUNA_ALL$Site <- SUNA_ALL$site.ID
SUNA_ALL$DateTime <- SUNA_ALL$datetimeAK
ALL <- full_join(ALL, SUNA_ALL)
FRCH <-  subset(ALL, Site == "FRCH")
head(FRCH$DateTime)
STRT = subset(ALL, Site == "STRT")
head(STRT$DateTime)
POKE = subset(ALL, Site == "POKE")
head(POKE$DateTime)
VAUL = subset(ALL, Site == "VAUL")
head(VAUL$DateTime)
MOOS = subset(ALL, Site == "MOOS")
head(MOOS$DateTime)
FRC
FRCH_Q = as.data.frame(Q.daily$FRCH)
FRCH_Q$day = as.Date(rownames(Q.daily))
names(FRCH_Q) = c("Discharge_Lsec", "day")
STRT_Q = as.data.frame(Q.daily$STRT)
STRT_Q$day = as.Date(rownames(Q.daily))
names(STRT_Q) = c("Discharge_Lsec", "day")
POKE_Q = as.data.frame(Q.daily$POKE)
POKE_Q$day = as.Date(rownames(Q.daily))
names(POKE_Q) = c("Discharge_Lsec", "day")
VAUL_Q = as.data.frame(Q.daily$VAUL)
VAUL_Q$day = as.Date(rownames(Q.daily))
names(VAUL_Q) = c("Discharge_Lsec", "day")
MOOS_Q = as.data.frame(Q.daily$MOOS)
MOOS_Q$day = as.Date(rownames(Q.daily))
names(MOOS_Q) = c("Discharge_Lsec", "day")
#### data wrangling - fill gaps ####
# fxn #
fillgaps15 = function(df, dat, datquotes, largegap.num){
## Document gaps >= largegap.num (1 largegap.num = 15 min) ##
# (note - the criteria of what constitutes a "large" gap should be reevaluated depending on the trend being characterized)
is.na.rle <- rle(is.na(dat))
is.na.rle$values <- is.na.rle$values & is.na.rle$lengths >= (largegap.num)
biggaps = df[inverse.rle(is.na.rle), ]
tz(biggaps$DateTime) = "America/Anchorage"
biggaps = subset(biggaps, select = "DateTime")
# Make univariate time series, covert to zoo, then to ts #
ts.xts = subset(df, select = c("DateTime",datquotes))
ts.xts<-read.zoo(ts.xts, index.column=1, format="%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
ts.xts<-as.xts(ts.xts)
# remove leading and trailing NAs #
ts.xts = na.trim(ts.xts, is.na="any")
# Apply auto.arima and kalman filter to impute missing values #
fit2 = auto.arima(ts.xts)
kal = KalmanSmooth(ts.xts, fit2$model)
id.na<-which(is.na(ts.xts))
for(i in id.na)
ts.xts[i]<-fit2$model$Z %*% kal$smooth[i,]
# revert to dataframe #
ts.df = as.data.frame((ts.xts))
ts.df$date_timeAK = as.POSIXct(row.names(ts.df), tz="America/Anchorage")
names(ts.df) = c("dat_filled", "DateTime")
# remove large gaps #
ts.df$dat_filled[ts.df$date_timeAK %in% as.POSIXct(biggaps$DateTime)] = NA
# Replace large gaps with linear interpolation #
ts.df$dat_filled = na.interpolation(ts.df$dat_filled)
ts.df = subset(ts.df, select = c("dat_filled", "DateTime"))
return(ts.df)
}
any(is.na(FRCH_Q$day))
any(is.na(FRCH_Q$Discharge_Lsec))
any(is.na(STRT_Q$day))
any(is.na(STRT_Q$Discharge_Lsec))
any(is.na(POKE_Q$day))
any(is.na(POKE_Q$Discharge_Lsec))
any(is.na(VAUL_Q$day))
any(is.na(VAUL_Q$Discharge_Lsec))
any(is.na(MOOS_Q$day))
any(is.na(MOOS_Q$Discharge_Lsec))
FRCH_Q <- na.omit(FRCH_Q) # Remove NaNs
any(is.na(FRCH_Q$Discharge_Lsec))
STRT_Q <- na.omit(STRT_Q) # Remove NaNs
any(is.na(STRT_Q$Discharge_Lsec))
POKE_Q <- na.omit(POKE_Q) # Remove NaNs
any(is.na(POKE_Q$Discharge_Lsec))
VAUL_Q <- na.omit(VAUL_Q) # Remove NaNs
any(is.na(VAUL_Q$Discharge_Lsec))
MOOS_Q <- na.omit(MOOS_Q) # Remove NaNs
any(is.na(MOOS_Q$Discharge_Lsec))
plot(C3$Discharge_Lsec ~ C3$date_timeAK, type="l", xlab="", ylab="Q (L/sec)",
# xlim = as.POSIXct(c("2017-05-22 00:00:00","2017-09-01 00:00:00"), tz="America/Anchorage"),
ylim = c(0,180), col="blue")
### examine the recursive digital filter at .9, .925, .95 levels ###
plot(FRCH$MeanDischarge ~ FRCH$DateTime, type = "l", xlab = "", ylab = "Q (L/sec)",
xlim =  as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0, 3000), col="blue")
#
plot(poke.final.discharge$MeanDischarge ~ poke.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(vaul.final.discharge$MeanDischarge ~ vaul.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(strt.final.discharge$MeanDischarge ~ strt.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(moos.final.discharge$MeanDischarge ~ moos.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
### Hydrograph Separation ###
install.packages("dpr")
library(dplyr)
#
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
#
strt.final.discharge <- strt.final.discharge[-c(10815:10817), ] # clean Nas.
STRT_Q_bf = BaseflowSeparation(strt.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(STRT_Q, select = c(day, Discharge_Lsec)), streamflow2=STRT_Q_bf$bt)
#
POKE_Q_bf = BaseflowSeparation(poke.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(POKE_Q, select = c(day, Discharge_Lsec)), streamflow2=POKE_Q_bf$bt)
#
VAUL_Q_bf = BaseflowSeparation(vaul.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(VAUL_Q, select = c(day, Discharge_Lsec)), streamflow2=VAUL_Q_bf$bt)
MOOS_Q_bf = BaseflowSeparation(moos.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(MOOS_Q, select = c(day, Discharge_Lsec)), streamflow2=MOOS_Q_bf$bt)
###.925 ###
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
#
STRT_Q_bf = BaseflowSeparation(strt.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(STRT_Q, select = c(day, Discharge_Lsec)), streamflow2=STRT_Q_bf$bt)
#
POKE_Q_bf = BaseflowSeparation(poke.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(POKE_Q, select = c(day, Discharge_Lsec)), streamflow2=POKE_Q_bf$bt)
#
VAUL_Q_bf = BaseflowSeparation(vaul.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(VAUL_Q, select = c(day, Discharge_Lsec)), streamflow2=VAUL_Q_bf$bt)
MOOS_Q_bf = BaseflowSeparation(moos.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(MOOS_Q, select = c(day, Discharge_Lsec)), streamflow2=MOOS_Q_bf$bt)
### .95 ###
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
#
STRT_Q_bf = BaseflowSeparation(strt.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(STRT_Q, select = c(day, Discharge_Lsec)), streamflow2=STRT_Q_bf$bt)
#
POKE_Q_bf = BaseflowSeparation(poke.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(POKE_Q, select = c(day, Discharge_Lsec)), streamflow2=POKE_Q_bf$bt)
#
VAUL_Q_bf = BaseflowSeparation(vaul.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(VAUL_Q, select = c(day, Discharge_Lsec)), streamflow2=VAUL_Q_bf$bt)
MOOS_Q_bf = BaseflowSeparation(moos.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(MOOS_Q, select = c(day, Discharge_Lsec)), streamflow2=MOOS_Q_bf$bt)
FRCH_bfQ_mn = mean(FRCH_Q_bf$bt)
FRCH_bfQ_mn
FRCH_bfQ_mn*2
STRT_bfQ_mn = mean(STRT_Q_bf$bt)
STRT_bfQ_mn
STRT_bfQ_mn*2
V
VAUL_bfQ_mn = mean(VAUL_Q_bf$bt)
VAUL_bfQ_mn
VAUL_bfQ_mn*2
POKE_bfQ_mn = mean(POKE_Q_bf$bt)
POKE_bfQ_mn
POKE_bfQ_mn*2
MOOS_bfQ_mn = mean(MOOS_Q_bf$bt)
MOOS_bfQ_mn
MOOS_bfQ_mn*2
plot(FRCH_Q$Discharge_Lsec ~ FRCH_Q$day, type="l", xlab="", ylab="Q (L/sec)",ylim = c(0,3000), col="blue", main="FRCH")
lines(FRCH_Q_bf$bt ~ FRCH_Q$day, col="red")
#lines((C3_Q_bf$bt*1.3) ~ C3_Q$day, col="red", lty=2)
#lines((C3_Q_bf$bt*5) ~ C3_Q$day, col="red", lty=2)
abline(h = FRCH_bfQ_mn*2, col="red", lty=2)
plot(FRCH$MeanDischarge ~ FRCH$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
abline(h=FRCH_bfQ_mn*2, col="red", lty=2)
abline(h=FRCH_bfQ_mn, col="red")
lines(FRCH$nitrateuM * 20 ~ FRCH.no3$datetimeAK, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 01:00:00"), tz="America/Anchorage"))
par(new = T)
# FRCH #
FRCH.no3 <- subset(FRCH, select = c("datetimeAK","nitrateuM"))
FRCH.no3 <-  fillgaps15(FRCH.no3, FRCH.no3$nitrateuM, "nitrateuM", 16)
names(FRCH.no3) = c("DateTime", "nitrate_uM_filled")
par(mfrow=c(1,1))
plot(FRCH_Q$Discharge_Lsec ~ FRCH_Q$day, type="l", xlab="", ylab="Q (L/sec)",ylim = c(0,3000), col="blue", main="FRCH")
lines(FRCH_Q_bf$bt ~ FRCH_Q$day, col="red")
plot(FRCH_Q$Discharge_Lsec ~ FRCH_Q$day, type="l", xlab="", ylab="Q (L/sec)",ylim = c(0,3000), col="blue", main="FRCH")
par(mfrow=c(1,1))
plot(FRCH_Q$Discharge_Lsec ~ FRCH_Q$day, type="l", xlab="", ylab="Q (L/sec)",ylim = c(0,3000), col="blue", main="FRCH")
lines(FRCH_Q_bf$bt ~ FRCH_Q$day, col="red")
#lines((C3_Q_bf$bt*1.3) ~ C3_Q$day, col="red", lty=2)
#lines((C3_Q_bf$bt*5) ~ C3_Q$day, col="red", lty=2)
abline(h = FRCH_bfQ_mn*2, col="red", lty=2)
plot(FRCH$MeanDischarge ~ FRCH$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
abline(h=FRCH_bfQ_mn*2, col="red", lty=2)
abline(h=FRCH_bfQ_mn, col="red")
lines(FRCH$nitrateuM * 20 ~ FRCH.no3$datetimeAK, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 01:00:00"), tz="America/Anchorage"))
lines(FRCH$nitrateuM * 20 ~ FRCH.no3$DateTime, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 01:00:00"), tz="America/Anchorage"))
par(new = T)
### Import precipitation data into the *ALL document ###
# FRCH rain gauge installed on the 11th of June.
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$datetimeAK, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(10,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'FRCH precip. (mm)')
lines(FRCH$nitrateuM ~ FRCH.no3$datetimeAK, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2019-06-01 00:00:00","2019-10-15 01:00:00"), tz="America/Anchorage"))
lines(FRCH$nitrateuM ~ FRCH.no3$DateTime, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2019-06-01 00:00:00","2019-10-15 01:00:00"), tz="America/Anchorage"))
par(new = T)
### Import precipitation data into the *ALL document ###
# FRCH rain gauge installed on the 11th of June.
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$datetimeAK, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(10,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'FRCH precip. (mm)')
lines(FRCH$nitrateuM ~ FRCH.no3$DateTime, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2020-06-05 00:00:00","2020-10-15 01:00:00"), tz="America/Anchorage"))
par(new = T)
head(FRCH.no3)
### Import precipitation data into the *ALL document ###
# FRCH rain gauge installed on the 11th of June.
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$datetimeAK, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(10,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'FRCH precip. (mm)')
lines(FRCH$nitrateuM ~ FRCH$DateTime, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2020-06-05 00:00:00","2020-10-15 01:00:00"), tz="America/Anchorage"))
par(new = T)
head(FRCH$nitrateuM)
View(FRCH)
### Import precipitation data into the *ALL document ###
# FRCH rain gauge installed on the 11th of June.
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$datetimeAK, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(40,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'FRCH precip. (mm)')
lines(FRCH$nitrateuM ~ FRCH$DateTime, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2020-06-05 00:00:00","2020-10-15 01:00:00"), tz="America/Anchorage"))
par(new = T)
plot(FRCH$MeanDischarge ~ FRCH$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
abline(h=FRCH_bfQ_mn*2, col="red", lty=2)
abline(h=FRCH_bfQ_mn, col="red")
lines(FRCH$nitrateuM * 20 ~ FRCH.no3$DateTime, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 01:00:00"), tz="America/Anchorage"))
par(new = T)
plot(frch.gauge$Precip ~ frch.gauge$DateTime, type="h",
xlim = as.POSIXct(c("2020-06-11 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(400,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'FRCH precip. (mm)')
plot(FRCH$MeanDischarge ~ FRCH$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
abline(h=FRCH_bfQ_mn*2, col="red", lty=2)
abline(h=FRCH_bfQ_mn, col="red")
lines(FRCH$nitrateuM * 20 ~ FRCH.no3$DateTime, type="l", xlab="", ylab="", col="purple",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 01:00:00"), tz="America/Anchorage"))
par(new = T)
### Import precipitation data into the *ALL document ###
# FRCH rain gauge installed on the 11th of June.
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$datetimeAK, type="h",
xlim = as.POSIXct(c("2020-06-05 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(40,0),
axes=F, xlab="", ylab="")
axis(side = 4)
mtext(side = 4, line = 3, 'FRCH precip. (mm)')
str(poke.stream.one)
### POKE ###
poke.stream.one <- poke.stream.one %>% subset(poke.stream.one$DateTime < "2020-10-10") # Cleaning data that is before October 10th due to ice (Site was taken down Oct 14th)
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(here)
dir.create(here("PT_data"))
dir.create(here("PT_data", "clean"))
setwd(here("PT_data", "clean"))
getwd()
moos.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSqPvEKpJI6Kq5O6_oRRj0t9IDXvUwGeHD3t_mYiQvGRL_ZFsCU_4Hw1FMBadCipWjzk-Tg2D2xBK9b/pub?output=csv"
moos.stream.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRLiymnxf0Kh0V9RC-aYvoOuVR1mdUR4h4Eyd2QM8eE-C0WnSGiHU30G7hNmBrla7q78ApCi8TIQX4y/pub?output=csv"
frch.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTEniUzPMlYhqf_XyFnCG5j97f9uZxBCafA8qs4L6KybqvF0eve9Ic4-IkvkeEoYDzAstr40ftBBSnc/pub?output=csv"
frch.stream.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSBuhkfYzLPVefrA5bLqybCkJmQtT1zLo5OFavWhjVCYX82QqhYo712IWgxKlpDbk3zMBkJ-QiN_RpZ/pub?output=csv"
strt.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTv0x_cYRqBh5Aw1shmc630pIXbjVbV8Vet_gZun7AhngwvQWVLkGL7t8gbBuaMnP4tcUQsSN_Zl_f5/pub?output=csv"
strt.stream.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQfQQybzS-N-iEQBLalffAhOzLvWOZYTjo84q9rGx_5q1oxm9Kv3WjFePB15m0hSQQLc5DYrPXlwEcS/pub?output=csv"
vaul.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRVA4AxNNaYJY6hJCD7c7Y4jloR68x1Zols2Grg7xiKx-gVQlqh5yb3e3L5XkFUXyRn0GnD1nRi_XXJ/pub?output=csv"
poke.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTVII1zFxhCY1VCg6D_NH9dZkE0lsv15W3_hDnvuj0lvnOV3yOhqwiGjs0lSR-ELXnfjc_bLb8mC6M6/pub?output=csv"
poke.stream.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTx06zsh-FYmaIix2GBP-GW7E-EYH78bINSLusSbSpD_FP6P7H28JD0M8p8KKXxCFGeiXKEHKitEZW_/pub?output=csv"
moos.stream.one <- read.csv(url(moos.stream.url), skip = 491)
moos.stream.two <- read.csv(url(moos.stream.url.two), skip = 1)
frch.stream.one <- read.csv(url(frch.stream.url), skip = 1)
frch.stream.two <- read.csv(url(frch.stream.url.two), skip = 4)
strt.stream.one <- read.csv(url(strt.stream.url), skip = 1)
strt.stream.two <- read.csv(url(strt.stream.url.two), skip = 1)
vaul.stream <- read.csv(url(vaul.stream.url), skip = 1)
poke.stream.one <- read.csv(url(poke.stream.url), skip = 1)
poke.stream.two <- read.csv(url(poke.stream.url.two), skip = 1)
# Rename columns #
names(moos.stream.one) <- c("Site", "DateTimeGMT", "AbsolutePressure", "WaterLevel")
names(moos.stream.two) <- c("Site", "DateTimeGMT", "AbsolutePressure", "WaterLevel")
names(frch.stream.one) <- c("Site", "DateTimeGMT", "Absolute Pressure", "WaterLevel")
names(frch.stream.two) <- c("Site", "DateTimeGMT", "Absolute Pressure", "WaterLevel")
names(strt.stream.one) <- c("Site", "DateTimeGMT", "Absolute Pressure", "WaterLevel")
names(strt.stream.two) <- c("Site", "DateTimeGMT", "Absolute Pressure", "WaterLevel")
names(vaul.stream) <- c("Site", "DateTimeGMT", "Absolute Pressure", "WaterLevel")
names(poke.stream.one) <- c("Site", "DateTimeGMT", "AbsolutePressure", "WaterLevel")
names(poke.stream.two) <- c("Site", "DateTimeGMT", "AbsolutePressure", "WaterLevel")
# Input NA for missing time #
moos.stream.one$DateTimeGMT[moos.stream.one$DateTimeGMT == ""] <- NA
moos.stream.two$DateTimeGMT[moos.stream.one$DateTimeGMT == ""] <- NA
frch.stream.one$DateTimeGMT[frch.stream.one$DateTimeGMT == ""] <- NA
frch.stream.two$DateTimeGMT[frch.stream.two$DateTimeGMT == ""] <- NA
strt.stream.one$DateTimeGMT[strt.stream.one$DateTimeGMT == ""] <- NA
strt.stream.two$DateTimeGMT[strt.stream.one$DateTimeGMT == ""] <- NA
vaul.stream$DateTimeGMT[vaul.stream$DateTimeGMT == ""] <- NA
poke.stream.one$DateTimeGMT[poke.stream.one$DateTimeGMT == ""] <- NA
poke.stream.two$DateTimeGMT[poke.stream.one$DateTimeGMT == ""] <- NA
# Convert time and put in AK time #
moos.stream.one$DateTime <- mdy_hms(moos.stream.one$DateTimeGMT, tz = "GMT")
attributes(moos.stream.one$DateTime)$tzone <- 'America/Anchorage'
moos.stream.two$DateTime <- mdy_hms(moos.stream.two$DateTimeGMT, tz = "GMT")
attributes(moos.stream.two$DateTime)$tzone <- 'America/Anchorage'
frch.stream.one$DateTime <- mdy_hms(frch.stream.one$DateTimeGMT, tz = "GMT")
attributes(frch.stream.one$DateTime)$tzone <- 'America/Anchorage'
frch.stream.two$DateTime <- mdy_hms(frch.stream.two$DateTimeGMT, tz = "GMT")
attributes(frch.stream.two$DateTime)$tzone <- 'America/Anchorage'
strt.stream.one$DateTime <- mdy_hms(strt.stream.one$DateTimeGMT, tz = "GMT")
attributes(strt.stream.one$DateTime)$tzone <- 'America/Anchorage'
strt.stream.two$DateTime <- mdy_hms(strt.stream.two$DateTimeGMT, tz = "GMT")
attributes(strt.stream.two$DateTime)$tzone <- 'America/Anchorage'
vaul.stream$DateTime <- mdy_hms(vaul.stream$DateTimeGMT, tz = "GMT")
attributes(vaul.stream$DateTime)$tzone <- 'America/Anchorage'
poke.stream.one$DateTime <- mdy_hms(poke.stream.one$DateTimeGMT, tz = "GMT")
attributes(poke.stream.one$DateTime)$tzone <- 'America/Anchorage'
poke.stream.two$DateTime <- mdy_hms(poke.stream.two$DateTimeGMT, tz = "GMT")
attributes(poke.stream.two$DateTime)$tzone <- 'America/Anchorage'
### Filtering out data ###
### MOOS ###
moos.stream.one <- moos.stream.one %>% filter(moos.stream.one$WaterLevel > 165.5) %>% subset(moos.stream.one$DateTime < "2020-10-14") # cleaning data that is below 165.5 because those are errant and then before 10/14 because thats when we took the PTs out
plot(x = moos.stream.one$DateTime, y = moos.stream.one$WaterLevel) # Plot check
moos.stream.two <- moos.stream.two %>% subset(moos.stream.two$DateTime < "2020-10-14")
plot(x = moos.stream.two$DateTime, y = moos.stream.two$WaterLevel) #plot check
class(moos.stream.one)
str(moos.stream.one)
### FRCH ###
frch.stream.one <- frch.stream.one %>% filter(frch.stream.one$WaterLevel > 184) %>%  subset(frch.stream.one$DateTime < "2020-10-14") #cleaning data that is before the 14th (Site was taken down the 15th)
frch.stream.one$DateTime[frch.stream.one$DateTime == "2020-06-28 21:15"] <- NA
frch.stream.one$DateTime[frch.stream.one$DateTime == "2020-06-29 14:45"] <- NA
frch.stream.two <- frch.stream.two %>%  subset(frch.stream.two$DateTime < "2020-10-14") #cleaning data that is before the 14th (Site was taken down the 15th)
# Final Discharge #
frch.final.discharge <- data.frame(French1comb$Site, French1comb$DateTime, French1comb$pred.french1.Q, French2comb$pred.french2.Q)
frch.final.discharge$MeanDischarge <- rowMeans(frch.final.discharge[,c ('French1comb.pred.french1.Q', 'French2comb.pred.french2.Q')], na.rm = TRUE)

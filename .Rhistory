eielson.atmo.2022.compare$AirPressureCorrectedFRCH <- eielson.atmo.2022.compare$mmHGcorrectedFRCH * 0.133322 # converting this to kPA
eielson.atmo.2022.compare$mmHGcorrectedVAUL <- eielson.atmo.2022.compare$mmHG - (2.5*688.8/100)
eielson.atmo.2022.compare$AirPressureCorrectedVAUL <- eielson.atmo.2022.compare$mmHGcorrectedVAUL * 0.133322 # converting this to kPA
moos.atmo.2022.compare <- moos.atmo.2022
atmo.pt.2022.1 <- left_join(eielson.atmo.2022.compare, moos.atmo.2022.compare, by = "DateTimeAK")
View(atmo.pt.2022.1)
plot(x = atmo.pt.2022.1$AirPressureCorrectedMOOS, y = atmo.pt.2022.1$AirPressure.y, main = "Atmo PT comparison",
xlab = "Eielson",
ylab = "MOOS")
ggplot(aes(x = DateTimeAK, y = AirPressureCorrectedMOOS), data = atmo.pt.2022.1) +
geom_line(aes(x=DateTimeAK, y=AirPressureCorrectedMOOS), data = atmo.pt.2022.1, color="#A6CEE3") +
geom_line(aes(x=DateTimeAK, y=AirPressure.x), data = atmo.pt.2022.1, color="#FF7F00") +
geom_line(aes(x=DateTimeAK, y=AirPressure.y), data = atmo.pt.2022.1, color = "red") +
theme_classic() +
ggtitle("Eielson Corrected(light) & Eielson uncorrected(orange) & MOOS(red) Atmo P")
ggplot(aes(x = DateTimeAK, y = AirPressureCorrectedMOOS), data = atmo.pt.2022.1) +
geom_line(aes(x=DateTimeAK, y=AirPressureCorrectedMOOS), data = atmo.pt.2022.1, color="#A6CEE3") +
geom_line(aes(x=DateTimeAK, y=AirPressure.x), data = atmo.pt.2022.1, color="#FF7F00") +
geom_line(aes(x=DateTimeAK, y=AirPressure.y), data = atmo.pt.2022.1, color = "red") +
theme_classic() +
ggtitle("Eielson Corrected(blue) & Eielson uncorrected(orange) & MOOS(red) Atmo P")
ggplot(moos.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure)) +
geom_point() +
theme_classic()
moos.stream.one.2022 <- moos.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-25", NA, .)))
moos.stream.one.2022 <- moos.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & WaterPressure < 103, NA, .)))
# shfiting the step change
moos.1.before <- moos.stream.one.2022[c(1:8404), ] # 6/7 @ 14:15 we cleaned the PVC housing so we are shifting the previous data up to match after the cleaning
moos.1.after <- moos.stream.one.2022[c(8405:21686), ]
moos.stream.one.2022[8413, 2] - moos.stream.one.2022[8404, 2] # 6.423
moos.1.before$WaterPressure <- moos.1.before[, 2] + 6.423
moos.stream.one.2022 <- full_join(moos.1.before, moos.1.after)
moos.stream.one.2022 <- moos.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-06-07" & DateTimeAK <= "2022-06-08" & WaterPressure > 111.9, NA, .)))
ggplot(moos.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure)) +
geom_point() +
theme_classic()
ggplot(moos.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure)) +
geom_point() +
theme_classic()
# adjusting/cleaning moos.stream.two
ggplot(moos.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure)) +
geom_point() +
theme_classic()
moos.stream.two.2022 <- moos.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-25", NA, .))) # PT wasnt placed into the stream until 5/25
moos.stream.two.2022 <- moos.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-06-01" & DateTimeAK <= "2022-07-01" & WaterPressure < 101, NA, .)))
# shfiting the step change
moos.2.before <- moos.stream.two.2022[c(1:8402), ] # 6/7 @ 14:05 we cleaned the PVC housing so we are shifting the previous data up to match after the cleaning
moos.2.after <- moos.stream.two.2022[c(8403:30023), ]
moos.stream.two.2022[8408, 2] - moos.stream.two.2022[8402, 2] # 3.573
moos.2.before$WaterPressure <- moos.2.before[, 2] + 3.573
moos.stream.two.2022 <- full_join(moos.2.before, moos.2.after)
ggplot(moos.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure)) +
geom_point() +
theme_classic()
moos.final.pressure.2022 <- full_join(moos.stream.one.2022, moos.stream.two.2022, by = c("DateTimeAK"))
moos.final.pressure.2022$MeanPressure <- rowMeans(moos.final.pressure.2022[,c(2,6)], na.rm = TRUE)
moos.final.pressure.2022 <- moos.final.pressure.2022[,-c(3,5,7)] # removing columns that are unnecessary. I only need both water pressures and mean pressure with a DateTime column
# eielson.atmo.2022 <- eielson.atmo.2022[,-c(1,3,4)] # i dont need site, Temp and sea_level_pressure column
View(eielson.atmo.2022.compare)
eielson.atmo.2022.compare <-  eielson.atmo.2022.compare[ , -which(names(eielson.atmo.2022.compare) %in% c("Site","TempC", "sea_level_pressure", "AirPressure", "mmHG", "mmHGcorrectedMOOS","mmHGcorrectedPOKE","mmHGcorrectedSTRT","mmHGcorrectedFRCH","mmHGcorrectedVAUL"))] # removing columns I do not need
#join the two atmospheric and water pressure together
MOOS.2022 <- left_join(eielson.atmo.2022.compare, moos.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
MOOS.2022$difference <- MOOS.2022$MeanPressure - MOOS.2022$AirPressureCorrectedMOOS
names(MOOS.2022)[names(MOOS.2022) == 'Site.x'] <- 'Site'
MOOS.2022$Site <- "MOOS"
moos.stream.two.2022 <- moos.stream.two.2022[1:nrow(moos.stream.one.2022),]
moos.stream.one.2022$Site <- "MOOS1" #add column identifier
moos.stream.two.2022$Site <- "MOOS2"
moos.pt.2022 <- bind_rows(moos.stream.one.2022, moos.stream.two.2022)
plot(x = moos.stream.one.2022$WaterPressure, y = moos.stream.two.2022$WaterPressure, main = "Moose PT comparison",
xlab = "Moose1PT",
ylab = "Moose2PT")
### Filter MOOS ###
QSummary.MO.2022 <- QSummary.2022 %>% filter(Site =="MOOS")
ggplot(QSummary.MO.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_brewer(palette = "Set1") +
ggtitle("MOOS")
ggplot(QSummary.MO.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(vaules = c("#A6761D"))
### Filter MOOS ###
QSummary.MO.2022 <- QSummary.2022 %>% filter(Site =="MOOS")
ggplot(QSummary.MO.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#A6761D")) +
ggtitle("MOOS")
# trying to merge by nearest date if we have an offset point
MOOS.2022.dt <- setDT(MOOS.2022)
View(MOOS.2022.dt)
MOOS.2022.dt <- subset(MOOS.2022.dt, DateTimeAK < "2022-08-31 06:00:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.MO.2022.dt <- QSummary.MO.2022
Moose1comb.2022 <- MOOS.2022.dt[QSummary.MO.2022.dt, on = "DateTimeAK", roll = 'nearest']
MOOS1.lm.2022 <- lm(Moose1comb.2022$MeasuredQ_Ls ~ Moose1comb.2022$difference)
View(MOOS1.lm.2022)
View(Moose1comb.2022)
# plot rating curve
moos.formula = y~x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Moose1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = moos.formula) +
stat_poly_eq(formula = moos.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
#xlim(216, 216.4) +
#ylim(0,1500) +
theme_light() +
ggtitle("Moose all measured Q")
poke.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR8p1pdbkQBMo54XaZinGwxyzojCnlkXeZid3EFvmt9v31PFvpsa1DlWClj8aG0kkJIuU57WXl-cq7Q/pub?output=csv"
poke.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR-wJjf3rO8eC7bMpQZgwqFLHFQpf5qCInyWtUF1PqaCB8Z_EoM1cTHRUmWypjftREIx1rP0V6zYJxL/pub?output=csv"
# load in url
poke.stream.one.2022 <- read.csv(url(poke.stream.one.2022.url), skip = 1)
poke.stream.two.2022 <- read.csv(url(poke.stream.two.2022.url), skip = 1)
# cleaning df to be able to interpret and merge
poke.stream.one.2022 <- poke.stream.one.2022[, -c(5:18)] # removing columns that arent date/abs pressure and temp
poke.stream.two.2022 <- poke.stream.two.2022[, -c(5:9)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
poke.stream.one.2022$DateTimeAK <- mdy_hms(poke.stream.one.2022$Date.Time..GMT.08.00)
poke.stream.two.2022$DateTimeAK <- mdy_hms(poke.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
poke.stream.one.2022$DateTimeAK <- lubridate::round_date(poke.stream.one.2022$DateTimeAK, "5 minutes")
poke.stream.two.2022$DateTimeAK <- lubridate::round_date(poke.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
poke.stream.one.2022 <- poke.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
poke.stream.two.2022 <- poke.stream.two.2022[, -c(2)] # removing columns that arent
names(poke.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(poke.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-18", NA, .))) # PT wasnt placed into the stream until 5/17
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-27" & DateTimeAK <= "2022-08-31" & WaterPressure < 98.3, NA, .)))
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# plot(poke.stream.one.2022$DateTime, poke.stream.one.2022$WaterPressure,
#      xlim = as.POSIXct(c("2022-08-27 00:00:00", "2022-08-31 00:00:00")),
#      ylim = c(97, 99))
ggplot(poke.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# merge to one
poke.final.pressure.2022 <- left_join(poke.stream.one.2022, poke.stream.two.2022, by = c("DateTimeAK"))
poke.final.pressure.2022$MeanPressure <- rowMeans(poke.final.pressure.2022[,c(2,6)], na.rm = TRUE)
# Checking closeness between two PTs
poke.pt.2022 <- right_join(poke.stream.one.2022, poke.stream.two.2022, by = "DateTimeAK")
plot(x = poke.pt.2022$WaterPressure.x, y = poke.pt.2022$WaterPressure.y, main = "Poker PT comparison",
xlab = "Poker1PT",
ylab = "Poker2PT")
POKE.2022 <- left_join(eielson.atmo.2022.compare, poke.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
POKE.2022$difference <- POKE.2022$MeanPressure - POKE.2022$AirPressureCorrectedPOKE
POKE.2022 <-  POKE.2022[ , -which(names(POKE.2022) %in% c("WaterPressure.x","TempC.x", "Site.y", "WaterPressure.y", "TempC.y"))] # removing columns I do not need
names(POKE.2022)[names(POKE.2022) == 'Site.x'] <- 'Site'
POKE.2022$Site <- "POKE"
### Filter POKE ###
QSummary.PO.2022 <- QSummary.2022 %>% filter(Site =="POKE")
ggplot(QSummary.PO.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#6A3D9A")) +
ggtitle("POKE")
POKE.2022.dt <- setDT(POKE.2022)
POKE.2022.dt <- subset(POKE.2022.dt, DateTimeAK < "2022-08-29 07:45:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.PO.2022.dt <- QSummary.PO.2022
Poker1comb.2022 <- POKE.2022.dt[QSummary.PO.2022.dt, on = "DateTimeAK", roll = 'nearest']
POKE1.lm.2022 <- lm(Poker1comb.2022$MeasuredQ_Ls ~ Poker1comb.2022$difference)
### Rating Curve ###
poke.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Poker1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = poke.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
# xlim(-2, 2) +
#ylim(0,1500) +
theme_light() +
ggtitle("Poker all measured Q")
View(Poker1comb.2022)
Poker1comb.2022[15,9] <- 0.2580529
POKE1.lm.2022 <- lm(Poker1comb.2022$MeasuredQ_Ls ~ Poker1comb.2022$difference)
### Rating Curve ###
poke.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Poker1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = poke.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
# xlim(-2, 2) +
#ylim(0,1500) +
theme_light() +
ggtitle("Poker all measured Q")
strt.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS4XSmuumKD-j1aDhpA1gfyfrpqUiJUTuvcP9UGrgagvIrzlGYWk71hl0zAC8g8GHqOm1ONjWOpO_So/pub?output=csv" # WL
strt.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRhNn42-Jr1Y3aTFfMPiRxKrNZZjHeBBxkCmVcLVPQEKBf4qg_1Pw4nyUBr3mDwtEE8NKGIbS7kNSrS/pub?output=csv" #WR
# load in data
strt.stream.one.2022 <- read.csv(url(strt.stream.one.2022.url), skip = 1)
strt.stream.two.2022 <- read.csv(url(strt.stream.two.2022.url), skip = 1)
# clean for merging purposes
strt.stream.one.2022 <- strt.stream.one.2022[, -c(4,6:19)] # removing columns that arent date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(5:12)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
strt.stream.one.2022$DateTimeAK <- mdy_hms(strt.stream.one.2022$Date.Time..GMT.08.00)
strt.stream.two.2022$DateTimeAK <- mdy_hms(strt.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
strt.stream.one.2022$DateTimeAK <- lubridate::round_date(strt.stream.one.2022$DateTimeAK, "5 minutes")
strt.stream.two.2022$DateTimeAK <- lubridate::round_date(strt.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
strt.stream.one.2022 <- strt.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(2)] # removing columns that arent
names(strt.stream.one.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
names(strt.stream.two.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
ggplot(strt.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
ggplot(strt.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-06-03", NA, .))) # PT wasnt placed into the stream until 6/3
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-10-03" &
WaterPressure < 100, NA, .))) # PT wasnt placed into the stream until 6/3
ggplot(strt.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# merge to one
strt.final.pressure.2022 <- strt.stream.two.2022 # the first PT is crap
strt.stream.two.2022 <- strt.stream.two.2022[1:nrow(strt.stream.one.2022),]
strt.stream.one.2022$Site <- "STRT1" #add column identifier
strt.stream.two.2022$Site <- "STRT2"
strt.pt.2022 <- bind_rows(strt.stream.one.2022, strt.stream.two.2022)
plot(x = strt.stream.one.2022$WaterPressure, y = strt.stream.two.2022$WaterPressure, main = "Stuart PT comparison",
xlab = "Stuart1PT",
ylab = "Stuart2PT")
abline(1,1)
# join the two atmospheric and water pressure together
STRT.2022 <- left_join(eielson.atmo.2022.compare, strt.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
STRT.2022$difference <- STRT.2022$WaterPressure - STRT.2022$AirPressureCorrectedSTRT
STRT.2022 <-  STRT.2022[ , -which(names(STRT.2022) %in% c("TempC"))] # removing columns I do not need
STRT.2022$Site <- "STRT"
### Filter STRT ###
QSummary.ST.2022 <- QSummary.2022 %>% filter(Site =="STRT")
ggplot(QSummary.ST.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#66C2A5")) +
ggtitle("STRT")
STRT.2022.dt <- setDT(STRT.2022)
STRT.2022.dt <- subset(STRT.2022.dt, DateTimeAK < "2022-09-02 05:00:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.ST.2022.dt <- QSummary.ST.2022
Stuart1comb.2022 <- STRT.2022.dt[QSummary.ST.2022.dt, on = "DateTimeAK", roll = 'nearest']
Stuart1comb.2022[c(1,2),5] <- 6.463909 # merging by nearest difference value manually
Stuart1comb.2022[c(10,11),5] <- 3.910157
Stuart1comb.2022[c(12,13),5] <- 3.714323
STRT1.lm.2022 <- lm(Stuart1comb.2022$MeasuredQ_Ls ~ Stuart1comb.2022$difference)
View(Stuart1comb.2022)
Stuart1comb.2022[c(1,2),9] <- 6.463909 # merging by nearest difference value manually
Stuart1comb.2022[c(10,11),9] <- 3.910157
Stuart1comb.2022[c(12,13),9] <- 3.714323
Stuart1comb.2022 <- STRT.2022.dt[QSummary.ST.2022.dt, on = "DateTimeAK", roll = 'nearest']
Stuart1comb.2022[c(1,2),9] <- 6.463909 # merging by nearest difference value manually
Stuart1comb.2022[c(10,11),9] <- 3.910157
Stuart1comb.2022[c(12,13),9] <- 3.714323
STRT1.lm.2022 <- lm(Stuart1comb.2022$MeasuredQ_Ls ~ Stuart1comb.2022$difference)
### Filter STRT ###
strt.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Stuart1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
#xlim(216, 216.4) +
#ylim(0,1500) +
theme_light() +
ggtitle("Stuart all measured Q")
frch.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRkT5GIhFY4nLblzPi4Upc8y6Pk2k4vXLSGAkFyMhLowsCmct0fZ5rxm-vd85RfFr7YLrCuuSiOqQbL/pub?output=csv"
frch.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRiDAbzBj_jHk1Hd3iM7fFvzMrRCSF9fbKTcmQD_dUFGOjoIQuBZBKV4KdNhfevLOq0Udch0LbWiKXw/pub?output=csv"
# load in url
frch.stream.one.2022 <- read.csv(url(frch.stream.one.2022.url), skip = 1)
frch.stream.two.2022 <- read.csv(url(frch.stream.two.2022.url), skip = 1)
# clean for merging purposes
frch.stream.one.2022 <- frch.stream.one.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(5:14)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
frch.stream.one.2022$DateTimeAK <- mdy_hms(frch.stream.one.2022$Date.Time..GMT.08.00)
frch.stream.two.2022$DateTimeAK <- mdy_hms(frch.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
frch.stream.one.2022$DateTimeAK <- lubridate::round_date(frch.stream.one.2022$DateTimeAK, "5 minutes")
frch.stream.two.2022$DateTimeAK <- lubridate::round_date(frch.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
frch.stream.one.2022 <- frch.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(2)] # removing columns that arent
names(frch.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(frch.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
# merge to one
frch.final.pressure.2022 <- left_join(frch.stream.one.2022, frch.stream.two.2022, by = c("DateTimeAK"))
frch.final.pressure.2022$MeanPressure <- rowMeans(frch.final.pressure.2022[,c(2,6)], na.rm = TRUE)
ggplot(frch.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-12", NA, .))) # PT wasnt placed into the stream until 5/12
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 102, NA, .))) # PT wasnt placed into the stream until 5/12
ggplot(frch.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
ggplot(frch.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.two.2022 <- frch.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 100, NA, .))) # PT wasnt placed into the stream until 5/12
ggplot(frch.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.two.2022 <- frch.stream.two.2022[1:nrow(frch.stream.one.2022),]
frch.stream.one.2022$Site <- "FRCH1" #add column identifier
frch.stream.two.2022$Site <- "FRCH2"
frch.pt.2022 <- bind_rows(frch.stream.one.2022, frch.stream.two.2022)
plot(x = frch.stream.one.2022$WaterPressure, y = frch.stream.two.2022$WaterPressure, main = "French PT comparison",
xlab = "French1PT",
ylab = "French2PT")
abline(1,1)
frch.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRkT5GIhFY4nLblzPi4Upc8y6Pk2k4vXLSGAkFyMhLowsCmct0fZ5rxm-vd85RfFr7YLrCuuSiOqQbL/pub?output=csv"
frch.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRiDAbzBj_jHk1Hd3iM7fFvzMrRCSF9fbKTcmQD_dUFGOjoIQuBZBKV4KdNhfevLOq0Udch0LbWiKXw/pub?output=csv"
frch.stream.one.2022 <- read.csv(url(frch.stream.one.2022.url), skip = 1)
frch.stream.two.2022 <- read.csv(url(frch.stream.two.2022.url), skip = 1)
# clean for merging purposes
frch.stream.one.2022 <- frch.stream.one.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(5:14)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
frch.stream.one.2022$DateTimeAK <- mdy_hms(frch.stream.one.2022$Date.Time..GMT.08.00)
frch.stream.two.2022$DateTimeAK <- mdy_hms(frch.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
frch.stream.one.2022$DateTimeAK <- lubridate::round_date(frch.stream.one.2022$DateTimeAK, "5 minutes")
frch.stream.two.2022$DateTimeAK <- lubridate::round_date(frch.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
frch.stream.one.2022 <- frch.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(2)] # removing columns that arent
names(frch.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(frch.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
# merge to one
frch.final.pressure.2022 <- left_join(frch.stream.one.2022, frch.stream.two.2022, by = c("DateTimeAK"))
frch.final.pressure.2022$MeanPressure <- rowMeans(frch.final.pressure.2022[,c(2,6)], na.rm = TRUE)
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-12", NA, .))) # PT wasnt placed into the stream until 5/12
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 102, NA, .))) # PT wasnt placed into the stream until 5/12
ggplot(frch.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.two.2022 <- frch.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 100, NA, .))) # PT wasnt placed into the stream until 5/12
ggplot(frch.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# Checking closeness between two PTs
atmo.pt.frch <- left_join(frch.stream.one.2022, frch.stream.two.2022, by = "DateTimeAK")
ggplot(aes(x = DateTimeAK, y = WaterPressure.x), data = atmo.pt.frch) +
geom_line(aes(x=DateTimeAK, y=WaterPressure.x), data = atmo.pt.2022.1, color="#A6CEE3") +
geom_line(aes(x=DateTimeAK, y=WaterPressure.t), data = atmo.pt.2022.1, color="#FF7F00") +
theme_classic() +
ggtitle("FRCH PT1(blue) & FRCH PT2(orange) Water Pressure")
ggplot(aes(x = DateTimeAK, y = WaterPressure.x), data = atmo.pt.frch) +
geom_line(aes(x=DateTimeAK, y=WaterPressure.x), data = atmo.pt.frch, color="#A6CEE3") +
geom_line(aes(x=DateTimeAK, y=WaterPressure.t), data = atmo.pt.frch, color="#FF7F00") +
theme_classic() +
ggtitle("FRCH PT1(blue) & FRCH PT2(orange) Water Pressure")
ggplot(aes(x = DateTimeAK, y = WaterPressure.x), data = atmo.pt.frch) +
geom_line(aes(x=DateTimeAK, y=WaterPressure.x), data = atmo.pt.frch, color="#A6CEE3") +
geom_line(aes(x=DateTimeAK, y=WaterPressure.y), data = atmo.pt.frch, color="#FF7F00") +
theme_classic() +
ggtitle("FRCH PT1(blue) & FRCH PT2(orange) Water Pressure")
# Checking closeness between two PTs
frch.stream.one.2022 <- frch.stream.one.2022[1:nrow(frch.stream.two.2022),]
frch.stream.one.2022 <- frch.stream.one.2022[1:nrow(frch.stream.two.2022),]
frch.stream.one.2022$Site <- "FRCH1" #add column identifier
frch.stream.two.2022$Site <- "FRCH2"
strt.pt.2022 <- bind_rows(frch.stream.one.2022, frch.stream.two.2022)
plot(x = frch.stream.one.2022$WaterPressure, y = frch.stream.two.2022$WaterPressure, main = "French PT comparison",
xlab = "French1PT",
ylab = "French2PT")
abline(1,1)
# join the two atmospheric and water pressure together
FRCH.2022 <- left_join(eielson.atmo.2022.compare, frch.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
FRCH.2022$difference <- FRCH.2022$MeanPressure - FRCH.2022$AirPressureCorrectedFRCH
FRCH.2022 <-  FRCH.2022[ , -which(names(FRCH.2022) %in% c("WaterPressure.x", "TempC.x", "Site.y", "WaterPressure.y", "TempC.y"))] # removing columns I do not need
names(FRCH.2022)[names(FRCH.2022) == 'Site.x'] <- 'Site'
FRCH.2022$Site <- "FRCH"
### Filter FRCH ###
QSummary.FR.2022 <- QSummary.2022 %>% filter(Site =="FRCH")
ggplot(QSummary.FR.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#FF7F00")) +
ggtitle("FRCH")
FRCH.2022.dt <- setDT(FRCH.2022)
FRCH.2022.dt <- subset(FRCH.2022.dt, DateTimeAK < "2022-08-31 03:00:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.FR.2022.dt <- QSummary.FR.2022
French1comb.2022 <- FRCH.2022.dt[QSummary.FR.2022.dt, on = "DateTimeAK", roll = 'nearest']
View(French1comb.2022)
FRCH1.lm.2022 <- lm(French1comb.2022$MeasuredQ_Ls ~ French1comb.2022$difference)
frch.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = French1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = frch.formula) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
#xlim(216, 216.4) +
#ylim(0,1500) +
theme_light() +
ggtitle("French1 all measured Q")
# vaul.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRkT5GIhFY4nLblzPi4Upc8y6Pk2k4vXLSGAkFyMhLowsCmct0fZ5rxm-vd85RfFr7YLrCuuSiOqQbL/pub?output=csv"
vaul.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSR7qqdF5BXklT1ocG9bLLUwJ07ha8qmzAVRPaUjm7mUq12VptmViI9NJcW1-jO4cu0KtHBLl90A4DZ/pub?output=csv"
# load in url
#vaul.stream.one.2022 <- read.csv(url(vaul.stream.one.2022.url), skip = 1)
vaul.stream.two.2022 <- read.csv(url(vaul.stream.two.2022.url), skip = 1)
# clean for merging purposes
#vaul.stream.one.2022 <- vaul.stream.one.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
vaul.stream.two.2022 <- vaul.stream.two.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
#vaul.stream.one.2022$DateTimeAK <- mdy_hms(vaul.stream.one.2022$Date.Time..GMT.08.00)
vaul.stream.two.2022$DateTimeAK <- mdy_hms(vaul.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
#vaul.stream.one.2022$DateTimeAK <- lubridate::round_date(vaul.stream.one.2022$DateTimeAK, "5 minutes")
vaul.stream.two.2022$DateTimeAK <- lubridate::round_date(vaul.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
#vaul.stream.one.2022 <- vaul.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
vaul.stream.two.2022 <- vaul.stream.two.2022[, -c(2)] # removing columns that arent
#names(vaul.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(vaul.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
# # merge to one
# frch.final.pressure.2022 <- left_join(vaul.stream.one.2022, vaul.stream.two.2022, by = c("DateTimeAK"))
# frch.final.pressure.2022$MeanPressure <- rowMeans(frch.final.pressure.2022[,c(2,6)], na.rm = TRUE)
ggplot(vaul.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-26", NA, .))) # PT wasnt placed into the stream until 5/26
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-15" & DateTimeAK <= "2022-08-31" &
WaterPressure < 98, NA, .))) # PT wasnt placed into the stream until 5/12
ggplot(vaul.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# join the two atmospheric and water pressure together
vaul.final.pressure.2022 <- vaul.stream.two.2022
VAUL.2022 <- left_join(eielson.atmo.2022.compare, vaul.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
VAUL.2022$difference <- VAUL.2022$WaterPressure - VAUL.2022$AirPressureCorrectedVAUL
VAUL.2022 <-  VAUL.2022[ , -which(names(VAUL.2022) %in% c("TempC"))] # removing columns I do not need
VAUL.2022$Site <- "VAUL"
QSummary.VA.2022 <- QSummary.2022 %>% filter(Site =="VAUL")
ggplot(QSummary.VA.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#E7298A")) +
ggtitle("VAUL")
VAUL.2022.dt <- setDT(VAUL.2022)
VAUL.2022.dt <- subset(VAUL.2022.dt, DateTimeAK < "2022-08-29 04:00:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.VA.2022.dt <- QSummary.VA.2022
Vault1comb.2022 <- VAUL.2022.dt[QSummary.VA.2022.dt, on = "DateTimeAK", roll = 'nearest']
VAUL1.lm.2022 <- lm(Vault1comb.2022$MeasuredQ_Ls ~ Vault1comb.2022$difference)
vaul.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Vault1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = vaul.formula) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
#xlim(216, 216.4) +
#ylim(0,1500) +
theme_light() +
ggtitle("Vault all measured Q")

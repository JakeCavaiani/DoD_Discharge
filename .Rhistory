scale_x_continuous(limits = c(184.2,184.9)) +
theme_classic() +
ggtitle("French1 all measured Q")
French1.lm <- lm(French1comb$MeasuredQ_Ls ~ French1comb$WaterLevelmeters)
# FRCH  PT 2 #
French2comb <- full_join(French2, Qsummary.FR) %>%
filter(WaterLevelmeters > 185)
ggplot(aes(x=WaterLevelmeters, y=MeasuredQ_Ls), data=French2comb) +
geom_point(aes(color = Method), size=3) +
geom_smooth(method = "lm", se=FALSE) +
scale_x_continuous(limits = c(185.4,186.3)) +
theme_classic() +
ggtitle("French2 all measured Q")
# Moose 1 & 2 comparison
ggplot(aes(x=DateTime, y=pred.moose1.Q), data=moose1comb) +
geom_line(aes(x=DateTime, y=pred.moose1.Q), data=moose1comb, color="#A6CEE3") +
geom_line(aes(x=DateTime, y=pred.moose2.Q), data=moose2comb,color="#1F78B4") +
geom_point(aes(x=DateTime, y=MeasuredQ_Ls), size=3) +
theme_classic() +
ggtitle("Moose1(light) & Moose2(dark) predicted all measured Q")
ggplot(aes(x=DateTime, y=pred.french1.Q), data=french1comb) +
geom_line(aes(x=DateTime, y=pred.french1.Q), data=french1comb, color="#A6CEE3") +
geom_line(aes(x=DateTime, y=pred.french2.Q), data=frenchcomb,color="#1F78B4") +
geom_point(aes(x=DateTime, y=MeasuredQ_Ls), size=3) +
theme_classic() +
ggtitle("French1(light) & French2(dark) predicted all measured Q")
ggplot(aes(x=DateTime, y=pred.french1.Q), data=French1comb) +
geom_line(aes(x=DateTime, y=pred.french1.Q), data=French1comb, color="#A6CEE3") +
geom_line(aes(x=DateTime, y=pred.french2.Q), data=French2comb,color="#1F78B4") +
geom_point(aes(x=DateTime, y=MeasuredQ_Ls), size=3) +
theme_classic() +
ggtitle("French1(light) & French2(dark) predicted all measured Q")
# FRCH PT 1 #
French1comb$pred.french1.Q <- coef(French1.lm)[2] * French1comb$WaterLevelmeters + coef(French1.lm)[1]
ggplot(aes(x=DateTime, y=pred.french1.Q), data=French1comb) +
geom_point(color="#A6CEE3") +
geom_point(aes(x=DateTime, y=MeasuredQ_Ls, shape=Method), size=3) +
theme_classic() +
ggtitle("French1 predicted all measured Q")
French1comb <- French1comb %>%
mutate(Q_Ls = pred.french1.Q)
# FRCH PT 2 #
French2comb$pred.french2.Q <- coef(French2.lm)[2] * French2comb$WaterLevelmeters + coef(French2.lm)[1]
ggplot(aes(x=DateTime, y=pred.french2.Q), data=French2comb) +
geom_point(color="#1F78B4") +
geom_point(aes(x=DateTime, y=MeasuredQ_Ls, shape=Method), size=3) +
theme_classic() +
ggtitle("French2 predicted all measured Q")
ggplot(aes(x=DateTime, y=pred.french1.Q), data=French1comb) +
geom_line(aes(x=DateTime, y=pred.french1.Q), data=French1comb, color="#A6CEE3") +
geom_line(aes(x=DateTime, y=pred.french2.Q), data=French2comb,color="#1F78B4") +
geom_point(aes(x=DateTime, y=MeasuredQ_Ls), size=3) +
theme_classic() +
ggtitle("French1(light) & French2(dark) predicted all measured Q")
# Moose 1 & 2 comparison
ggplot(aes(x=DateTime, y=pred.moose1.Q), data=moose1comb) +
geom_line(aes(x=DateTime, y=pred.moose1.Q), data=moose1comb, color="#A6CEE3") +
geom_line(aes(x=DateTime, y=pred.moose2.Q), data=moose2comb,color="#1F78B4") +
geom_point(aes(x=DateTime, y=MeasuredQ_Ls), size=3) +
theme_classic() +
ggtitle("Moose1(light) & Moose2(dark) predicted all measured Q")
### from CPCRW Caribou Peak Met Station ###
precip.cariboupeak = read_csv("CPCRW_Caribou_2018.csv",
skip = 4)
### Import Data ###
moos.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTo-I5WEvCr0fm_N90iwoza0v1zkeB-mIDi9c5852dUg61KAP80J4aovUszwy52dQ/pub?output=csv"
frch.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRoS1xHHGsQC-cVmHXPt6feyMmDL6vEnRfIZ0o9PfeigudTNmJgS_SyDY5VzPQx3A/pub?output=csv"
moos.gauge <- read.csv(url(moos.url), skip = 6)
frch.gauge <- read.csv(url(frch.url), skip = 6)
### Rename columns ###
names(moos.gauge) <- c("DateTimeGMT", "Precip")
names(frch.gauge) <- c("DateTimeGMT", "Precip")
moos.gauge$Site <- "Moose"
frch.gauge$Site <- "French"
# Input NA for missing time #
moos.gauge$DateTimeGMT[moos.gauge$DateTimeGMT == ""] <- NA
frch.gauge$DateTimeGMT[frch.gauge$DateTimeGMT == ""] <- NA
# Convert time and put in AK time #
moos.gauge$DateTime <- mdy_hm(moos.gauge$DateTimeGMT, tz = "GMT")
attributes(moos.gauge$DateTime)$tzone <- 'America/Anchorage'
frch.gauge$DateTime <- mdy_hm(frch.gauge$DateTimeGMT, tz = "GMT")
attributes(frch.gauge$DateTime)$tzone <- 'America/Anchorage'
# Plot data #
MOOS <- ggplot(moos.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("Moose Rain Gauge")
MOOS
FRCH <- ggplot(frch.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("French Rain Gauge")
FRCH
## MOOS ##
moos.gauge$inst_rainfall_mm = 0.2
## FRCH ##
frch.gauge$inst_rainfall_mm = 0.2
## STRT ##
min<-cut(moos.gauge$DateTime, breaks="15 min")
MOOS.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = moos.gauge, FUN=function(x)
sum=sum(x)))
MOOS.st$datetimeAK<-as.POSIXct(MOOS.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
## FRCH ##
min<-cut(frch.gauge$DateTime, breaks="15 min")
FRCH.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = frch.gauge, FUN=function(x)
sum=sum(x)))
FRCH.st$datetimeAK<-as.POSIXct(FRCH.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
#### round time to nearest 15 min ####
MOOS.st$datetimeAK = lubridate::round_date(MOOS.st$datetimeAK, "15 minutes")
FRCH.st$datetimeAK = lubridate::round_date(FRCH.st$datetimeAK, "15 minutes")
par(mfrow=c(3,1))
plot(MOOS.st$inst_rainfall_mm ~ MOOS.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2015-05-10 00:00:00"), as.POSIXct("2015-10-01 00:00:00")),
ylim=c(0,3))
plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$datetimeAK, type="h",
xlim=c(as.POSIXct("2015-05-10 00:00:00"), as.POSIXct("2015-10-01 00:00:00")),
ylim=c(0,13))
# all rain #
allrain.2015 <- bind_rows(moos.gauge, frch.gauge)
FRCH <- ggplot(frch.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("French Rain Gauge")
FRCH
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(RColorBrewer)
library(gridExtra)
library(here)
dir.create(here("RainGauge"))
### Import Data from our sites ###
strt.2020.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vT05dgyg07MOSVdaEFFywTuktj7TTY0ukYjp5ZckRTP5BJ9dFaq5fT0MppdTchBJseTlLSzoyuLbWNS/pub?output=csv"
frch.2020.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSXjY8hE7y3xpQs42ce8tTuqxadD-9GSLdlzmlzapcdxZoYwZ0M3GOjrQfKshj5Cw1XlPMICGK2v51L/pub?output=csv"
vaul.2020.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTd-IH6XcwWpzDQav6eQO5NBzV2XB3XzCwJdxHarSiOniu57EoqegV8vU4eF8bo_8REcr8SxsXaDMpR/pub?output=csv"
strt.2020.gauge <- read.csv(url(strt.2020.url), skip = 1)
frch.2020.gauge <- read.csv(url(frch.2020.url), skip = 1)
vaul.2020.gauge <- read.csv(url(vaul.2020.url), skip = 1)
names(strt.2020.gauge) <- c("Site", "DateTimeGMT", "Precip")
names(frch.2020.gauge) <- c("Site", "DateTimeGMT", "Precip")
names(vaul.2020.gauge) <- c("Site", "DateTimeGMT", "Precip")
strt.2020.gauge$Site <- "STRT" # adding a site column
frch.2020.gauge$Site <- "FRCH" # adding a site column
vaul.2020.gauge$Site <- "VAUL" # adding a site column
strt.2020.gauge$DateTimeGMT[strt.2020.gauge$DateTimeGMT == ""] <- NA
frch.2020.gauge$DateTimeGMT[frch.2020.gauge$DateTimeGMT == ""] <- NA
vaul.2020.gauge$DateTimeGMT[vaul.2020.gauge$DateTimeGMT == ""] <- NA
strt.2020.gauge$DateTime <- mdy_hms(strt.2020.gauge$DateTimeGMT, tz = "GMT")
attributes(strt.2020.gauge$DateTime)$tzone <- 'America/Anchorage'
frch.2020.gauge$DateTime <- mdy_hms(frch.2020.gauge$DateTimeGMT, tz = "GMT")
attributes(frch.2020.gauge$DateTime)$tzone <- 'America/Anchorage'
vaul.2020.gauge$DateTime <- mdy_hms(vaul.2020.gauge$DateTimeGMT, tz = "GMT")
attributes(vaul.2020.gauge$DateTime)$tzone <- 'America/Anchorage'
# Plot data #
STRT.2020.RAIN <- ggplot(strt.2020.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation (mm)") +
ggtitle("Stuart 2020 Rain Gauge")
STRT.2020.RAIN
## STRT ## turn into instantaneous precip
strt.2020.gauge$inst_rainfall_mm = 0.2
## STRT ## adding FRCH data to data frame because STRT didnt have a rain gauge there until the 7/29/20
min<-cut(strt.2020.gauge$DateTime, breaks="15 min")
STRT.2020.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = strt.2020.gauge, FUN=function(x)
sum=sum(x)))
STRT.2020.st$DateTime <-as.POSIXct(STRT.2020.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
STRT.FRCH <- FRCH.2020.st[-c(438:677), ] #clipping off 7/29-on
STRT.2020.st <- full_join(STRT.FRCH, STRT.2020.st, by = c("DateTime")) #merging FRCH and STRT
STRT.2020.st$inst_rainfall_mm <- rowMeans(STRT.2020.st[,c(2,5)], na.rm = TRUE)
FRCH.2020.RAIN <- ggplot(frch.2020.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation (mm)") +
ggtitle("French 2020 Rain Gauge")
FRCH.2020.RAIN
## FRCH ##
frch.2020.gauge$inst_rainfall_mm = 0.2
min<-cut(frch.2020.gauge$DateTime, breaks="15 min")
FRCH.2020.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = frch.2020.gauge, FUN=function(x)
sum=sum(x)))
FRCH.2020.st$DateTime<-as.POSIXct(FRCH.2020.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
## STRT ## adding FRCH data to data frame because STRT didnt have a rain gauge there until the 7/29/20
min<-cut(strt.2020.gauge$DateTime, breaks="15 min")
STRT.2020.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = strt.2020.gauge, FUN=function(x)
sum=sum(x)))
STRT.2020.st$DateTime <-as.POSIXct(STRT.2020.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
STRT.FRCH <- FRCH.2020.st[-c(438:677), ] #clipping off 7/29-on
STRT.2020.st <- full_join(STRT.FRCH, STRT.2020.st, by = c("DateTime")) #merging FRCH and STRT
STRT.2020.st$inst_rainfall_mm <- rowMeans(STRT.2020.st[,c(2,5)], na.rm = TRUE)
STRT.2020.st$DateTime = lubridate::round_date(STRT.2020.st$DateTime, "15 minutes")
FRCH.2020.st$DateTime = lubridate::round_date(FRCH.2020.st$DateTime, "15 minutes")
VAUL.2020.st$DateTime = lubridate::round_date(VAUL.2020.st$DateTime, "15 minutes")
### Remove columns that are not needed ###
STRT.2020.st <- STRT.2020.st[,-c(1,2,4,5)]
FRCH.2020.st <- FRCH.2020.st[,-c(1)]
VAUL.2020.st <- VAUL.2020.st[,-c(1)]
poke.2020.gauge <- poke.2020.gauge[,-c(2,3)]
STRT.2020.st$Site <- "STRT"
FRCH.2020.st$Site <- "FRCH"
VAUL.2020.st$Site <- "VAUL"
#### plot to check ####
plot(STRT.2020.st$inst_rainfall_mm ~ STRT.2020.st$DateTime, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
plot(FRCH.2020.st$inst_rainfall_mm ~ FRCH.2020.st$DateTime, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
plot(VAUL.2020.st$inst_rainfall_mm ~ VAUL.2020.st$DateTime, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
#### plot to check ####
plot(STRT.2020.st$inst_rainfall_mm ~ STRT.2020.st$DateTime, type="h",
xlim=c(as.POSIXct("2020-06-05 00:00:00"), as.POSIXct("2020-10-21 00:00:00")),
ylim=c(0,13))
FRCH.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = frch.gauge, FUN=function(x)
sum=sum(x)))
FRCH.st$datetimeAK<-as.POSIXct(FRCH.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
rm(FRCH.st)
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(RColorBrewer)
library(gridExtra)
#### Precip. ####
### from CPCRW Caribou Peak Met Station ###
precip.cariboupeak = read_csv("CPCRW_Caribou_2018.csv",
skip = 4)
precip.cariboupeak$date_timeAK = as.POSIXct(precip.cariboupeak$Time, "%m/%d/%y %H:%M", tz="America/Anchorage")
class(precip.cariboupeak$date_timeAK)
tz(precip.cariboupeak$date_timeAK)
precip.cariboupeak = precip.cariboupeak[,-1]
names(precip.cariboupeak) = c("Precip", "DateTime")
### Import Data ###
moos.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTo-I5WEvCr0fm_N90iwoza0v1zkeB-mIDi9c5852dUg61KAP80J4aovUszwy52dQ/pub?output=csv"
frch.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRoS1xHHGsQC-cVmHXPt6feyMmDL6vEnRfIZ0o9PfeigudTNmJgS_SyDY5VzPQx3A/pub?output=csv"
moos.gauge <- read.csv(url(moos.url), skip = 6)
frch.gauge <- read.csv(url(frch.url), skip = 6)
### Rename columns ###
names(moos.gauge) <- c("DateTimeGMT", "Precip")
names(frch.gauge) <- c("DateTimeGMT", "Precip")
moos.gauge$Site <- "Moose"
frch.gauge$Site <- "French"
# Input NA for missing time #
moos.gauge$DateTimeGMT[moos.gauge$DateTimeGMT == ""] <- NA
frch.gauge$DateTimeGMT[frch.gauge$DateTimeGMT == ""] <- NA
# Convert time and put in AK time #
moos.gauge$DateTime <- mdy_hm(moos.gauge$DateTimeGMT, tz = "GMT")
attributes(moos.gauge$DateTime)$tzone <- 'America/Anchorage'
frch.gauge$DateTime <- mdy_hm(frch.gauge$DateTimeGMT, tz = "GMT")
attributes(frch.gauge$DateTime)$tzone <- 'America/Anchorage'
# Plot data #
MOOS <- ggplot(moos.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("Moose Rain Gauge")
MOOS
FRCH <- ggplot(frch.gauge) +
geom_line(aes(x = DateTime, y = Precip)) +
xlab("Date") +
ylab("Cumulative Precipitation in mm") +
ggtitle("French Rain Gauge")
FRCH
## FRCH ##
frch.gauge$inst_rainfall_mm = 0.2
## FRCH ##
min<-cut(frch.gauge$DateTime, breaks="15 min")
FRCH.st <- as.data.frame(aggregate(inst_rainfall_mm ~ min, data = frch.gauge, FUN=function(x)
sum=sum(x)))
FRCH.st$datetimeAK<-as.POSIXct(FRCH.st$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
FRCH.st$datetimeAK = lubridate::round_date(FRCH.st$datetimeAK, "15 minutes")
FRCH.st.2018 <- FRCH.st
FRCH.2018.st <- FRCH.st
write.csv(FRCH.2018.st,"~/Documents/DoD_2018/RainGauge/FRCH.RainGauge.2020.csv", row.names = FALSE)
View(moose1comb)
View(Q_2019)
frch.final.discharge.2018 <- data.frame(French2comb$Site, French2comb$DateTime, French1comb$pred.french1.Q, French2comb$pred.french2.Q)
names(frch.final.discharge.2018)
frch.final.discharge.2018$MeanDischarge <- rowMeans(frch.final.discharge.2018[,c(3:4)], na.rm = TRUE)
names(frch.final.discharge.2018) <- c("Site", "DateTime", "PT1Q", "PT2Q", "MeanDischarge")
head(frch.final.discharge.2018)
frch.final.discharge.2018$Site <- "FRCH"
moos.final.discharge.2018 <- data.frame(moose2comb$Site, moose2comb$DateTime, moose1comb$pred.moose1.Q, moose2comb$pred.moose2.Q)
head(moose1comb)
head(moose2comb)
moose1comb <- moose1comb[-c(1:2), ]
moos.final.discharge.2018 <- data.frame(moose2comb$Site, moose2comb$DateTime, moose1comb$pred.moose1.Q, moose2comb$pred.moose2.Q)
rm(moose1comb)
moose1comb <- full_join(Moose1, Qsummary.MO) %>%
filter(WaterLevelmeters > 166)
ggplot(aes(x=WaterLevelmeters, y=MeasuredQ_Ls), data=moose1comb) +
geom_point(aes( color=Method), size=3) +
geom_smooth(method = "lm", se=FALSE) +
scale_x_continuous(limits = c(166.2,167)) +
theme_classic() +
ggtitle("Moose1 all measured Q")
Moose1.lm <- lm(moose1comb$MeasuredQ_Ls ~ moose1comb$WaterLevelmeters)
summary(Moose1.lm)
moose1comb$pred.moose1.Q <- coef(Moose1.lm)[2] * moose1comb$WaterLevelmeters + coef(Moose1.lm)[1]
ggplot(aes(x=DateTime, y=pred.moose1.Q), data=moose1comb) +
geom_line(color="#A6CEE3") +
geom_point(aes(x=DateTime, y=MeasuredQ_Ls), size=3) +
theme_classic() +
ggtitle("Moose1 predicted all measured Q")
moose1comb <- moose1comb %>%
mutate(Q_Ls = pred.moose1.Q)
moose2comb$pred.moose2.Q <- coef(Moose2.lm)[2] * moose2comb$WaterLevelmeters + coef(Moose2.lm)[1]
ggplot(aes(x=DateTime, y=pred.moose2.Q), data=moose2comb) +
geom_line(color="#1F78B4") +
geom_point(aes(x=DateTime, y=MeasuredQ_Ls, shape=Method), size=3) +
theme_classic() +
ggtitle("Moose2 predicted all measured Q")
moose2comb <- moose2comb[-c(1:2), ]
moos.final.discharge.2018 <- data.frame(moose2comb$Site, moose2comb$DateTime, moose1comb$pred.moose1.Q, moose2comb$pred.moose2.Q)
moos.final.discharge.2018$MeanDischarge <- rowMeans(moos.final.discharge.2018[,c(3:4)], na.rm = TRUE)
names(moos.final.discharge.2018) <- c("Site", "DateTime", "PT1Q", "PT2Q", "MeanDischarge")
moos.final.discharge.2018$Site <- "MOOS"
write.csv(moos.final.discharge.2018, "~/Documents/DoD_Discharge/Predicted_Discharge/2018/MOOS/final_moos_Q.csv", row.names = FALSE)
write.csv(frch.final.discharge.2018, "~/Documents/DoD_Discharge/Predicted_Discharge/2018/FRCH/final_frch_Q.csv", row.names = FALSE)
Q_2018 <- rbind(frch.final.discharge.2019,
moos.final.discharge.2019)
Q_2018$day = format(as.POSIXct(Q_2018$DateTime, format = "%Y-%m-%d %H:%M:%S"), format = "%Y-%m-%d")
Q_2018$day = as.POSIXct(Q_2019$day, "%Y-%m-%d", tz = "America/Anchorage")
Q_2018$day = as.POSIXct(Q_2018$day, "%Y-%m-%d", tz = "America/Anchorage")
write.csv(Q_2018, "~/Documents/DoD_Discharge/Predicted_Discharge/2018/Q_2018.csv", row.names = FALSE)
View
View(Q_2018)
Q_2018 <- rbind(frch.final.discharge.2018,
moos.final.discharge.2018)
Q_2018$day = format(as.POSIXct(Q_2018$DateTime, format = "%Y-%m-%d %H:%M:%S"), format = "%Y-%m-%d")
Q_2018$day = as.POSIXct(Q_2018$day, "%Y-%m-%d", tz = "America/Anchorage")
write.csv(Q_2018, "~/Documents/DoD_Discharge/Predicted_Discharge/2018/Q_2018.csv", row.names = FALSE)
Q.daily.2018 = with(Q_2018, tapply(MeanDischarge, list(day, Site), mean))
Q.daily.2018 = as.data.frame(Q.daily.2018)
write.csv(Q.daily.2018, "~/Documents/DoD_Discharge/Predicted_Discharge/2018/Q.daily.2018.csv", row.names = FALSE)
moos.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTpuXf_81xoWO_N3uJY8qT_ZY-a9CfjFsl-UavJ8vXjBkfiR3cT9YcXo8xXncjN0Yph_6tHEY9iMJVM/pub?output=csv"
frch.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRVR3fDBQNFLI3kvdH2jgM_ktS2S4MuAnBnMct6LC3_Ph2xAwBWQP7XHkMvDDF1oiSkB58NrANhu601/pub?output=csv"
# Load Data#
moos.stream <- read.csv(url(moos.stream.url), skip = 24)
frch.stream <- read.csv(url(frch.stream.url), skip = 1)
moos.stream <- moos.stream[,-c(5:7)] # Remove Na columns
# Rename columns #
names(moos.stream) <- c("Date", "Time", "AbsolutePressure", "WaterLevel")
names(frch.stream) <- c("Date", "Time", "AbsolutePressure", "WaterLevel")
# Convert time and put in AK time #
moos.stream$Date <- mdy(moos.stream$Date)
moos.stream$DateTime <- as.POSIXct(paste(moos.stream$Date, moos.stream$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
frch.stream$Date <- mdy(frch.stream$Date)
frch.stream$DateTime <- as.POSIXct(paste(frch.stream$Date, frch.stream$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(here)
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(neonUtilities)
library(raster)
# Convert time and put in AK time #
moos.stream$Date <- mdy(moos.stream$Date)
moos.stream$DateTime <- as.POSIXct(paste(moos.stream$Date, moos.stream$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
frch.stream$Date <- mdy(frch.stream$Date)
frch.stream$DateTime <- as.POSIXct(paste(frch.stream$Date, frch.stream$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
# Filtering out data #
### MOOS ###
moos.stream <- moos.stream %>% subset(moos.stream$DateTime < "2015-09-20 18:30:00") # PT was taken out on the 21st
plot(x = moos.stream$DateTime, y = moos.stream$WaterLevel) # Plot check
### FRCH ###
frch.stream <- frch.stream %>%  subset(frch.stream$DateTime < "2015-09-20 18:30:00") # PT was taken out on the 21st
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 12:10"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 12:15"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 12:20"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 12:25"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 12:30"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 12:35"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 12:40"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 12:45"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 12:50"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 12:55"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 13:00"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 13:05"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 13:10"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 13:15"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 13:20"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 13:25"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 13:30"] <- NA
frch.stream$DateTime[frch.stream$DateTime == "2015-08-10 13:35"] <- NA
plot(x = frch.stream$DateTime, y = frch.stream$WaterLevel) # plot check
setwd(here())
# check: should be at DoD_2015
getwd()
### Write CSV ###
write.csv(moos.stream,"PT_data/c2015/moos.pt.2015.csv", row.names = FALSE)
### Write CSV ###
write.csv(moos.stream,"PT_data/2015/moos.pt.2015.csv", row.names = FALSE)
write.csv(frch.stream,"PT_data/2015/frch.pt.2015.csv", row.names = FALSE)
##################### 2015 ##################################################################
# Import data from google drive #
discharge.2015 <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQC9Bk0nS-Cx4Ec8MyLHd2xNuSv8JTobR8SSV_ODQHAvp4cUK8k3z9EmOs/pub?output=csv"
QSummary <- read.csv(url(discharge.2015))
QSummary$date <- mdy(QSummary$date)
QSummary$DateTime <- as.POSIXct(paste(QSummary$date, QSummary$time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
# ALL Sites #
ggplot(QSummary) +
geom_point(aes(x=date, y=Q..L.s., color=site), size=3) +
theme_classic() +
scale_color_brewer(palette = "Set1") +
ggtitle("ALL SITES")
# Filter French #
QSummary.FR <- QSummary %>% filter(site =="French")
### Rating curve for FRCH PT1 ###
frch.stream$site <- "French" # Add a column identifier
French1comb <- full_join(frch.stream, QSummary.FR) # Join PT data with Discharge
French1.lm <- lm(French1comb$Q..L.s. ~ French1comb$AbsolutePressure) # linear model with discharge and water level
frch.formula <- y ~ x
frc.1 <- ggplot(aes(x = AbsolutePressure, y = Q..L.s.), data = French1comb) +
geom_point(aes(color = Q..L.s.), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("French1 all measured Q")
frc.1
# Filter Moose #
QSummary.MO <- QSummary %>% filter(site =="Moose")
# Rating curve for MOOS PT1 #
moos.stream$site <- "Moose"
Moose1comb <- full_join(moos.stream, QSummary.MO)
MOOS1.lm <- lm(Moose1comb$Q..L.s. ~ Moose1comb$AbsolutePressure)
moos.formula <- y ~ x
mrc.1 <- ggplot(aes(x = AbsolutePressure, y = Q..L.s.), data = Moose1comb) +
geom_point(aes(color = Q..L.s.), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = moos.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Moose1 all measured Q")
mrc.1
################################################## 2015 ######################################################
### FRCH ###
# PT1 #
French1comb$pred.french1.Q <- coef(French1.lm)[2] * French1comb$AbsolutePressure+ coef(French1.lm)[1]
ggplot(aes(x = DateTime, y = pred.french1.Q), data=French1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = Q..L.s.), size=3) +
theme_classic() +
ggtitle("French1 predicted all measured Q") +
xlab("Date") +
ylab("Predicted Discharge")
# Final Discharge #
frch.final.discharge <- data.frame(French1comb$site, French1comb$DateTime, French1comb$pred.french1.Q)
### MOOS ###
# PT1 #
Moose1comb$pred.moos1.Q <- coef(MOOS1.lm)[2] * Moose1comb$AbsolutePressure+ coef(MOOS1.lm)[1]
ggplot(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = Q..L.s.), size=3) +
theme_classic() +
ggtitle("Moose1 predicted all measured Q") +
xlab("Date") +
ylab("Predicted Discharge")
# Final Discharge #
moos.final.discharge <- data.frame(Moose1comb$site, Moose1comb$DateTime, Moose1comb$pred.moos1.Q)
### Rename Columns ###
names(frch.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(moos.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
frch.final.discharge$Site <- "FRCH"
moos.final.discharge$Site <- "MOOS"
### Write CSV ###
write.csv(frch.final.discharge,"~/Documents/DoD_Discharge/Predicted_Discharge/2015/FRCH/FRCH.Q.csv", row.names = FALSE)
write.csv(moos.final.discharge,"~/Documents/DoD_Discharge/Predicted_Discharge/2015/MOOS/MOOS.Q.csv", row.names = FALSE)
moos.final.discharge <- na.omit(moos.final.discharge) # Removed 11 rows
frch.final.discharge <- na.omit(frch.final.discharge) # Removed 31 rows
final_discharge_2015 <- rbind(frch.final.discharge, moos.final.discharge)
write.csv(final_discharge_2015,"~/Documents/DoD_Discharge/Predicted_Discharg/FrMo.Q.csv", row.names = FALSE)
write.csv(final_discharge_2015,"~/Documents/DoD_Discharge/Predicted_Discharge/2015/FrMo.Q.csv", row.names = FALSE)
Q_2015 <- final_discharge_2015
Q_2015$day = format(as.POSIXct(Q_2015$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
Q_2015$day = as.POSIXct(Q_2015$day, "%Y-%m-%d", tz="America/Anchorage")
write.csv(Q_2015, "~/Documents/DoD_Discharge/Predicted_Discharge/2015/Q_2015.csv")
Q.daily.2015 = with(Q_2015, tapply(MeanDischarge, list(day, Site), mean))
Q.daily.2015 = as.data.frame(Q.daily.2015)
write.csv(Q.daily.2015, "~/Documents/DoD_Discharge/Predicted_Discharge/2015/Q.daily.2015.csv")

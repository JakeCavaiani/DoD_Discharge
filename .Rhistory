Strt2comb$pred.strt2.Q <- coef(STRT2.lm)[2] * Strt2comb$WaterLevel+ coef(STRT2.lm)[1]
ggplot(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart2 predicted all measured Q") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("Date") +
ylab("Predicted Discharge")
# Final STRT #
strt.final.discharge <- data.frame(Strt1comb$Site, Strt1comb$DateTime, Strt1comb$pred.strt1.Q)
strt.final.discharge <- strt.final.discharge %>% subset(strt.stream.one$DateTime > "2020-06-16")
### Stuart1 (light blue), Stuart2 (dark blue), and Stuart1 (red) because STRT2 seems bad with observed Q.
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb) +
geom_line(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = Strt1comb.DateTime, y = Strt1comb.pred.strt1.Q), data = strt.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("Stuart1(light) & Stuart2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
### VAUL ###
# PT2 #
Vaul2comb$pred.vaul2.Q <- coef(VAUL2.lm)[2] * Vaul2comb$WaterLevel+ coef(VAUL2.lm)[1]
ggplot(aes(x = DateTime, y = pred.vaul2.Q), data = Vaul2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Vault") +
scale_shape_discrete(name = "Mehtod", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge (L/s)") +
scale_x_datetime(limits = as_datetime(c("2020-05-15", "2020-10-10")))
# Final VAUL #
vaul.final.discharge <- data.frame(Vaul2comb$Site, Vaul2comb$DateTime, Vaul2comb$pred.vaul2.Q)
vaul.final.discharge <- vaul.final.discharge %>%  subset(vaul.stream$DateTime > "2020-06-16")
setwd(here())
# check: should be at DoD_Discharge
getwd()
### Write CSV ###
write.csv(frch.final.discharge,"Predicted_Discharge/processed/FRCH.csv", row.names = FALSE)
write.csv(moos.final.discharge,"Predicted_Discharge/processed/MOOS.csv", row.names = FALSE)
write.csv(poke.final.discharge,"Predicted_Discharge/processed/POKE.csv", row.names = FALSE)
write.csv(strt.final.discharge,"Predicted_Discharge/processed/STRT.csv", row.names = FALSE)
write.csv(vaul.final.discharge,"Predicted_Discharge/processed/VAUL.csv", row.names = FALSE)
### Rename Columns ###
names(frch.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(moos.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(poke.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(strt.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(vaul.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
final_discharge_2020 <- rbind(frch.final.discharge, moos.final.discharge,
poke.final.discharge, strt.final.discharge,
vaul.final.discharge)
write.csv(final_discharge_2020,"Predicted_Discharge/processed/All_Sites.csv", row.names = FALSE)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(plyr)
library(imputeTS)
library(TSA)
library(bbmle)
library(zoo)
library(xts)
library(forecast)
library(stats)
library(lattice)
library(nlme)
library(geosphere)
library(car)
library(EcoHydRology)
### Load from local machine ###
EXO_ALL <- read_csv("~/Documents/DoD_2020/EXO_data/from_internal_harddrive/processed/EXO.ALL.csv")
EXO_ALL$Site <- EXO_ALL$site.ID
EXO_ALL$DateTime <- as.POSIXct(EXO_ALL$DateTime)
ALL <- full_join(EXO_ALL, final_discharge_2020)
SUNA_ALL <- read_csv("~/Documents/DoD_2020/SUNA_data/from_internal_harddrive/processed/SUNA.processed.csv")
ncol(SUNA_ALL)
SUNA_ALL <- SUNA_ALL[, -(14:269)]
SUNA_ALL$Site <- SUNA_ALL$site.ID
SUNA_ALL$DateTime <- SUNA_ALL$datetimeAK
ALL <- full_join(ALL, SUNA_ALL)
Q <-  subset(ALL, select = c("DateTime","Site","MeanDischarge"))
View(Q)
Q$day = format(as.POSIXct(Q$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
Q$day = as.POSIXct(Q$day, "%Y-%m-%d", tz="America/Anchorage")
Q$DateTime = NULL
Q.daily = with(Q, tapply(MeanDischarge, list(day, Site), mean))
Q.daily = as.data.frame(Q.daily)
View(Q.daily)
source('~/Documents/DoD_Discharge/R_Scripts/04_Storm_Analysis.R', echo=TRUE)
#### subset data by site ####
FRCH <-  subset(ALL, Site == "FRCH")
head(FRCH$DateTime)
STRT = subset(ALL, Site == "STRT")
head(STRT$DateTime)
POKE = subset(ALL, Site == "POKE")
head(POKE$DateTime)
VAUL = subset(ALL, Site == "VAUL")
head(VAUL$DateTime)
MOOS = subset(ALL, Site == "MOOS")
head(MOOS$DateTime)
View(FRCH)
str(FRCH)
#### subset data by site ####
FRCH$DateTime <- as.POSIXct(paste(FRCH$Date, FRCH$Time), format = "%Y-%m-%d %H:%M:%S")
str(FRCH)
head(FRCH$DateTime)
#### subset data by site ####
FRCH$Date <- as.Date(FRCH$Date)
str(FRCH)
FRCH$Date <- as.Date(FRCH$Date, format = "%Y-%m-%d")
str(FRCH)
FRCH_Q = as.data.frame(Q.daily$FRCH)
View(FRCH_Q)
head(STRT$DateTime)
FRCH_Q$day = as.Date(rownames(Q.daily))
names(FRCH_Q) = c("Discharge_Lsec", "day")
STRT_Q = as.data.frame(Q.daily$STRT)
STRT_Q$day = as.Date(rownames(Q.daily))
names(STRT_Q) = c("Discharge_Lsec", "day")
View(STRT_Q)
POKE_Q = as.data.frame(Q.daily$POKE)
POKE_Q$day = as.Date(rownames(Q.daily))
names(POKE_Q) = c("Discharge_Lsec", "day")
POKE_Q
View(POKE_Q)
VAUL_Q = as.data.frame(Q.daily$VAUL)
VAUL_Q$day = as.Date(rownames(Q.daily))
names(VAUL_Q) = c("Discharge_Lsec", "day")
View(VAUL_Q)
MOOS_Q = as.data.frame(Q.daily$MOOS)
MOOS_Q$day = as.Date(rownames(Q.daily))
names(MOOS_Q) = c("Discharge_Lsec", "day")
View(MOOS_Q)
MOOS_Q <- MOOS_Q %>% subset(MOOS_Q$day< "2020-10-14")
str(MOOS_Q)
MOOS_Q <- MOOS_Q %>% subset(MOOS_Q$day < "2020-10-14")
?subset
MOOS_Q <- MOOS_Q %>% subset(day < "2020-10-14", select = day)
MOOS_Q <- MOOS_Q %>% subset(MOOS_Q$day < "2020-10-14", select = day)
View(FRCH)
# STRT #
STRT.no3 <- subset(STRT, select = c("DateTime", "nitrate_uM"))
# STRT #
STRT.no3 <- subset(STRT, select = c("DateTime", "nitrateuM"))
View(STRT.no3)
STRT.no3 = fillgaps15(STRT.no3, STRT.no3$nitrateuM, "nitrateuM", 16)
STRT.no3 = fill(STRT.no3, STRT.no3$nitrateuM, "nitrateuM", 16)
#### data wrangling - fill gaps ####
# fxn #
fillgaps15 = function(df, dat, datquotes, largegap.num){
## Document gaps >= largegap.num (1 largegap.num = 15 min) ##
# (note - the criteria of what constitutes a "large" gap should be reevaluated depending on the trend being characterized)
is.na.rle <- rle(is.na(dat))
is.na.rle$values <- is.na.rle$values & is.na.rle$lengths >= (largegap.num)
biggaps = df[inverse.rle(is.na.rle), ]
tz(biggaps$date_timeAK) = "America/Anchorage"
biggaps = subset(biggaps, select = "date_timeAK")
# Make univariate time series, covert to zoo, then to ts #
ts.xts = subset(df, select = c("date_timeAK",datquotes))
ts.xts<-read.zoo(ts.xts, index.column=1, format="%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
ts.xts<-as.xts(ts.xts)
# remove leading and trailing NAs #
ts.xts = na.trim(ts.xts, is.na="any")
# Apply auto.arima and kalman filter to impute missing values #
fit2 = auto.arima(ts.xts)
kal = KalmanSmooth(ts.xts, fit2$model)
id.na<-which(is.na(ts.xts))
for(i in id.na)
ts.xts[i]<-fit2$model$Z %*% kal$smooth[i,]
# revert to dataframe #
ts.df = as.data.frame((ts.xts))
ts.df$date_timeAK = as.POSIXct(row.names(ts.df), tz="America/Anchorage")
names(ts.df) = c("dat_filled", "date_timeAK")
# remove large gaps #
ts.df$dat_filled[ts.df$date_timeAK %in% as.POSIXct(biggaps$date_timeAK)] = NA
# Replace large gaps with linear interpolation #
ts.df$dat_filled = na.interpolation(ts.df$dat_filled)
ts.df = subset(ts.df, select = c("dat_filled", "date_timeAK"))
return(ts.df)
}
STRT.no3 = fillgaps15(STRT.no3, STRT.no3$nitrateuM, "nitrateuM", 16)
#### data wrangling - fill gaps ####
# fxn #
fillgaps15 = function(df, dat, datquotes, largegap.num){
## Document gaps >= largegap.num (1 largegap.num = 15 min) ##
# (note - the criteria of what constitutes a "large" gap should be reevaluated depending on the trend being characterized)
is.na.rle <- rle(is.na(dat))
is.na.rle$values <- is.na.rle$values & is.na.rle$lengths >= (largegap.num)
biggaps = df[inverse.rle(is.na.rle), ]
tz(biggaps$DateTime) = "America/Anchorage"
biggaps = subset(biggaps, select = "DateTime")
# Make univariate time series, covert to zoo, then to ts #
ts.xts = subset(df, select = c("DateTime",datquotes))
ts.xts<-read.zoo(ts.xts, index.column=1, format="%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
ts.xts<-as.xts(ts.xts)
# remove leading and trailing NAs #
ts.xts = na.trim(ts.xts, is.na="any")
# Apply auto.arima and kalman filter to impute missing values #
fit2 = auto.arima(ts.xts)
kal = KalmanSmooth(ts.xts, fit2$model)
id.na<-which(is.na(ts.xts))
for(i in id.na)
ts.xts[i]<-fit2$model$Z %*% kal$smooth[i,]
# revert to dataframe #
ts.df = as.data.frame((ts.xts))
ts.df$DateTime = as.POSIXct(row.names(ts.df), tz="America/Anchorage")
names(ts.df) = c("dat_filled", "DateTime")
# remove large gaps #
ts.df$dat_filled[ts.df$DateTime %in% as.POSIXct(biggaps$DateTime)] = NA
# Replace large gaps with linear interpolation #
ts.df$dat_filled = na.interpolation(ts.df$dat_filled)
ts.df = subset(ts.df, select = c("dat_filled", "DateTime"))
return(ts.df)
}
# STRT #
STRT.no3 <- subset(STRT, select = c("DateTime", "nitrateuM"))
STRT.no3 = fillgaps15(STRT.no3, STRT.no3$nitrateuM, "nitrateuM", 16)
plot(C3.no3$dat_filled, type="l")
plot(STRT.no3$dat_filled, type="l")
names(STRT.no3) = c("nitrate_uM_filled", "DateTime")
View(STRT.no3)
# POKE #
POKE.no3 <- subset(POKE.no3, select = c("DateTime", "nitrateuM"))
# POKE #
POKE.no3 <- subset(POKE, select = c("DateTime", "nitrateuM"))
View(POKE.no3)
View(POKE)
POKE.no3 <-  fillgaps15(POKE.no3, POKE.no3$nitrateuM, "nitrateuM", 16)
POKE.no3 <- POKE.no3[!is.na(POKE.no3$DateTime), ]
POKE.no3 <-  fillgaps15(POKE.no3, POKE.no3$nitrateuM, "nitrateuM", 16)
plot(POKE.no3$dat_filled, type="l")
POKE.no3 <-  fillgaps15(POKE.no3, POKE.no3$nitrateuM, "nitrateuM", 16)
plot(POKE.no3$dat_filled, type="l")
names(POKE.no3) = c("nitrate_uM_filled", "DateTime")
# VAUL #
VAUL.no3 <- subset(VAUL, select = c("DateTime", "nitrateuM"))
VAUL.no3 <-  fillgaps15(VAUL.no3, VAUL.no3$nitrateuM, "nitrateuM", 16)
View(VAUL.no3)
View(SUNA_ALL)
head(SUNA_ALL$DateTime)
head(SUNA_ALL$datetimeAK)
str
str(SUNA_ALL)
SUNA_ALL$DateTime <- as.Date(c(SUNA_ALL$date_yearday), origin = structure(-2440588, class = "Date"))
head(SUNA_ALL$DateTime)
rm(SUNA_ALL)
SUNA_ALL <- read_csv("~/Documents/DoD_2020/SUNA_data/from_internal_harddrive/processed/SUNA.processed.csv")
SUNA_ALL <- SUNA_ALL[, -(14:269)] # Remove channels
SUNA_ALL$Site <- SUNA_ALL$site.ID
SUNA_ALL$DateTime1 <- as.Date(SUNA_ALL$date_yearday, origin = "1970-01-01")
head(SUNA_ALL$DateTime1)
SUNA_ALL$DateTime1 <- as.Date(SUNA_ALL$day_timeUTC, origin = "1970-01-01")
head(SUNA_ALL$DateTime1)
SUNA_ALL$DateTime1 <- as.Date(SUNA_ALL$day_timeUTC, origin = "2020-01-01")
head(SUNA_ALL$DateTime1)
head(SUNA_ALL$time_fhoursUTC)
head(SUNA_ALL$datetimeAK)
VAUL.fDOM = subset(VAUL, select = c("DateTime","fDOM.RFU"))
VAUL.fDOM = fillgaps15(VAUL.fDOM, VAUL.fDOM$fDOM.RFU, "fDOM.RFU", 16)
any(is.na(FRCH_Q$day))
any(is.na(FRCH_Q$Discharge_Lsec))
any(is.na(STRT_Q$day))
any(is.na(STRT_Q$Discharge_Lsec))
any(is.na(POKE_Q$day))
any(is.na(POKE_Q$Discharge_Lsec))
any(is.na(VAUL_Q$day))
any(is.na(VAUL_Q$Discharge_Lsec))
any(is.na(MOOS_Q$day))
any(is.na(MOOS_Q$Discharge_Lsec))
plot(FRCH$Discharge_Lsec ~ FRCH$DateTime, type="l", xlab="", ylab="Q (L/sec)",
# xlim = as.POSIXct(c("2017-05-22 00:00:00","2017-09-01 00:00:00"), tz="America/Anchorage"),
ylim = c(0,180), col="blue")
View
View(FRCH)
#
plot(STRT$Discharge_Lsec ~ STRT$date_timeAK, type="l", xlab="", ylab="Q (L/sec)",
# xlim = as.POSIXct(c("2017-05-22 00:00:00","2017-09-01 00:00:00"), tz="America/Anchorage"),
ylim = c(0,180), col="blue")
#
plot(STRT$MeanDischarge ~ STRT$DateTime, type="l", xlab="", ylab="Q (L/sec)",
# xlim = as.POSIXct(c("2017-05-22 00:00:00","2017-09-01 00:00:00"), tz="America/Anchorage"),
ylim = c(0,180), col="blue")
View
View(STRT)
#
plot(STRT$MeanDischarge ~ STRT$DateTime, type="l", xlab="", ylab="Q (L/sec)",
#
plot(STRT$MeanDischarge ~ STRT$DateTime, type="l", xlab="", ylab="Q (L/sec)")
#
plot(STRT$MeanDischarge ~ STRT$DateTime, type="l", xlab="", ylab="Q (L/sec)",
# xlim = as.POSIXct(c("2017-05-22 00:00:00","2017-09-01 00:00:00"), tz="America/Anchorage"),
ylim = c(0,1000), col="blue")
#
plot(POKE$MeanDischarge ~ POKE$DateTime, type="l", xlab="", ylab="Q (L/sec)",
# xlim = as.POSIXct(c("2017-05-22 00:00:00","2017-09-01 00:00:00"), tz="America/Anchorage"),
ylim = c(0,1000), col="blue")
str(POKE)
#
plot(POKE$MeanDischarge ~ POKE$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,2000), col="blue")
#
plot(POKE$MeanDischarge ~ POKE$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(FRCH$MeanDischarge ~ FRCH$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0, 3000), col="blue")
plot(VAUL$MeanDischarge ~ VAUL$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(frch.final.discharge$MeanDischarge~ frch.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0, 3000), col="blue")
#
plot(POKE$MeanDischarge ~ POKE$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
#
plot(poke.final.discharge$MeanDischarge ~ poke.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(vaul.final.discharge$MeanDischarge ~ vaul.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(strt.final.discharge$MeanDischarge ~ strt.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(moos.final.discharge$MeanDischarge ~ moos.final.discharge$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
View(FRCH_Q)
colnames(FRCH_Q)
colnames(frch.final.discharge)
#
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
#
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(frch.final.discharge, select = c(DateTime, MeanDischarge)), streamflow2=FRCH_Q_bf$bt)
frch.final.discharge$day = format(as.POSIXct(frch.final.discharge$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
frch.final.discharge$day = as.POSIXct(frch.final.discharge$day, "%Y-%m-%d", tz="America/Anchorage")
frch.final.discharge$DateTime = NULL
View(frch.final.discharge)
frch.q.daily <- with(frch.final.discharge, tapply(MeanDischarge, list(day, Site), mean))
View(Q.daily)
frch.q.daily <- as.data.frame(frch.q.daily)
View(frch.q.daily)
#
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(frch.final.discharge, select = c(DateTime, MeanDischarge)), streamflow2=FRCH_Q_bf$bt) +
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage")
frch.final.discharge$day
View(frch.final.discharge)
#
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(frch.final.discharge, select = c(day, MeanDischarge)), streamflow2=FRCH_Q_bf$bt) +
xlim = as.POSIXct(c("2020-06-01 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage")
#
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(frch.final.discharge, select = c(day, MeanDischarge)), streamflow2=FRCH_Q_bf$bt)
FRCH_Q <-  as.data.frame(frch.q.daily)
FRCH_Q$day = as.Date(rownames(frch.q.daily))
names(FRCH_Q) = c("Discharge_Lsec", "day")
#
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
strt.q.daily <- with(strt.final.discharge, tapply(MeanDischarge, list(day, Site), mean))
strt.q.daily <- as.data.frame(strt.q.daily)
head(strt.final.discharge)
STRT_Q <-  as.data.frame(strt.final.discharge)
STRT_Q$day = as.Date(rownames(strt.final.discharge))
View(STRT_Q)
View(FRCH_Q)
strt.final.discharge$day = format(as.POSIXct(strt.final.discharge$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
strt.final.discharge$day = as.POSIXct(strt.final.discharge$day, "%Y-%m-%d", tz="America/Anchorage")
strt.final.discharge$DateTime = NULL
strt.q.daily <- with(strt.final.discharge, tapply(MeanDischarge, list(day, Site), mean))
strt.q.daily <- as.data.frame(strt.q.daily)
STRT_Q <-  as.data.frame(strt.q.daily)
STRT_Q$day = as.Date(rownames(strt.q.daily))
names(STRT_Q) = c("Discharge_Lsec", "day")
#
STRT_Q_bf = BaseflowSeparation(strt.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
STRT_Q
View(strt.final.discharge)
#
STRT_Q_bf = BaseflowSeparation(strt.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
poke.final.discharge$day = format(as.POSIXct(poke.final.discharge$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
poke.final.discharge$day = as.POSIXct(poke.final.discharge$day, "%Y-%m-%d", tz="America/Anchorage")
poke.final.discharge$DateTime = NULL
poke.q.daily <- with(poke.final.discharge, tapply(MeanDischarge, list(day, Site), mean))
poke.q.daily <- as.data.frame(poke.q.daily)
poke.final.discharge$day = format(as.POSIXct(poke.final.discharge$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
POKE_Q <-  as.data.frame(poke.q.daily)
POKE_Q$day = as.Date(rownames(poke.q.daily))
names(POKE_Q) = c("Discharge_Lsec", "day")
#
POKE_Q_bf = BaseflowSeparation(poke.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
poke.final.discharge
view(poke.final.discharge)
sum(is.na(frch.final.discharge$MeanDischarge))
sum(is.na(strt.final.discharge$MeanDischarge))
#
STRT_Q_bf = BaseflowSeparation(strt.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3, na.rm = TRUE)
strt.final.discharge <- strt.final.discharge[!is.na(strt.final.discharge$MeanDischarge)]
sum(is.na(poke.final.discharge$MeanDischarge))
strt.final.discharge <- strt.final.discharge %>% filter(!is.na(strt.final.discharge$MeanDischarge))
sum(is.na(vaul.final.discharge$MeanDischarge))
sum(is.na(moos.final.discharge$MeanDischarge))
vaul.final.discharge$day = format(as.POSIXct(vaul.final.discharge$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
vaul.final.discharge$day = as.POSIXct(vaul.final.discharge$day, "%Y-%m-%d", tz="America/Anchorage")
vaul.final.discharge$DateTime = NULL
vaul.q.daily <- with(vaul.final.discharge, tapply(MeanDischarge, list(day, Site), mean))
vaul.q.daily <- as.data.frame(vaul.q.daily)
vaul.final.discharge$day = format(as.POSIXct(vaul.final.discharge$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
vaul.final.discharge$day = as.POSIXct(vaul.final.discharge$day, "%Y-%m-%d", tz="America/Anchorage")
vaul.final.discharge$DateTime = NULL
VAUL_Q <-  as.data.frame(vaul.q.daily)
VAUL_Q$day = as.Date(rownames(vaul.q.daily))
names(VAUL_Q) = c("Discharge_Lsec", "day")
#
VAUL_Q_bf = BaseflowSeparation(vaul.final.discharge$MeanDischarge, filter_parameter = 0.90, passes = 3)
hydrograph(input=subset(VAUL_Q, select = c(day, Discharge_Lsec)), streamflow2=VAUL_Q_bf$bt)
strt.final.discharge <- na.omit(strt.final.discharge$MeanDischarge)
sum(is.na(strt.final.discharge$MeanDischarge))
# Final STRT #
strt.final.discharge <- data.frame(Strt1comb$Site, Strt1comb$DateTime, Strt1comb$pred.strt1.Q)
strt.final.discharge <- strt.final.discharge %>% subset(strt.stream.one$DateTime > "2020-06-16")
View(strt.final.discharge)
names(strt.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
sum(is.na(strt.final.discharge$MeanDischarge))
strt.final.discharge <- na.omit(strt.final.discharge$MeanDischarge)
# Final STRT #
strt.final.discharge <- data.frame(Strt1comb$Site, Strt1comb$DateTime, Strt1comb$pred.strt1.Q)
strt.final.discharge <- strt.final.discharge %>% subset(strt.stream.one$DateTime > "2020-06-16")
names(strt.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
strt.final.discharge$MeanDischarge <- na.omit(strt.final.discharge$MeanDischarge)
strt.final.discharge <- na.omit(strt.final.discharge$MeanDischarge)
names(strt.final.discharge) <- c("MeanDischarge")
#
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
#
VAUL_Q_bf = BaseflowSeparation(vaul.final.discharge$MeanDischarge, filter_parameter = 0.925, passes = 3)
hydrograph(input=subset(VAUL_Q, select = c(day, Discharge_Lsec)), streamflow2=VAUL_Q_bf$bt)
### .95 ###
FRCH_Q_bf = BaseflowSeparation(frch.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(FRCH_Q, select = c(day, Discharge_Lsec)), streamflow2=FRCH_Q_bf$bt)
#
VAUL_Q_bf = BaseflowSeparation(vaul.final.discharge$MeanDischarge, filter_parameter = 0.95, passes = 3)
hydrograph(input=subset(VAUL_Q, select = c(day, Discharge_Lsec)), streamflow2=VAUL_Q_bf$bt)
any(is.na(FRCH_Q$day))
any(is.na(FRCH_Q$Discharge_Lsec))
any(is.na(STRT_Q$day))
any(is.na(STRT_Q$Discharge_Lsec))
any(is.na(POKE_Q$day))
any(is.na(POKE_Q$Discharge_Lsec))
any(is.na(VAUL_Q$day))
any(is.na(VAUL_Q$Discharge_Lsec))
any(is.na(MOOS_Q$day))
any(is.na(MOOS_Q$Discharge_Lsec))
plot(frch.final.discharge$MeanDischarge ~ frch.final.discharge$day, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2017-05-22 00:00:00","2017-09-01 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(frch.final.discharge$MeanDischarge ~ frch.final.discharge$day, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-05 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
plot(vaul.final.discharge$MeanDischarge ~ VAUL$DateTime, type="l", xlab="", ylab="Q (L/sec)",
xlim = as.POSIXct(c("2020-06-05 00:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
ylim = c(0,3000), col="blue")
FRCH_bfQ_mn = mean(FRCH_Q_bf$bt)
plot(FRCH_Q$Discharge_Lsec ~ FRCH_Q$day, type="l", xlab="", ylab="Q (L/sec)",ylim = c(0,3000), col="blue", main="FRCH")
lines(FRCH_Q_bf$bt ~ FRCH_Q$day, col="red")
View(FRCH_Q)
View(FRCH_Q_bf)
FRCH_bfQ_mn = mean(FRCH_Q_bf$bt)
head(FRCH_bfQ_mn)
head(FRCH_Q_bf)
plot(FRCH_Q$Discharge_Lsec ~ FRCH_Q$day, type="l", xlab="", ylab="Q (L/sec)",ylim = c(0,3000), col="blue", main="FRCH")
FRCH_bfQ_mn
FRCH_bfQ_mn*2
#lines((C3_Q_bf$bt*1.3) ~ C3_Q$day, col="red", lty=2)
#lines((C3_Q_bf$bt*5) ~ C3_Q$day, col="red", lty=2)
abline(h = FRCH_bfQ_mn*2, col="red", lty=2)
lines(FRCH_Q_bf$bt ~ FRCH_Q$day, col="red")
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(here)
dir.create(here("PT_data"))
dir.create(here("PT_data", "clean"))
setwd(here("PT_data", "clean"))

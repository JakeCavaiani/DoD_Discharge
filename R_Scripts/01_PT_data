### Read me ###
# the purpose of this script is to export DoD water level data and process it into continuous discharge (Q) once we calculate rating curves


# Important NOTES:
# 1) Water level data is obtained from HOBO pressure transducers (PTs) that were installed in PVC pipes in streams, with the PT sitting on top of a rebar peice at bottom of pipe. Raw pressure from PTs were processed in HOBOware to correct for atmospheric pressure to get water depth. Atmospheric pressure was obtained from a PT installed at each site in a tree. HOWEVER, water depth is absolute PT depth, NOT actual water depth. To get actual water depth, we need a reference water depth from a time point in the water depth time series that is an accurate measure of the depth of the pt from the water surface. We do not have these (depth measurements from flow meter measurements were not done sufficiently close to PT locations to use). We must therefore rely on the rating curve to convert absolute water depth to continuous Q.

# 2) Date/time from HOBOware data is GMT-8, which is Alaska Daylight Time, which is the correct timezone for this project in summer (AK is in GMT-9 March-November when daylight savings is not observed). Data/time therefore needs to be formatted but not timezone-converted.

# 3) This data is read in from DoD Project->2020 AK sensors->Discharge->Pressure Transducer->Water Level

# Step 1: import raw data files which is site, datetime, absolute pressure and water level
# Step 2: Clean errant points within the data that could be due to installation/decommission or gaps in data
# Step 3: Write final output of cleaned site, datetime, absolute pressure and water level

### load packages ### 
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(here)

dir.create(here("PT_data"))
dir.create(here("PT_data", "clean"))

setwd(here("PT_data", "clean"))


### Import Raw Data ### 
# VAUL only has one because data for PT1 was very erroneous 
moos.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSqPvEKpJI6Kq5O6_oRRj0t9IDXvUwGeHD3t_mYiQvGRL_ZFsCU_4Hw1FMBadCipWjzk-Tg2D2xBK9b/pub?output=csv"
moos.stream.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRLiymnxf0Kh0V9RC-aYvoOuVR1mdUR4h4Eyd2QM8eE-C0WnSGiHU30G7hNmBrla7q78ApCi8TIQX4y/pub?output=csv"
frch.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTEniUzPMlYhqf_XyFnCG5j97f9uZxBCafA8qs4L6KybqvF0eve9Ic4-IkvkeEoYDzAstr40ftBBSnc/pub?output=csv"
frch.stream.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSBuhkfYzLPVefrA5bLqybCkJmQtT1zLo5OFavWhjVCYX82QqhYo712IWgxKlpDbk3zMBkJ-QiN_RpZ/pub?output=csv"
strt.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTv0x_cYRqBh5Aw1shmc630pIXbjVbV8Vet_gZun7AhngwvQWVLkGL7t8gbBuaMnP4tcUQsSN_Zl_f5/pub?output=csv"
strt.stream.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQfQQybzS-N-iEQBLalffAhOzLvWOZYTjo84q9rGx_5q1oxm9Kv3WjFePB15m0hSQQLc5DYrPXlwEcS/pub?output=csv"
vaul.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRVA4AxNNaYJY6hJCD7c7Y4jloR68x1Zols2Grg7xiKx-gVQlqh5yb3e3L5XkFUXyRn0GnD1nRi_XXJ/pub?output=csv"
poke.stream.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTVII1zFxhCY1VCg6D_NH9dZkE0lsv15W3_hDnvuj0lvnOV3yOhqwiGjs0lSR-ELXnfjc_bLb8mC6M6/pub?output=csv"
poke.stream.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTx06zsh-FYmaIix2GBP-GW7E-EYH78bINSLusSbSpD_FP6P7H28JD0M8p8KKXxCFGeiXKEHKitEZW_/pub?output=csv"

# Load Data#
moos.stream.one <- read.csv(url(moos.stream.url), skip = 491)
moos.stream.two <- read.csv(url(moos.stream.url.two), skip = 1)

frch.stream.one <- read.csv(url(frch.stream.url), skip = 1)
frch.stream.two <- read.csv(url(frch.stream.url.two), skip = 4)


strt.stream.one <- read.csv(url(strt.stream.url), skip = 1)
strt.stream.two <- read.csv(url(strt.stream.url.two), skip = 1)

vaul.stream <- read.csv(url(vaul.stream.url), skip = 1)

poke.stream.one <- read.csv(url(poke.stream.url), skip = 1)
poke.stream.two <- read.csv(url(poke.stream.url.two), skip = 1)

# Rename columns #
names(moos.stream.one) <- c("Site", "DateTimeGMT", "AbsolutePressure", "WaterLevel")
names(moos.stream.two) <- c("Site", "DateTimeGMT", "AbsolutePressure", "WaterLevel")

names(frch.stream.one) <- c("Site", "DateTimeGMT", "Absolute Pressure", "WaterLevel")
names(frch.stream.two) <- c("Site", "DateTimeGMT", "Absolute Pressure", "WaterLevel")

names(strt.stream.one) <- c("Site", "DateTimeGMT", "Absolute Pressure", "WaterLevel")
names(strt.stream.two) <- c("Site", "DateTimeGMT", "Absolute Pressure", "WaterLevel")

names(vaul.stream) <- c("Site", "DateTimeGMT", "Absolute Pressure", "WaterLevel")

names(poke.stream.one) <- c("Site", "DateTimeGMT", "AbsolutePressure", "WaterLevel")
names(poke.stream.two) <- c("Site", "DateTimeGMT", "AbsolutePressure", "WaterLevel")

# Input NA for missing time #
moos.stream.one$DateTimeGMT[moos.stream.one$DateTimeGMT == ""] <- NA
moos.stream.two$DateTimeGMT[moos.stream.one$DateTimeGMT == ""] <- NA

frch.stream.one$DateTimeGMT[frch.stream.one$DateTimeGMT == ""] <- NA
frch.stream.two$DateTimeGMT[frch.stream.two$DateTimeGMT == ""] <- NA

strt.stream.one$DateTimeGMT[strt.stream.one$DateTimeGMT == ""] <- NA
strt.stream.two$DateTimeGMT[strt.stream.one$DateTimeGMT == ""] <- NA

vaul.stream$DateTimeGMT[vaul.stream$DateTimeGMT == ""] <- NA


poke.stream.one$DateTimeGMT[poke.stream.one$DateTimeGMT == ""] <- NA
poke.stream.two$DateTimeGMT[poke.stream.one$DateTimeGMT == ""] <- NA


# Convert time and put in AK time #
moos.stream.one$DateTime <- mdy_hms(moos.stream.one$DateTimeGMT, tz = "GMT")
attributes(moos.stream.one$DateTime)$tzone <- 'America/Anchorage'
moos.stream.two$DateTime <- mdy_hms(moos.stream.two$DateTimeGMT, tz = "GMT")
attributes(moos.stream.two$DateTime)$tzone <- 'America/Anchorage'

frch.stream.one$DateTime <- mdy_hms(frch.stream.one$DateTimeGMT, tz = "GMT")
attributes(frch.stream.one$DateTime)$tzone <- 'America/Anchorage'
frch.stream.two$DateTime <- mdy_hms(frch.stream.two$DateTimeGMT, tz = "GMT")
attributes(frch.stream.two$DateTime)$tzone <- 'America/Anchorage'

strt.stream.one$DateTime <- mdy_hms(strt.stream.one$DateTimeGMT, tz = "GMT")
attributes(strt.stream.one$DateTime)$tzone <- 'America/Anchorage'
strt.stream.two$DateTime <- mdy_hms(strt.stream.two$DateTimeGMT, tz = "GMT")
attributes(strt.stream.two$DateTime)$tzone <- 'America/Anchorage'

vaul.stream$DateTime <- mdy_hms(vaul.stream$DateTimeGMT, tz = "GMT")
attributes(vaul.stream$DateTime)$tzone <- 'America/Anchorage'

poke.stream.one$DateTime <- mdy_hms(poke.stream.one$DateTimeGMT, tz = "GMT")
attributes(poke.stream.one$DateTime)$tzone <- 'America/Anchorage'
poke.stream.two$DateTime <- mdy_hms(poke.stream.two$DateTimeGMT, tz = "GMT")
attributes(poke.stream.two$DateTime)$tzone <- 'America/Anchorage'

### Filtering out data ###
### MOOS ###
moos.stream.one <- moos.stream.one %>% filter(moos.stream.one$WaterLevel > 165.5) %>% subset(moos.stream.one$DateTime < "2020-10-14") # cleaning data that is below 165.5 because those are errant and then before 10/14 because thats when we took the PTs out
plot(x = moos.stream.one$DateTime, y = moos.stream.one$WaterLevel) # Plot check

moos.stream.two <- moos.stream.two %>% subset(moos.stream.two$DateTime < "2020-10-14")

plot(x = moos.stream.two$DateTime, y = moos.stream.two$WaterLevel) #plot check

### FRCH ###
frch.stream.one <- frch.stream.one %>% filter(frch.stream.one$WaterLevel > 184) %>%  subset(frch.stream.one$DateTime < "2020-10-14") #cleaning data that is before the 14th (Site was taken down the 15th)
frch.stream.one$DateTime[frch.stream.one$DateTime == "2020-06-28 21:15"] <- NA
frch.stream.one$DateTime[frch.stream.one$DateTime == "2020-06-29 14:45"] <- NA

plot(x = frch.stream.one$DateTime, y = frch.stream.one$WaterLevel) # plot check

frch.stream.two <- frch.stream.two %>%  subset(frch.stream.two$DateTime < "2020-10-14") #cleaning data that is before the 14th (Site was taken down the 15th)

plot(x = frch.stream.two$DateTime, y = frch.stream.two$WaterLevel) # plot check

### STRT ###
strt.stream.one <- strt.stream.one %>% subset(strt.stream.one$DateTime < "2020-10-8") # cleaning data that is before October 8th due to ice in channel (Site was taken down Oct 13th)

plot(x = strt.stream.one$DateTime, y = strt.stream.one$WaterLevel) # plot check

strt.stream.two <- strt.stream.two %>% subset(strt.stream.two$DateTime < "2020-10-08") # cleaning data that is before October 8th due to ice in channel (Site was taken down Oct 13th)

strt.stream.two$DateTime[strt.stream.two$DateTime == "2020-06-24 8:45"] <- NA

plot(x = strt.stream.two$DateTime, y = strt.stream.two$WaterLevel) # plot check

### VAUL ###
vaul.stream <- vaul.stream %>% subset(vaul.stream$DateTime < "2020-10-05") # Cleaning data that is before October 5th due to ice in channel (Site was taken down Oct 14th)

plot(x = vaul.stream$DateTime, y = vaul.stream$WaterLevel) # plot check

### POKE ### 
poke.stream.one <- poke.stream.one %>% subset(poke.stream.one$DateTime < "2020-10-10") # Cleaning data that is before October 10th due to ice (Site was taken down Oct 14th)

plot(x = poke.stream.one$DateTime, y = poke.stream.one$WaterLevel) # plot check

poke.stream.two <- poke.stream.two %>% subset(poke.stream.two$DateTime < "2020-10-10") # Cleaning data that is before October 10th due to ice (Site was taken down Oct 14th)

plot(x = poke.stream.two$DateTime, y = poke.stream.two$WaterLevel) # plot check

# Combine the two PT into one #
moos.stream.two <- moos.stream.two[1:nrow(moos.stream.one),]
moos.stream.one$Site <- "MOOS1" #add column identifier
moos.stream.two$Site <- "MOOS2"
allmoos <- bind_rows(moos.stream.one, moos.stream.two)

frch.stream.two <- frch.stream.two[1:nrow(frch.stream.one),]
frch.stream.one$Site <- "FRCH1" #add column identifier
frch.stream.two$Site <- "FRCH2"
allfrch <- bind_rows(frch.stream.one, frch.stream.two)

strt.stream.two <- strt.stream.two[1:nrow(strt.stream.one),]
strt.stream.one$Site <- "STRT1" #add column identifier
strt.stream.two$Site <- "STRT2"
allstrt <- bind_rows(strt.stream.one, strt.stream.two)

vaul.stream$Site <- "VAUL" #add column identifier
allvaul <- vaul.stream

poke.stream.two <- poke.stream.two[1:nrow(poke.stream.one),]
poke.stream.one$Site <- "POKE1" #add column identifier
poke.stream.two$Site <- "POKE2"
allpoke <- bind_rows(poke.stream.one, poke.stream.two)

# Checking closeness between two PT #
plot(x = moos.stream.one$WaterLevel, y = moos.stream.two$WaterLevel, main = "Moose PT comparison",
     xlab = "Moose1PT", 
     ylab = "Moose2PT")
abline(1,1)


plot(x = frch.stream.one$WaterLevel, y = frch.stream.two$WaterLevel, main = "French PT comparison",
     xlab = "French1 PT", 
     ylab = "French2 PT")
abline(1,1)

plot(x = strt.stream.one$WaterLevel, y = strt.stream.two$WaterLevel, main = "Stuart PT comparison",
     xlab = "Stuart1 PT", 
     ylab = "Stuart2 PT")
abline(1,1)

plot(x = vaul.stream.one$WaterLevel, y = vaul.stream.two$WaterLevel, main = "Vault PT comparison",
     xlab = "Vault1 PT", 
     ylab = "Vault2 PT")
abline(1,1)

plot(x = poke.stream.one$WaterLevel, y = poke.stream.two$WaterLevel, main = "Poker PT comparison",
     xlab = "Poker1 PT", 
     ylab = "Poker2 PT")
abline(1,1)


Moos <- ggplot(allmoos) + 
  geom_line(aes(x = DateTime , y= WaterLevel, color = Site), size=1.25) +
  xlab("Date") +
  ylab("Water Level") +
  theme_classic() +
  ggtitle("Moose PT comparison") + 
  scale_color_brewer(palette = "Paired")
Moos


Frch <- ggplot(allfrch) + 
  geom_line(aes(x = DateTime , y= WaterLevel, color = Site), size=1.25) +
  xlab("Date") +
  ylab("Water Level") +
  theme_classic() +
  ggtitle("French Water Level") + 
  scale_color_brewer(palette = "Paired")
Frch  

Strt <- ggplot(allstrt) + 
  geom_line(aes(x = DateTime , y= WaterLevel, color = Site), size=1.25) +
  xlab("Date") +
  ylab("Water Level") +
  theme_classic() +
  ggtitle("Stuart PT comparison") + 
  scale_color_brewer(palette = "Paired")
Strt  

Vaul <- ggplot(vaul.stream.two) + 
  geom_line(aes(x = DateTime , y= WaterLevel, color = Site), size=1.25) +
  xlab("Date") +
  ylab("Water Level") +
  theme_classic() +
  ggtitle("Vault PT comparison") + 
  scale_color_brewer(palette = "Paired")
Vaul 

Poke <- ggplot(allpoke) + 
  geom_line(aes(x = DateTime , y= WaterLevel, color = Site), size=1.25) +
  xlab("Date") +
  ylab("Water Level") +
  theme_classic() +
  ggtitle("Poker PT comparison") + 
  scale_color_brewer(palette = "Paired")
Poke 

setwd(here())
# check: should be at DoD_Discharge

### Write CSV ###
write.csv(allmoos,"PT_data/clean/allmoos.csv", row.names = FALSE)
write.csv(allfrch,"PT_data/clean/allfrch.csv", row.names = FALSE)
write.csv(allstrt,"PT_data/clean/allstrt.csv", row.names = FALSE)
write.csv(allvaul,"PT_data/clean/allvaul.csv", row.names = FALSE)
write.csv(allpoke,"PT_data/clean/allpoke.csv", row.names = FALSE)

hystdict['Normalized slope of response'] = lastraisingresponse - firstraisingresponse  # / (lastRaisingDis - firstRaisingDis)
hystdict["HI_count"] = countHIs
hystdict["HI values missing due to no raising limb measurement"] = countMissingRaising
hystdict["HI values missing due to no falling limb measurement"] = countMissingFalling
hystdict["HI values missing due to no raising and no falling limb measurement"] = countMissingBoth
HIs = []
HIsandInterp = []
for key, values in hystIndex.items():
if not 'Interpolated' in key:
if values:
HIs.append(values)
if values:
HIsandInterp.append(values)
if 'Hysteresis_Index' in hystdict:
if values:
hystdict['Hysteresis_Index'][key] = values
# print('HYST Index:' + key + ' val: ' + str(values))
elif values:
tmpdict = {}
tmpdict[key ] = values
hystdict['Hysteresis_Index'] = tmpdict
# 3print('tmpdict: ' + key + 'val: ' +str(values))
hystAvg = numpy.mean(HIs) #sum(values) / float(len(values))
hystStd = numpy.std(HIs)
hystAvgInterp = float('NaN')
hystStdInterp = float('NaN')
hystAvgInterp = numpy.mean(HIsandInterp) #sum(values) / float(len(values))
hystStdInterp = numpy.std(HIsandInterp)
hystdict["HI_count_and_interp"] = str(len(HIsandInterp))
hystdict["HI_mean"] = str(hystAvg)
hystdict["HI_standard_deviation"] = str(hystStd)
hystdict["HI_mean_with_Interp"] = str(hystAvgInterp)
hystdict["HI_standard_deviation_with_Interp"] = str(hystStdInterp)
return hystdict
def hysteresisMetrics(discharge,response, discharge_time_spacing, response_time_spacing, debug=False, interpall=True,
discharge_time_spacing_units='minutes', response_time_spacing_units='minutes', discharge_units='CFS'):
# River discharge response hysteresis loop statistics and hysteresis indices (HI) are calculated for
# normalized discharge and response. With interpall=True (which is the default)HI values are calculated for 2%
# intervals of discharge similar to what is described in Vaughan et al., 2017
# (https://www.doi.org/10.1002/2017WR020491)
# Args:
#     discharge (pandas dataframe): a dataframe containing a datetime column named 'valuedatetime',  and discharge
#                                   values in a column 'datavalue'
#     response (pandas dataframe): a dataframe containing a datetime column named 'valuedatetime',  and a response
#                                  variable with values in a column 'datavalue'
#     discharge_time_spacing (int): amount of time between discharge measurements
#     response_time_spacing (int): amount of time between response measurements
#     debug (boolean): indicate if you want debugging print statements
#     interpall (boolean): indicate if you would like all HI values to be interpolated to 2% intervals of discharge.
#                          otherwise 2% intervals will pick the closest raising and falling limb response values to
#                          each 2% interval (but will still interpolate the values if a response value does not
#                          exist values will be interpolated.
#      discharge_time_spacing_units (string): this should be 'minutes' or 'hours' and indicates the units for
#                                             discharge_time_spacing
#      response_time_spacing_units (string): this should be 'minutes' or 'hours' and indicates the units for
#                                             response_time_spacing_units
#      discharge_units (string): this is just included in the returned dictionary.
#      Returns:
#             hystdict (dictionary): A python dictionary containing the calculated statistics and indices.
hystdict = {}
HIsandInterp = []
#sort values by date
discharge = discharge.sort_values(by=['valuedatetime'])
response = response.sort_values(by=['valuedatetime'])
#normalize times for discharge
dtimeagg = discharge_time_spacing # dischargetsr.intendedtimespacing
dtimeaggunit = discharge_time_spacing_units # dischargetsr.intendedtimespacingunitsid.unitsname
dischargepdf = discharge # pd.DataFrame(list(discharge.values()))
if 'minute' in dtimeaggunit or 'Minutes' in dtimeaggunit:
# print(responsenormpdf['valuedatetime'])
#print(str(dtimeaggunit))
#print(str(dischargetsr.resultid))
dischargepdf['valuedatetime'] = dischargepdf['valuedatetime'].apply(
lambda dt: datetime(dt.year, dt.month, dt.day, dt.hour,
int((dtimeagg * round((float(dt.minute) + float(
dt.second) / 60)) / dtimeagg))))
if 'hour' in dtimeaggunit:
dtimeagg = dtimeagg * 60
dischargepdf['valuedatetime'] = dischargepdf['valuedatetime'].apply(
lambda dt: datetime(dt.year, dt.month, dt.day, dt.hour,
int((dtimeagg * round((float(dt.minute) + float(
dt.second) / 60) / dtimeagg)))))
maxdischargerow = dischargepdf.loc[dischargepdf['datavalue'].idxmax()] # discharge.aggregate(Max('datavalue'))
maxdischarge = maxdischargerow['datavalue']
hystdict['Peak Q'] = maxdischarge
hystdict['discharge_units'] = discharge_units # str(discharge[0].resultid.resultid.unitsid.unitsabbreviation)
# print('units!!')
# print(discharge[0].resultid.resultid.unitsid.unitsabbreviation)
hystdict['Normalized slope of response'] = None
hystdict['Max width of response'] = None
hystdict['Hysteresis_Index'] = {}
hystdict["HI_mean"] = None
hystdict["HI_standard_deviation"] = None
hystdict["HI_count"] = 0
hystdict["HI values missing due to no raising limb measurement"] = 0
hystdict["HI values missing due to no falling limb measurement"] = 0
hystdict["HI values missing due to no raising and no falling limb measurement"] = 0
hystdict['interpolated Max width of response'] = float('nan')
hystdict["HI_mean_with_Interp"] = None
hystdict["HI_standard_deviation_with_Interp"] = None
hystdict['HI_count_and_interp'] = None
if maxdischarge:
maxdischargerecord = dischargepdf.loc[dischargepdf['datavalue'].idxmax()]
mindischargerecord = dischargepdf.loc[dischargepdf['datavalue'].idxmin()]
#maxdischargerecord = discharge.order_by('-datavalue')[
#    0]  # .get(datavalue=float(maxdischarge['datavalue__max']))
#mindischargerecord = discharge.order_by('datavalue')[0]
# dischargepdf = dischargepdf.sort_values(by=['valuedatetime'])
dischargepdf['datavalue'] = (dischargepdf['datavalue'] - mindischargerecord['datavalue']) / (
maxdischargerecord['datavalue'] - mindischargerecord['datavalue'])
if debug:
print('normalized discharge head')
print(dischargepdf.head())
maxdisrow = dischargepdf.loc[dischargepdf['datavalue'].idxmax()]
mindisrow = dischargepdf.loc[dischargepdf['datavalue'].idxmin()]
maxnormdischargerecord = maxdisrow['datavalue']
maxnormdischargedate = maxdisrow['valuedatetime']
minnormdischargerecord = mindisrow['datavalue']
minnormdischargedate = mindisrow['valuedatetime']
maxresponse = response.loc[response['datavalue'].idxmax()]
minresponse = response.loc[response['datavalue'].idxmin()]
hystdict["Max response"] = maxresponse['datavalue']
hystdict["Min response"] = minresponse['datavalue']
# responsenorm = []
responsenormpdf = response
responsenormpdf['datavalue'] = (responsenormpdf['datavalue']- minresponse.datavalue)/(maxresponse.datavalue - minresponse.datavalue)
# responsetsr = Timeseriesresults.objects.filter(resultid=response[0].resultid.resultid).get()
timeagg =response_time_spacing # responsetsr.intendedtimespacing
timeaggunit = response_time_spacing_units # responsetsr.intendedtimespacingunitsid.unitsname
if 'minute' in timeaggunit or 'Minutes' in timeaggunit:
# print(responsenormpdf['valuedatetime'])
responsenormpdf['valuedatetime'] = responsenormpdf['valuedatetime'].apply(lambda dt: datetime(dt.year, dt.month, dt.day, dt.hour,
int(timeagg * round((float(dt.minute) + float(
dt.second) / 60) / timeagg))))
if 'hour' in timeaggunit:
timeagg = timeagg * 60
responsenormpdf['valuedatetime'] = responsenormpdf['valuedatetime'].apply(lambda dt: datetime(dt.year, dt.month, dt.day, dt.hour,
int(timeagg * round((float(dt.minute) + float(
dt.second) / 60) / timeagg))))
raisinglimbresponse = responsenormpdf[(responsenormpdf['valuedatetime'] <= maxnormdischargedate)] # response.filter(valuedatetime__lte=maxdischargerecord.valuedatetime)
fallinglimbresponse = responsenormpdf[(responsenormpdf['valuedatetime'] > maxnormdischargedate)]  # response.filter(valuedatetime__gt=maxdischargerecord.valuedatetime)
hystIndex = []
# 5% intervals of discharge for hysteresis index 20 bucket
if not len(raisinglimbresponse.index) == 0 and not len(fallinglimbresponse.index) == 0:
dischargerange = maxnormdischargerecord- minnormdischargerecord
dischargeinterval = dischargerange / 50
hystIndex = {}
maxWidth = None
premaxWidth = None
countMissingRaising = 0
countMissingFalling = 0
countHIs = 0
countHIsandInterp = 0
countMissingBoth = 0
firstRaisingResponse = None
firstRaisingDis = None
lastRaisingResponse = None
lastRaisingDis = None
for i in range(1,51):
if i == 1:
lastinterval = 0
else:
lastinterval = interval
interval = dischargeinterval*i
dischargeintervalvals = dischargepdf[(dischargepdf['datavalue'] <= interval) & (dischargepdf['datavalue'] > lastinterval)]
# find matching response records
# keys = list(dischargeintervalvals['valuedatetime'])
dischargeandraisingresponse = pd.merge(dischargeintervalvals, raisinglimbresponse, on='valuedatetime', how='left', suffixes=('dis','raising'))
dischargeandfallingresponse = pd.merge(dischargeintervalvals, fallinglimbresponse, on='valuedatetime', how='left', suffixes=('dis','falling'))
if debug:
print('for interval: ' + str(interval))
print(dischargeintervalvals.head())
print(raisinglimbresponse.head())
print('falling limb')
print(fallinglimbresponse.head())
print('raising response ' + str(len(dischargeandraisingresponse.index)))
# print(dischargeandraisingresponse['datavalueraising'])
#print(dischargeandraisingresponse.head())
print('falling response ' + str(len(dischargeandfallingresponse.index)))
# print(dischargeandfallingresponse['datavaluefalling'])
closestraisingrow = None
closestfallingrow = None
closestraisingdistance = None
closestfallingdistance = None
for index, raisingrow in dischargeandraisingresponse.iterrows():
# for slope calculation
if not firstRaisingDis:
if raisingrow['datavaluedis'] > 0:
firstRaisingDis = raisingrow['datavaluedis']
if not firstRaisingResponse:
if  raisingrow['datavalueraising'] > 0:
firstRaisingResponse = raisingrow['datavalueraising']
else:
if raisingrow['datavaluedis'] > 0:
lastRaisingDis = raisingrow['datavaluedis']
if raisingrow['datavalueraising'] > 0:
lastRaisingResponse = raisingrow['datavalueraising']
# for HI caclulation
if raisingrow['datavalueraising'] > 0:
if closestraisingdistance:
if abs(interval - raisingrow['datavaluedis']) < closestraisingdistance:
closestraisingdistance =  abs(interval - raisingrow['datavaluedis'])
closestraisingrow = raisingrow
else:
closestraisingdistance =  abs(interval - raisingrow['datavaluedis'])
closestraisingrow = raisingrow
for index2, fallingrow in dischargeandfallingresponse.iterrows():
if fallingrow['datavaluefalling'] > 0: #and raisingrow['datavalueraising'] == fallingrow['datavaluefalling'] :
if closestfallingdistance:
if abs(interval - fallingrow['datavaluedis']) < closestfallingdistance:
closestfallingdistance = abs(interval - raisingrow['datavaluedis'])
closestfallingrow = fallingrow
else:
closestfallingdistance = abs(interval - raisingrow['datavaluedis'])
closestfallingrow = fallingrow
dischargeandraisingresponseall = pd.merge(dischargepdf, raisinglimbresponse, on='valuedatetime',
how='left', suffixes=('dis', 'raising'))
dischargeandfallingresponseall = pd.merge(dischargepdf, fallinglimbresponse, on='valuedatetime',
how='left', suffixes=('dis', 'falling'))
dischargeriaisingandfallingresponseall = pd.merge(dischargeandraisingresponseall, fallinglimbresponse, on='valuedatetime',
how='left', suffixes=('', 'raising'))
if interpall:
countMissingBoth += 1
premaxWidth = maxWidth
hystIndex,maxWidth = interpolateHIValues(hystIndex,'raising and falling', dischargeriaisingandfallingresponseall,interval,lastinterval,i,maxWidth)
elif not closestraisingrow is None and not closestfallingrow is None:
tmp = closestraisingrow['datavalueraising'] - closestfallingrow['datavaluefalling']
# print('HI: ' +  str(tmp))
countHIs += 1
hystIndex['HI for ' + str(i*2) + '% discharge'] = tmp
if maxWidth:
if abs(tmp) > abs(maxWidth):
maxWidth = tmp
elif tmp:
maxWidth = tmp
elif closestfallingrow is None and not closestraisingrow is None:
countMissingFalling += 1
premaxWidth = maxWidth
hystIndex,maxWidth = interpolateHIValues(hystIndex,'falling',dischargeandfallingresponseall,interval,lastinterval,i,maxWidth,closestraisingrow)
elif closestraisingrow is None and not closestfallingrow is None:
countMissingRaising += 1
premaxWidth = maxWidth
hystIndex,maxWidth = interpolateHIValues(hystIndex,'raising',dischargeandraisingresponseall,interval,lastinterval,i,maxWidth,closestfallingrow)
else:
countMissingBoth += 1
premaxWidth = maxWidth
hystIndex,maxWidth = interpolateHIValues(hystIndex,'raising and falling', dischargeriaisingandfallingresponseall,interval,lastinterval,i,maxWidth)
# hystdict = interpolateMissingHI(hystdict,'raising', dischargeandraisingresponseall)
if premaxWidth != maxWidth:
hystdict['interpolated Max width of response'] = maxWidth
else:
hystdict['Max width of response'] = maxWidth
# print('Max width ' + str(maxWidth))
# print(hystIndex)
raisingdf = raisinglimbresponse.sort_values(by='valuedatetime')
firstraisingresponse = raisingdf.head(1).iloc[0]['datavalue']
lastraisingresponse = raisingdf.tail(1).iloc[0]['datavalue']
hystdict['Normalized slope of response'] = lastraisingresponse - firstraisingresponse  # / (lastRaisingDis - firstRaisingDis)
hystdict["HI_count"] = countHIs
hystdict["HI values missing due to no raising limb measurement"] = countMissingRaising
hystdict["HI values missing due to no falling limb measurement"] = countMissingFalling
hystdict["HI values missing due to no raising and no falling limb measurement"] = countMissingBoth
HIs = []
HIsandInterp = []
for key, values in hystIndex.items():
if not 'Interpolated' in key:
if values:
HIs.append(values)
if values:
HIsandInterp.append(values)
if 'Hysteresis_Index' in hystdict:
if values:
hystdict['Hysteresis_Index'][key] = values
# print('HYST Index:' + key + ' val: ' + str(values))
elif values:
tmpdict = {}
tmpdict[key ] = values
hystdict['Hysteresis_Index'] = tmpdict
# 3print('tmpdict: ' + key + 'val: ' +str(values))
hystAvg = numpy.mean(HIs) #sum(values) / float(len(values))
hystStd = numpy.std(HIs)
hystAvgInterp = float('NaN')
hystStdInterp = float('NaN')
hystAvgInterp = numpy.mean(HIsandInterp) #sum(values) / float(len(values))
hystStdInterp = numpy.std(HIsandInterp)
hystdict["HI_count_and_interp"] = str(len(HIsandInterp))
hystdict["HI_mean"] = str(hystAvg)
hystdict["HI_standard_deviation"] = str(hystStd)
hystdict["HI_mean_with_Interp"] = str(hystAvgInterp)
hystdict["HI_standard_deviation_with_Interp"] = str(hystStdInterp)
return hystdict
from hysteresis_metrics import hysteresisMetrics
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
Sys.which("python")
use_python("/usr/bin/python")
library(tidyverse)
options(tz="America/Anchorage")
library(ggplot2)
library(gridExtra)
library(boot)
reticulate::repl_python()
VAUL.hyst.results.list = list(py$hysdict_VAUL_storm1a_06_19_NO3,
py$hysdict_VAUL_storm1a_06_19_fDOM,
py$hysdict_VAUL_storm1b_06_20_NO3,
py$hysdict_VAUL_storm1b_06_20_fDOM,
py$hysdict_VAUL_storm1c_06_22_NO3,
py$hysdict_VAUL_storm3_07_09_NO3,
py$hysdict_VAUL_storm3_07_09_fDOM,
py$hysdict_VAUL_storm4_07_12_NO3,
py$hysdict_VAUL_storm4_07_12_fDOM,
py$hysdict_VAUL_storm5_07_27_NO3,
py$hysdict_VAUL_storm5_07_27_fDOM,
py$hysdict_VAUL_storm6b_08_02_NO3,
py$hysdict_VAUL_storm6b_08_02_fDOM,
py$hysdict_VAUL_storm7_08_08_NO3,
py$hysdict_VAUL_storm7_08_08_fDOM,
py$hysdict_VAUL_storm8_08_11_NO3,
py$hysdict_VAUL_storm8_08_11_fDOM,
py$hysdict_VAUL_storm9_08_12_NO3,
py$hysdict_VAUL_storm9_08_12_fDOM,
py$hysdict_VAUL_storm10_08_25_NO3,
py$hysdict_VAUL_storm10_08_25_fDOM,
py$hysdict_VAUL_storm11_08_27_NO3,
py$hysdict_VAUL_storm11_08_27_fDOM,
py$hysdict_VAUL_storm12_09_01_NO3,
py$hysdict_VAUL_storm12_09_01_fDOM,
py$hysdict_VAUL_storm13_09_03_NO3,
py$hysdict_VAUL_storm13_09_03_fDOM,
py$hysdict_VAUL_storm14_09_06_NO3,
py$hysdict_VAUL_storm14_09_06_fDOM)
VAUL.hyst.results.list.2 = list()
for (i in 1:length(VAUL.hyst.results.list)){
VAUL.hyst.results.list.2[[i]] = as.data.frame(t(as.numeric(c(
VAUL.hyst.results.list[[i]][["HI_mean_with_Interp"]],
VAUL.hyst.results.list[[i]][["HI_standard_deviation_with_Interp"]],
VAUL.hyst.results.list[[i]][["Normalized slope of response"]],
VAUL.hyst.results.list[[i]][["interpolated Max width of response"]],
VAUL.hyst.results.list[[i]][["Min response"]],
VAUL.hyst.results.list[[i]][["Max response"]],
VAUL.hyst.results.list[[i]][["Peak Q"]]
))))
names(VAUL.hyst.results.list.2[[i]]) = c("HI_mean_Interp", "HI_sd_with_Interp", "N.S.", "Max_width_Interp", "Min_response", "Max_response", "Peak_Q")
}
HIs.list = list()
HIs.tests = list()
for (i in 1:length(VAUL.hyst.results.list)){
HIs.list[[i]] = unlist(VAUL.hyst.results.list[[i]][["Hysteresis_Index"]],recursive=FALSE)
HIs.tests[[i]] = as.data.frame(t(round(as.numeric(c(shapiro.test(HIs.list[[i]])$statistic, shapiro.test(HIs.list[[i]])$p.value,
t.test(HIs.list[[i]], mu=0)$statistic, t.test(HIs.list[[i]], mu=0)$p.value,
t.test(HIs.list[[i]], mu=0)$conf.int[1],t.test(HIs.list[[i]], mu=0)$conf.int[2],
wilcox.test(HIs.list[[i]], mu=0)$statistic, wilcox.test(HIs.list[[i]], mu=0)$p.value)), 4)))
names(HIs.tests[[i]]) = c("ShapiroTest.W", "ShapiroTest.p", "t.test.stat", "t.test.p", "t.test.CIlow", "t.test.CIhigh",
"wilcox.test.stat", "wilcox.test.p")
}
VAUL.hyst.results.list.3 =list()
for (i in 1:length(VAUL.hyst.results.list)){
VAUL.hyst.results.list.3[[i]] = cbind(VAUL.hyst.results.list.2[[i]], HIs.tests[[i]])
}
VAUL.hyst.results.df = bind_rows(VAUL.hyst.results.list.3, .id = "column_label")
VAUL.hyst.results.df$storm.ID = c("VAUL_storm1a_06_19_NO3",
"VAUL_storm1a_06_19_fDOM",
"VAUL_storm1b_06_20_NO3",
"VAUL_storm1b_06_20_fDOM",
"VAUL_storm1c_06_22_NO3",
"VAUL_storm3_07_09_NO3",
"VAUL_storm3_07_09_fDOM",
"VAUL_storm4_07_12_NO3",
"VAUL_storm4_07_12_fDOM",
"VAUL_storm5_07_27_NO3",
"VAUL_storm5_07_27_fDOM",
"VAUL_storm6b_08_02_NO3",
"VAUL_storm6b_08_02_fDOM",
"VAUL_storm7_08_08_NO3",
"VAUL_storm7_08_08_fDOM",
"VAUL_storm8_08_11_NO3",
"VAUL_storm8_08_11_fDOM",
"VAUL_storm9_08_12_NO3",
"VAUL_storm9_08_12_fDOM",
"VAUL_storm10_08_25_NO3",
"VAUL_storm10_08_25_fDOM",
"VAUL_storm11_08_27_NO3",
"VAUL_storm11_08_27_fDOM",
"VAUL_storm12_09_01_NO3",
"VAUL_storm12_09_01_fDOM",
"VAUL_storm13_09_03_NO3",
"VAUL_storm13_09_03_fDOM",
"VAUL_storm14_09_06_NO3",
"VAUL_storm14_09_06_fDOM")
VAUL.hyst.results.df$site.ID = "VAUL"
write.csv(VAUL.hyst.results.df, "/Users/jakecavaiani/Documents/DoD_Discharge/Output for analysis/VAUL.hyst.results.csv")
# plot HI by normalized discharge
HIs.Q.list =list()
HIs.df.list = list()
pdf("/Users/jakecavaiani/Documents/DoD_Discharge/Output for analysis/VAUL.hyst.HI_Q.plots.pdf", width = 25, height =15, onefile=FALSE)
par(mfrow=c(4,7))
for (i in 1:length(HIs.list)) {
HIs.Q.list[[i]] = names(HIs.list[[i]])
HIs.Q.list[[i]] = (sapply(strsplit(HIs.Q.list[[i]], " "), "[[", 4))
HIs.Q.list[[i]] = as.numeric(gsub("%", "", HIs.Q.list[[i]]))
HIs.df.list[[i]] = as.data.frame(cbind(HIs.list[[i]], HIs.Q.list[[i]]))
HIs.df.list[[i]]= HIs.df.list[[i]][order(HIs.df.list[[i]][["V2"]]),]
plot(HIs.df.list[[i]][["V1"]] ~ HIs.df.list[[i]][["V2"]], type="l",
ylab="norm.response", xlab="Q intervals", main= VAUL.hyst.results.df$storm.ID[i])
abline(h=0, lty=2)
}
## plot HI with bootstrapped 95% CIs around the median ##
HIs.Q.list =list()
HIs.df.list = list()
par(mfrow=c(1,1))
for (i in 1:length(HIs.list)) {
HIs.Q.list[[i]] = names(HIs.list[[i]])
HIs.Q.list[[i]] = (sapply(strsplit(HIs.Q.list[[i]], " "), "[[", 4))
HIs.Q.list[[i]] = as.numeric(gsub("%", "", HIs.Q.list[[i]]))
HIs.df.list[[i]] = as.data.frame(cbind(HIs.list[[i]], HIs.Q.list[[i]]))
HIs.df.list[[i]]= HIs.df.list[[i]][order(HIs.df.list[[i]][["V2"]]),]
names(HIs.df.list[[i]]) = c("HI", "Q_interval")
}
VAUL.HI.df = bind_rows(HIs.df.list, .id = "column_label")
VAUL.HI.df$storm.ID = c(rep("VAUL_storm1a_06_19_NO3", 50),
rep("VAUL_storm1a_06_19_fDOM", 50),
rep("VAUL_storm1b_06_20_NO3", 50),
rep("VAUL_storm1b_06_20_fDOM", 50),
rep("VAUL_storm1c_06_22_fDOM", 50),
rep("VAUL_storm3_07_09_NO3", 50),
rep("VAUL_storm3_07_09_fDOM", 50),
rep("VAUL_storm4_07_12_NO3", 50),
rep("VAUL_storm4_07_12_fDOM", 50),
rep("VAUL_storm5_07_27_NO3", 50),
rep("VAUL_storm5_07_27_fDOM", 50),
rep("VAUL_storm6b_08_02_NO3", 50),
rep("VAUL_storm6b_08_02_fDOM", 50),
rep("VAUL_storm7_08_08_NO3", 50),
rep("VAUL_storm7_08_08_fDOM", 50),
rep("VAUL_storm8_08_11_NO3", 50),
rep("VAUL_storm8_08_11_fDOM", 50),
rep("VAUL_storm9_08_12_NO3", 50),
rep("VAUL_storm9_08_12_fDOM", 50),
rep("VAUL_storm10_08_25_NO3", 50),
rep("VAUL_storm10_08_25_fDOM", 50),
rep("VAUL_storm11_08_27_NO3", 50),
rep("VAUL_storm11_08_27_fDOM", 50),
rep("VAUL_storm12_09_01_NO3", 50),
rep("VAUL_storm12_09_01_fDOM", 50),
rep("VAUL_storm13_09_03_NO3", 50),
rep("VAUL_storm13_09_03_fDOM", 50),
rep("VAUL_storm14_09_06_NO3", 50),
rep("VAUL_storm14_09_06_fDOM", 50))
VAUL.HI.df$storm.ID = as.factor(VAUL.HI.df$storm.ID)
VAUL.HI.df = separate(data=VAUL.HI.df, col=storm.ID, into=c("site.ID","storm.num", "month", "day", "response"), sep = "_", remove = F)
par(mfrow=c(1,1))
median_cl_boot <- function(x, conf = 0.95) {
lconf <- (1 - conf)/2
uconf <- 1 - lconf
require(boot)
bmedian <- function(x, ind) median(x[ind])
bt <- boot(x, bmedian, 10000)
bb <- boot.ci(bt, conf = 0.95, type = "perc")
data.frame(y = median(x), ymin = quantile(bt$t, lconf), ymax = quantile(bt$t,
uconf))
}
g0 <- ggplot(VAUL.HI.df, aes(x = month, y = HI, label=storm.num, fill=response))
g1 = g0 + geom_jitter(width = 0.1, fill = "grey", colour = "#0571B0", alpha=0.25, size=3) +
theme(axis.text.x = element_text(angle = 0))+  labs(x="") + facet_wrap(~ response, scales = "free_x") +
theme_bw() +geom_hline(yintercept=0) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.position = "none")
g2 <- g1 +
stat_summary(fun.data = median_cl_boot, geom = "errorbar",
colour = "black", width = 0.2, size=1) +
stat_summary(fun.y = median, geom = "point",
colour = "black", size = 3)
VAUL.HI.df$date <- as.Date(with(VAUL.HI.df, paste(month, day, sep = "-")), "%m-%d")
VAUL.HI.df$doy <- yday(VAUL.HI.df$date)
library(lubridate)
VAUL.HI.df$doy <- yday(VAUL.HI.df$date)
g0 <- ggplot(VAUL.HI.df, aes(x = doy, y = HI, label=doy, fill=response))
g1 = g0 + geom_jitter(width = 0.1, fill = "grey", colour = "#0571B0", alpha=0.25, size=3) +
theme(axis.text.x = element_text(angle = 0))+  labs(x="") + facet_wrap(~ response, scales = "free_x") +
theme_bw() +geom_hline(yintercept=0) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme(legend.position = "none")
g2 <- g1 +
stat_summary(fun.data = median_cl_boot, geom = "errorbar",
colour = "black", width = 0.2, size=1) +
stat_summary(fun.y = median, geom = "point",
colour = "black", size = 3)
ggsave("/Users/jakecavaiani/Documents/DoD_Discharge/Output for analysis/VAUL.HI.median.boot.doy.pdf", plot=g2, width = 8, height = 6, units ="in")
write.csv(VAUL.HI.df, "/Users/jakecavaiani/Documents/DoD_Discharge/Output for analysis/VAUL.HI.doy.df.csv")
VAUL_HI_doy_df <- read_csv("~/Documents/DoD_Discharge/VAUL.HI.doy.df.csv")
VAUL_HI_doy_df <- read_csv("Output for analysis/VAUL.HI.doy.df.csv")
library(readr)
VAUL_HI_doy_df <- read_csv("Output for analysis/VAUL.HI.doy.df.csv")
View(VAUL_HI_doy_df)
### TKH report ###
# Load in 2019 data #
POKE_HI_df_doy_2019 <- read_csv("~/Documents/DoD_2019/Storm Analysis/Output_from_analysis/POKE.HI.df.doy.2019.csv")
VAUL_HI_df_doy_2019 <- read_csv("~/Documents/DoD_2019/Storm Analysis/Output_from_analysis/VAUL.HI.df.doy.2019.csv")
MOOS_HI_df_doy_2019 <- read_csv("~/Documents/DoD_2019/Storm Analysis/Output_from_analysis/MOOS.HI.df.doy.2019.csv")
FRCH_HI_df_doy_2019 <- read_csv("~/Documents/DoD_2019/Storm Analysis/Output_from_analysis/FRCH.HI.df.doy.2019.csv")
STRT_HI_df_doy_2019 <- read_csv("~/Documents/DoD_2019/Storm Analysis/Output_from_analysis/STRT.HI.df.doy.2019.csv")
MOOS_HI_df <- read_csv("~/Documents/DoD_Discharge/Output for analysis/MOOS.HI.df.csv")
FRCH_HI_df <- read_csv("~/Documents/DoD_Discharge/Output for analysis/FRCH.HI.df.csv")
STRT_HI_df <- read_csv("~/Documents/DoD_Discharge/Output for analysis/STRT.HI.df.csv")
POKE_HI_df <- read_csv("~/Documents/DoD_Discharge/Output for analysis/POKE.HI.df.csv")
names(POKE_HI_df
)
names(STRT_HI_df)
STRT.HI.df$date <- as.Date(with(STRT.HI.df, paste(month, day, sep = "-")), "%m-%d")
STRT_HI_df$date <- as.Date(with(STRT_HI_df, paste(month, day, sep = "-")), "%m-%d")
names(FRCH_HI_df)
FRCH_HI_df$date <- as.Date(with(FRCH_HI_df, paste(month, day, sep = "-")), "%m-%d")
FRCH_HI_df$doy <- yday(FRCH_HI_df$date)
names(FRCH_HI_df)
names(MOOS_HI_df)
reticulate::repl_python()

WaterPressure < 98, NA, .))) # PT wasnt placed into the stream until 5/12
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-09-30" & DateTimeAK <= "2022-10-01" &
WaterPressure < 100, NA, .)))
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-10-15" &
WaterPressure < 99, NA, .)))
vaul.stream.two.2022 %>% ggplot( aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRkT5GIhFY4nLblzPi4Upc8y6Pk2k4vXLSGAkFyMhLowsCmct0fZ5rxm-vd85RfFr7YLrCuuSiOqQbL/pub?output=csv"
frch.stream.two.2022.url <-  "https://docs.google.com/spreadsheets/d/e/2PACX-1vRiDAbzBj_jHk1Hd3iM7fFvzMrRCSF9fbKTcmQD_dUFGOjoIQuBZBKV4KdNhfevLOq0Udch0LbWiKXw/pub?output=csv"
# load in url
frch.stream.one.2022 <- read.csv(url(frch.stream.one.2022.url), skip = 1)
frch.stream.two.2022 <- read.csv(url(frch.stream.two.2022.url), skip = 1)
# clean for merging purposes
frch.stream.one.2022 <- frch.stream.one.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(5:14)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
frch.stream.one.2022$DateTimeAK <- mdy_hms(frch.stream.one.2022$Date.Time..GMT.08.00)
frch.stream.two.2022$DateTimeAK <- mdy_hms(frch.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
frch.stream.one.2022$DateTimeAK <- lubridate::round_date(frch.stream.one.2022$DateTimeAK, "5 minutes")
frch.stream.two.2022$DateTimeAK <- lubridate::round_date(frch.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
frch.stream.one.2022 <- frch.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(2)] # removing columns that arent
names(frch.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(frch.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
# merge to one
frch.final.pressure.2022 <- left_join(frch.stream.one.2022, frch.stream.two.2022, by = c("DateTimeAK"))
frch.final.pressure.2022$MeanPressure <- rowMeans(frch.final.pressure.2022[,c(2,6)], na.rm = TRUE)
ggplot(frch.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-12", NA, .))) # PT wasnt placed into the stream until 5/12
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 102, NA, .))) # PT wasnt placed into the stream until 5/12
ggplot(frch.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
ggplot(frch.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.two.2022 <- frch.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 100, NA, .))) # PT wasnt placed into the stream until 5/12
ggplot(frch.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# Checking closeness between two PTs
atmo.pt.frch <- left_join(frch.stream.one.2022, frch.stream.two.2022, by = "DateTimeAK")
ggplot(aes(x = DateTimeAK, y = WaterPressure.x), data = atmo.pt.frch) +
geom_line(aes(x=DateTimeAK, y=WaterPressure.x), data = atmo.pt.frch, color="#A6CEE3") +
geom_line(aes(x=DateTimeAK, y=WaterPressure.y), data = atmo.pt.frch, color="#FF7F00") +
theme_classic() +
ggtitle("FRCH PT1(blue) & FRCH PT2(orange) Water Pressure")
## Read in CPCRW CREEL BP data
cpcrw.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR7DLJERDJGFDistGp-upukzyBQ0qKGzD3QF7TphAs_K_bvDJ7eAFrIqJW_v7mTVmqbRbl62pfjP0XR/pub?output=csv"
cpcrw.atmo.2022 <- read.csv(url(cpcrw.atmo.2022.url), skip = 6)
names(cpcrw.atmo.2022) <- c("DateTimeAK", "AirPressure_mbar")
View(cpcrw.atmo.2022)
# Convert to mPa
cpcrw.atmo.2022$AirPressure <- cpcrw.atmo.2022$AirPressure_mbar*.1
cpcrw.atmo.2022 %>% ggplot(aes(DateTimeAK, AirPressure)) + geom_point()
# Load packages #
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(birk)
cpcrw.atmo.2022 %>% ggplot(aes(DateTimeAK, AirPressure)) + geom_point()
## Read in CPCRW CREEL BP data
cpcrw.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSUsd5pTS0k_J67u3VrmKSsV591Hpcoe41hU4G_BIKzp4ztgPCZZqlEBQ98J0smD6iB40e0l36CRopc/pub?output=csv"
cpcrw.atmo.2022 <- read.csv(url(cpcrw.atmo.2022.url), skip = 6)
names(cpcrw.atmo.2022) <- c("DateTimeAK", "AirPressure_BCEF_mbar", "AirPressure_met_adj_mbar",  "AirPressure_met_avg_mbar")
cpcrw.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSUsd5pTS0k_J67u3VrmKSsV591Hpcoe41hU4G_BIKzp4ztgPCZZqlEBQ98J0smD6iB40e0l36CRopc/pub?output=csv"
cpcrw.atmo.2022 <- read.csv(url(cpcrw.atmo.2022.url), skip = 6)
names(cpcrw.atmo.2022) <- c("DateTimeAK", "AirPressure_BCEF", "AirPressure_met_adj",  "AirPressure_met_avg")
cpcrw.atmo$AirPressure_BCEF <- cpcrw.atmo$AirPressure_BCEF*.1
cpcrw.atmo$AirPressure_met_adj <- cpcrw.atmo$AirPressure_met_adj*.1
cpcrw.atmo$AirPressure_met_avg <- cpcrw.atmo$AirPressure_met_avg*.1
cpcrw.atmo.2022$AirPressure_BCEF <- cpcrw.atmo$AirPressure_BCEF*.1
cpcrw.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSUsd5pTS0k_J67u3VrmKSsV591Hpcoe41hU4G_BIKzp4ztgPCZZqlEBQ98J0smD6iB40e0l36CRopc/pub?output=csv"
cpcrw.atmo.2022 <- read.csv(url(cpcrw.atmo.2022.url), skip = 6)
names(cpcrw.atmo.2022) <- c("DateTimeAK", "AirPressure_BCEF", "AirPressure_met_adj",  "AirPressure_met_avg")
cpcrw.atmo.2022$AirPressure_BCEF <- cpcrw.atmo.2022$AirPressure_BCEF*.1
cpcrw.atmo.2022$AirPressure_met_adj <- cpcrw.atmo.2022$AirPressure_met_adj*.1
cpcrw.atmo.2022$AirPressure_met_avg <- cpcrw.atmo.2022$AirPressure_met_avg*.1
cpcrw.atmo.2022 %>% ggplot(aes(DateTimeAK, AirPressure_BCEF)) + geom_point()
cpcrw.atmo.2022 %>% ggplot(aes(DateTimeAK, AirPressure_met_adj)) + geom_point()
cpcrw.atmo.2022 %>% ggplot(aes(DateTimeAK, AirPressure_met_avg)) + geom_point()
cpcrw.atmo.2022 %>% ggplot(aes(DateTimeAK, AirPressure_BCEF)) + geom_point()
# Import data from google drive #
discharge.2022 <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQR6HHHDpnxc6DmNHfdNLR9-dgDHR5Imt0Ve4_t2DzIF18_8D3O2da5zcWQzJUSoFQfaetPZDeXZ610/pub?gid=0&single=true&output=csv"
QSummary.2022 <- read.csv(url(discharge.2022))
### Format Time ###
QSummary.2022$Date <- mdy(QSummary.2022$Date)
QSummary.2022$DateTimeAK <- as.POSIXct(paste(QSummary.2022$Date, QSummary.2022$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
QSummary.2022$DateTimeAK <- lubridate::round_date(QSummary.2022$DateTimeAK, "60 minutes")
### ALL Sites ###
QSummary.2022 %>% ggplot() +
geom_point(aes(x=DateTimeAK, y=MeasuredQ_Ls, color=Site, shape=Method), size=3) +
theme_classic() +
scale_color_manual(values=c("#FF7F00","#A6761D", "#6A3D9A", "#66C2A5", "#E7298A")) + ggtitle("ALL SITES")
eielson.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQjJbkVdOseFUsTFMDXaHRoKkPiFt6Uvc-9R3tkFZxKFjqSmPPgZzexdbhezBr_qYgGUdVN6ywYR28c/pub?output=csv"
eielson.atmo.2022 <- read.csv(url(eielson.atmo.2022.url), skip = 6)
eielson.atmo.2022 <- eielson.atmo.2022[-1,]
names(eielson.atmo.2022) <- c("Site", "DateTimeAK", "sea_level_pressure", "AirPressure")
eielson.atmo.2022$DateTimeAK <- mdy_hm(eielson.atmo.2022$DateTimeAK)
eielson.atmo.2022$DateTimeAK <- lubridate::round_date(eielson.atmo.2022$DateTimeAK, "15 minutes")
eielson.atmo.2022$DateTimeAK <- force_tz(eielson.atmo.2022$DateTimeAK, "America/Anchorage")
eielson.atmo.2022$AirPressure <- as.numeric(eielson.atmo.2022$AirPressure)
eielson.atmo.2022$AirPressure <- eielson.atmo.2022$AirPressure*3.38639 # converting from inHG to kPa
### POKE ####
poke.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR8p1pdbkQBMo54XaZinGwxyzojCnlkXeZid3EFvmt9v31PFvpsa1DlWClj8aG0kkJIuU57WXl-cq7Q/pub?output=csv"
poke.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR-wJjf3rO8eC7bMpQZgwqFLHFQpf5qCInyWtUF1PqaCB8Z_EoM1cTHRUmWypjftREIx1rP0V6zYJxL/pub?output=csv"
# load in url
poke.stream.one.2022 <- read.csv(url(poke.stream.one.2022.url), skip = 1)
poke.stream.two.2022 <- read.csv(url(poke.stream.two.2022.url), skip = 1)
# cleaning df to be able to interpret and merge
poke.stream.one.2022 <- poke.stream.one.2022[, -c(5:18)] # removing columns that arent date/abs pressure and temp
poke.stream.two.2022 <- poke.stream.two.2022[, -c(5:9)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
poke.stream.one.2022$DateTimeAK <- mdy_hms(poke.stream.one.2022$Date.Time..GMT.08.00)
poke.stream.two.2022$DateTimeAK <- mdy_hms(poke.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
poke.stream.one.2022$DateTimeAK <- lubridate::round_date(poke.stream.one.2022$DateTimeAK, "5 minutes")
poke.stream.two.2022$DateTimeAK <- lubridate::round_date(poke.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
poke.stream.one.2022 <- poke.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
poke.stream.two.2022 <- poke.stream.two.2022[, -c(2)] # removing columns that arent
names(poke.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(poke.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
#adjusting/cleaning poke.stream.one
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-18", NA, .))) # PT wasnt placed into the stream until 5/17
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-27" & DateTimeAK <= "2022-08-31" & WaterPressure < 98.3, NA, .))) %>% filter( DateTimeAK <= "2022-10-07 15:30:00")
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-10-05" & DateTimeAK <= "2022-10-07" & WaterPressure < 98, NA, .)))
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
poke.stream.two.2022 <- poke.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-09-17" & WaterPressure < 98, NA, .))) %>%
filter(DateTimeAK <= "2022-10-07 15:35:00")
ggplot(poke.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# merge to one
poke.final.pressure.2022 <- left_join(poke.stream.one.2022, poke.stream.two.2022, by = c("DateTimeAK"))
poke.final.pressure.2022$MeanPressure <- rowMeans(poke.final.pressure.2022[,c(2,6)], na.rm = TRUE)
poke.final.pressure.2022 %>% ggplot() + geom_point(aes(DateTimeAK, WaterPressure.x)) + geom_point(aes(DateTimeAK, WaterPressure.y), color = "red")
## It looks like we should use PT2 before August 1st and PT1 after August 1st
poke.final.pressure.2022 <- poke.final.pressure.2022 %>%
mutate(WaterPressure.merged = ifelse(DateTimeAK <= "2022-08-01", WaterPressure.x, WaterPressure.y))
any(!is.na(poke.final.pressure.2022$WaterPressure.merged))
poke.final.pressure.2022 %>% ggplot() + geom_point(aes(DateTimeAK, WaterPressure.merged))
POKE.2022 <- left_join(eielson.atmo.2022.compare, poke.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
POKE.2022$difference <- POKE.2022$WaterPressure.merged - POKE.2022$AirPressureCorrectedPOKE
POKE.2022 <-  POKE.2022[ , -which(names(POKE.2022) %in% c("WaterPressure.x","TempC.x", "Site.y", "WaterPressure.y", "TempC.y"))] # removing columns I do not need
names(POKE.2022)[names(POKE.2022) == 'Site.x'] <- 'Site'
POKE.2022$Site <- "POKE"
POKE.2022 <- left_join(eielson.atmo.2022.compare, poke.final.pressure.2022, by = "DateTimeAK")
eielson.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQjJbkVdOseFUsTFMDXaHRoKkPiFt6Uvc-9R3tkFZxKFjqSmPPgZzexdbhezBr_qYgGUdVN6ywYR28c/pub?output=csv"
eielson.atmo.2022 <- read.csv(url(eielson.atmo.2022.url), skip = 6)
eielson.atmo.2022 <- eielson.atmo.2022[-1,]
names(eielson.atmo.2022) <- c("Site", "DateTimeAK", "sea_level_pressure", "AirPressure")
eielson.atmo.2022$DateTimeAK <- mdy_hm(eielson.atmo.2022$DateTimeAK)
eielson.atmo.2022$DateTimeAK <- lubridate::round_date(eielson.atmo.2022$DateTimeAK, "15 minutes")
eielson.atmo.2022$DateTimeAK <- force_tz(eielson.atmo.2022$DateTimeAK, "America/Anchorage")
eielson.atmo.2022$AirPressure <- as.numeric(eielson.atmo.2022$AirPressure)
eielson.atmo.2022$AirPressure <- eielson.atmo.2022$AirPressure*3.38639 # converting from inHG to kPa
# MOOS elevation is 574 feet
# POKE 760.96
# STRT 820 ft
# FRCH 601 ft
# VAUL 688.8 ft
# compare Eielson and MOOS atmospheric pressure
eielson.atmo.2022.compare <- eielson.atmo.2022
eielson.atmo.2022.compare$sea_level_pressure <- as.numeric(eielson.atmo.2022.compare$sea_level_pressure)
eielson.atmo.2022.compare$mmHG <- eielson.atmo.2022.compare$sea_level_pressure * 25.44 # converting to mmHG
# conversion to elevation at each site
# MOOS
eielson.atmo.2022.compare$mmHGcorrectedMOOS <- eielson.atmo.2022.compare$mmHG - (2.5*574/100)
eielson.atmo.2022.compare$AirPressureCorrectedMOOS <- eielson.atmo.2022.compare$mmHGcorrectedMOOS * 0.133322 # converting this to kPA to compare with MOOS PT
# POKE
eielson.atmo.2022.compare$mmHGcorrectedPOKE <- eielson.atmo.2022.compare$mmHG - (2.5*760.96/100)
eielson.atmo.2022.compare$AirPressureCorrectedPOKE <- eielson.atmo.2022.compare$mmHGcorrectedPOKE * 0.133322 # converting this to kPA
# STRT
eielson.atmo.2022.compare$mmHGcorrectedSTRT <- eielson.atmo.2022.compare$mmHG - (2.5*820/100)
eielson.atmo.2022.compare$AirPressureCorrectedSTRT <- eielson.atmo.2022.compare$mmHGcorrectedSTRT * 0.133322 # converting this to kPA
# FRCH
eielson.atmo.2022.compare$mmHGcorrectedFRCH <- eielson.atmo.2022.compare$mmHG - (2.5*601/100)
eielson.atmo.2022.compare$AirPressureCorrectedFRCH <- eielson.atmo.2022.compare$mmHGcorrectedFRCH * 0.133322 # converting this to kPA
# VAUL
eielson.atmo.2022.compare$mmHGcorrectedVAUL <- eielson.atmo.2022.compare$mmHG - (2.5*688.8/100)
eielson.atmo.2022.compare$AirPressureCorrectedVAUL <- eielson.atmo.2022.compare$mmHGcorrectedVAUL * 0.133322 # converting this to kPA
POKE.2022 <- left_join(eielson.atmo.2022.compare, poke.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
POKE.2022$difference <- POKE.2022$WaterPressure.merged - POKE.2022$AirPressureCorrectedPOKE
POKE.2022 <-  POKE.2022[ , -which(names(POKE.2022) %in% c("WaterPressure.x","TempC.x", "Site.y", "WaterPressure.y", "TempC.y"))] # removing columns I do not need
names(POKE.2022)[names(POKE.2022) == 'Site.x'] <- 'Site'
POKE.2022$Site <- "POKE"
### Filter POKE ###
QSummary.PO.2022 <- QSummary.2022 %>% filter(Site =="POKE")
ggplot(QSummary.PO.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#6A3D9A")) +
ggtitle("POKE")
# trying to merge by nearest date if we have an offset point
POKE.2022.dt <- setDT(POKE.2022)
POKE.2022.dt <- subset(POKE.2022.dt, DateTimeAK < "2022-08-29 07:45:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.PO.2022.dt <- QSummary.PO.2022
Poker1comb.2022 <- POKE.2022.dt[QSummary.PO.2022.dt, on = "DateTimeAK", roll = 'nearest']
Poker1comb.2022[15,9] <- 0.2580529
POKE1.lm.2022 <- lm(Poker1comb.2022$MeasuredQ_Ls ~ Poker1comb.2022$difference)
### Rating Curve ###
poke.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Poker1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = poke.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
# xlim(-2, 2) +
#ylim(0,1500) +
theme_light() +
ggtitle("Poker all measured Q")
frch.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRkT5GIhFY4nLblzPi4Upc8y6Pk2k4vXLSGAkFyMhLowsCmct0fZ5rxm-vd85RfFr7YLrCuuSiOqQbL/pub?output=csv"
frch.stream.two.2022.url <-  "https://docs.google.com/spreadsheets/d/e/2PACX-1vRiDAbzBj_jHk1Hd3iM7fFvzMrRCSF9fbKTcmQD_dUFGOjoIQuBZBKV4KdNhfevLOq0Udch0LbWiKXw/pub?output=csv"
# load in url
frch.stream.one.2022 <- read.csv(url(frch.stream.one.2022.url), skip = 1)
frch.stream.two.2022 <- read.csv(url(frch.stream.two.2022.url), skip = 1)
# clean for merging purposes
frch.stream.one.2022 <- frch.stream.one.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(5:14)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
frch.stream.one.2022$DateTimeAK <- mdy_hms(frch.stream.one.2022$Date.Time..GMT.08.00)
frch.stream.two.2022$DateTimeAK <- mdy_hms(frch.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
frch.stream.one.2022$DateTimeAK <- lubridate::round_date(frch.stream.one.2022$DateTimeAK, "5 minutes")
frch.stream.two.2022$DateTimeAK <- lubridate::round_date(frch.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
frch.stream.one.2022 <- frch.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(2)] # removing columns that arent
names(frch.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(frch.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
# merge to one
frch.final.pressure.2022 <- left_join(frch.stream.one.2022, frch.stream.two.2022, by = c("DateTimeAK"))
frch.final.pressure.2022$MeanPressure <- rowMeans(frch.final.pressure.2022[,c(2,6)], na.rm = TRUE)
ggplot(frch.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-12", NA, .))) # PT wasnt placed into the stream until 5/12
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 102, NA, .))) # PT wasnt placed into the stream until 5/12
ggplot(frch.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
ggplot(frch.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.two.2022 <- frch.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 100, NA, .))) # PT wasnt placed into the stream until 5/12
ggplot(frch.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# Checking closeness between two PTs
atmo.pt.frch <- left_join(frch.stream.one.2022, frch.stream.two.2022, by = "DateTimeAK")
ggplot(aes(x = DateTimeAK, y = WaterPressure.x), data = atmo.pt.frch) +
geom_line(aes(x=DateTimeAK, y=WaterPressure.x), data = atmo.pt.frch, color="#A6CEE3") +
geom_line(aes(x=DateTimeAK, y=WaterPressure.y), data = atmo.pt.frch, color="#FF7F00") +
theme_classic() +
ggtitle("FRCH PT1(blue) & FRCH PT2(orange) Water Pressure")
frch.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRkT5GIhFY4nLblzPi4Upc8y6Pk2k4vXLSGAkFyMhLowsCmct0fZ5rxm-vd85RfFr7YLrCuuSiOqQbL/pub?output=csv"
frch.stream.two.2022.url <-  "https://docs.google.com/spreadsheets/d/e/2PACX-1vRiDAbzBj_jHk1Hd3iM7fFvzMrRCSF9fbKTcmQD_dUFGOjoIQuBZBKV4KdNhfevLOq0Udch0LbWiKXw/pub?output=csv"
# load in url
frch.stream.one.2022 <- read.csv(url(frch.stream.one.2022.url), skip = 1)
frch.stream.two.2022 <- read.csv(url(frch.stream.two.2022.url), skip = 1)
# clean for merging purposes
frch.stream.one.2022 <- frch.stream.one.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(5:14)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
frch.stream.one.2022$DateTimeAK <- mdy_hms(frch.stream.one.2022$Date.Time..GMT.08.00)
frch.stream.two.2022$DateTimeAK <- mdy_hms(frch.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
frch.stream.one.2022$DateTimeAK <- lubridate::round_date(frch.stream.one.2022$DateTimeAK, "15 minutes")
frch.stream.two.2022$DateTimeAK <- lubridate::round_date(frch.stream.two.2022$DateTimeAK, "15 minutes")
# cleaning off original datetime
frch.stream.one.2022 <- frch.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(2)] # removing columns that arent
names(frch.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(frch.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
# merge to one
frch.final.pressure.2022 <- left_join(frch.stream.one.2022, frch.stream.two.2022, by = c("DateTimeAK"))
frch.final.pressure.2022$MeanPressure <- rowMeans(frch.final.pressure.2022[,c(2,6)], na.rm = TRUE)
ggplot(frch.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-12", NA, .))) # PT wasnt placed into the stream until 5/12
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 102, NA, .))) # PT wasnt placed into the stream until 5/12
ggplot(frch.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
ggplot(frch.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.two.2022 <- frch.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 100, NA, .))) # PT wasnt placed into the stream until 5/12
ggplot(frch.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# Checking closeness between two PTs
atmo.pt.frch <- left_join(frch.stream.one.2022, frch.stream.two.2022, by = "DateTimeAK")
ggplot(aes(x = DateTimeAK, y = WaterPressure.x), data = atmo.pt.frch) +
geom_line(aes(x=DateTimeAK, y=WaterPressure.x), data = atmo.pt.frch, color="#A6CEE3") +
geom_line(aes(x=DateTimeAK, y=WaterPressure.y), data = atmo.pt.frch, color="#FF7F00") +
theme_classic() +
ggtitle("FRCH PT1(blue) & FRCH PT2(orange) Water Pressure")
frch.final.pressure.2022 <- frch.stream.one.2022
frch.final.pressure.2022 <- frch.stream.one.2022
# join the two atmospheric and water pressure together
FRCH.2022 <- left_join(eielson.atmo.2022.compare, frch.final.pressure.2022, by = "DateTimeAK")
View(frch.final.pressure.2022)
# Water pressure - atmospheric pressure
FRCH.2022$difference <- FRCH.2022$WaterPressure - FRCH.2022$AirPressureCorrectedFRCH
View(FRCH.2022)
names(FRCH.2022)[names(FRCH.2022) == 'Site.x'] <- 'Site'
FRCH.2022$Site <- "FRCH"
### Filter FRCH ###
QSummary.FR.2022 <- QSummary.2022 %>% filter(Site =="FRCH")
ggplot(QSummary.FR.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#FF7F00")) +
ggtitle("FRCH")
# trying to merge by nearest date if we have an offset point
FRCH.2022.dt <- setDT(FRCH.2022)
FRCH.2022.dt <- subset(FRCH.2022.dt, DateTimeAK < "2022-08-31 03:00:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.FR.2022.dt <- QSummary.FR.2022
French1comb.2022 <- FRCH.2022.dt[QSummary.FR.2022.dt, on = "DateTimeAK", roll = 'nearest']
FRCH1.lm.2022 <- lm(French1comb.2022$MeasuredQ_Ls ~ French1comb.2022$difference)
# rating curve #
frch.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = French1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = frch.formula) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
#xlim(216, 216.4) +
#ylim(0,1500) +
theme_light() +
ggtitle("French1 all measured Q")
vaul.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQf78OhtBtjvs6HmnEVPJ0PVYSlpIjVAom5VIv12LhZDMbezaFb-LJCGMZUoyVjLJI-pqizM-Be2hbl/pubhtml"
vaul.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSR7qqdF5BXklT1ocG9bLLUwJ07ha8qmzAVRPaUjm7mUq12VptmViI9NJcW1-jO4cu0KtHBLl90A4DZ/pub?output=csv"
# load in url
#vaul.stream.one.2022 <- read.csv(url(vaul.stream.one.2022.url), skip = 1)
vaul.stream.two.2022 <- read.csv(url(vaul.stream.two.2022.url), skip = 1)
# clean for merging purposes
#vaul.stream.one.2022 <- vaul.stream.one.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
vaul.stream.two.2022 <- vaul.stream.two.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
#vaul.stream.one.2022$DateTimeAK <- mdy_hms(vaul.stream.one.2022$Date.Time..GMT.08.00)
vaul.stream.two.2022$DateTimeAK <- mdy_hms(vaul.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
#vaul.stream.one.2022$DateTimeAK <- lubridate::round_date(vaul.stream.one.2022$DateTimeAK, "5 minutes")
vaul.stream.two.2022$DateTimeAK <- lubridate::round_date(vaul.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
#vaul.stream.one.2022 <- vaul.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
vaul.stream.two.2022 <- vaul.stream.two.2022[, -c(2)] # removing columns that arent
#names(vaul.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(vaul.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
ggplot(vaul.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-26", NA, .))) # PT wasnt placed into the stream until 5/26
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-15" & DateTimeAK <= "2022-08-31" &
WaterPressure < 98, NA, .))) # PT wasnt placed into the stream until 5/12
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-09-30" & DateTimeAK <= "2022-10-01" &
WaterPressure < 100, NA, .)))
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-10-15" &
WaterPressure < 99, NA, .)))
vaul.stream.two.2022 %>% ggplot( aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# join the two atmospheric and water pressure together
vaul.final.pressure.2022 <- vaul.stream.two.2022
VAUL.2022 <- left_join(eielson.atmo.2022.compare, vaul.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
VAUL.2022$difference <- VAUL.2022$WaterPressure - VAUL.2022$AirPressureCorrectedVAUL
VAUL.2022 <-  VAUL.2022[ , -which(names(VAUL.2022) %in% c("TempC"))] # removing columns I do not need
VAUL.2022$Site <- "VAUL"
### Filter VAUL ###
QSummary.VA.2022 <- QSummary.2022 %>% filter(Site =="VAUL")
ggplot(QSummary.VA.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#E7298A")) +
ggtitle("VAUL")
# trying to merge by nearest date if we have an offset point
VAUL.2022.dt <- setDT(VAUL.2022)
VAUL.2022.dt <- subset(VAUL.2022.dt, DateTimeAK < "2022-08-29 04:00:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.VA.2022.dt <- QSummary.VA.2022
Vault1comb.2022 <- VAUL.2022.dt[QSummary.VA.2022.dt, on = "DateTimeAK", roll = 'nearest']
VAUL1.lm.2022 <- lm(Vault1comb.2022$MeasuredQ_Ls ~ Vault1comb.2022$difference)
vaul.stream.two.2022 %>% ggplot( aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
ggplot(cpcrw.atmo.2022, aes(DateTImeAK, AirPressure_met_adj)) + geom_point(color = "red") + geom_point(eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
ggplot(cpcrw.atmo.2022, aes(DateTImeAK, AirPressure_met_adj)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
ggplot(cpcrw.atmo.2022, aes(DateTimeAK, AirPressure_met_adj)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
ggplot(cpcrw.atmo.2022, aes(DateTimeAK, AirPressure_met_adj)) + geom_point(color = "red")
ggplot() + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
```
ggplot(cpcrw.atmo.2022, aes(DateTimeAK, AirPressure_met_adj)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
cpcrw.atmo.2022 %>% mutate(AirPressureCorrectedPOKEggplot = AirPressure_met_adj) %>% ggplot( aes(DateTimeAK, AirPressureCorrectedPOKE)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
cpcrw.atmo.2022 %>% mutate(AirPressureCorrectedPOKE = AirPressure_met_adj) %>% ggplot( aes(DateTimeAK, AirPressureCorrectedPOKE)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
cpcrw.atmo.2022 %>% mutate(AirPressureCorrectedPOKE = AirPressure_met_adj) %>% ggplot( aes(DateTimeAK, AirPressureCorrectedPOKE)) + geom_point(color = "red")
cpcrw.atmo.2022 %>% mutate(AirPressureCorrectedPOKE = AirPressure_met_adj) %>% ggplot( aes(DateTimeAK, AirPressureCorrectedPOKE)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
View(eielson.atmo.2022.compare)
#CPCRW data is no good
airpressure <- join(cpcrw.atmo.2022, eielson.atmo.2022.compare)
#CPCRW data is no good
airpressure <- full_join(cpcrw.atmo.2022, eielson.atmo.2022.compare)
cpcrw.atmo.2022$DateTimeAK <- mdy_hm(cpcrw.atmo.2022$DateTimeAK)
cpcrw.atmo.2022$DateTimeAK <- lubridate::round_date(cpcrw.atmo.2022$DateTimeAK, "15 minutes")
# Convert to mPa
cpcrw.atmo.2022$AirPressure_BCEF <- cpcrw.atmo.2022$AirPressure_BCEF*.1
cpcrw.atmo.2022$AirPressure_met_adj <- cpcrw.atmo.2022$AirPressure_met_adj*.1
cpcrw.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSUsd5pTS0k_J67u3VrmKSsV591Hpcoe41hU4G_BIKzp4ztgPCZZqlEBQ98J0smD6iB40e0l36CRopc/pub?output=csv"
cpcrw.atmo.2022 <- read.csv(url(cpcrw.atmo.2022.url), skip = 6)
names(cpcrw.atmo.2022) <- c("DateTimeAK", "AirPressure_BCEF", "AirPressure_met_adj",  "AirPressure_met_avg")
cpcrw.atmo.2022$DateTimeAK <- mdy_hm(cpcrw.atmo.2022$DateTimeAK)
cpcrw.atmo.2022$DateTimeAK <- lubridate::round_date(cpcrw.atmo.2022$DateTimeAK, "15 minutes")
# Convert to mPa
cpcrw.atmo.2022$AirPressure_BCEF <- cpcrw.atmo.2022$AirPressure_BCEF*.1
cpcrw.atmo.2022$AirPressure_met_adj <- cpcrw.atmo.2022$AirPressure_met_adj*.1
cpcrw.atmo.2022$AirPressure_met_avg <- cpcrw.atmo.2022$AirPressure_met_avg*.1
cpcrw.atmo.2022 %>% mutate(AirPressureCorrectedPOKE = AirPressure_met_adj) %>% ggplot( aes(DateTimeAK, AirPressureCorrectedPOKE)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
cpcrw.atmo.2022 %>% filter(DateTimeAK > 2022-05-01) %>% mutate(AirPressureCorrectedPOKE = AirPressure_met_adj) %>% ggplot( aes(DateTimeAK, AirPressureCorrectedPOKE)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
cpcrw.atmo.2022 %>% filter(DateTimeAK > 2022-05-01) %>% mutate(AirPressureCorrectedPOKE = AirPressure_met_adj) %>% ggplot( aes(DateTimeAK, AirPressureCorrectedPOKE)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE)) + xlim(2022-05-01, 2022-10-20)
cpcrw.atmo.2022 %>% filter(DateTimeAK > 2022-05-01) %>% mutate(AirPressureCorrectedPOKE = AirPressure_met_adj) %>% ggplot( aes(DateTimeAK, AirPressureCorrectedPOKE)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE)) + xlim("2022-05-01", "2022-10-20")
cpcrw.atmo.2022 %>% mutate(AirPressureCorrectedPOKE = AirPressure_met_adj) %>% ggplot( aes(DateTimeAK, AirPressureCorrectedPOKE)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
cpcrw.atmo.2022 %>% mutate(AirPressureCorrectedPOKE = AirPressure_met_avg) %>% ggplot( aes(DateTimeAK, AirPressureCorrectedPOKE)) + geom_point(color = "red") + geom_point(data = eielson.atmo.2022.compare, aes(DateTimeAK, AirPressureCorrectedPOKE))
# Load in water pressure data
# urls
moos.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQ7QMNWjVX1R43qflIW7lVqkj7wRHouhgQhWK76kfR8zK-UZg9bFSm92ccPy8T0luhFHKwsLNQQjA56/pub?output=csv"
moos.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRo04g32Yr3DsZbXQiw6VTPfgWuWq5csh1VhxfMy3IT3U6OkJOGvTlofjXwFfugiaRVJ34pPnOUZ3te/pub?output=csv"
moos.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQRXmAtoP_7I2RYEDZrdCT1LDyD8W3Thjst549srxdlWDMUYUyBjiGABd8pgtZE9Efa8b4Vgb3qtyoc/pub?output=csv"
# load in data
moos.atmo.2022 <- read.csv(url(moos.atmo.2022.url), skip = 1)
moos.stream.one.2022 <- read.csv(url(moos.stream.one.2022.url), skip = 1)
moos.stream.two.2022 <- read.csv(url(moos.stream.two.2022.url), skip = 1)
# cleaning df to be able to interpret and merge
moos.atmo.2022 <- moos.atmo.2022[, -c(5:11)] # removing columns that aren't date/abs pressure and temp
moos.stream.one.2022 <- moos.stream.one.2022[, -c(5:13)] # removing columns that aren't date/abs pressure and temp
moos.stream.two.2022 <- moos.stream.two.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
# changing datetime to AK time
moos.atmo.2022$DateTimeAK <- mdy_hms(moos.atmo.2022$Date.Time..GMT.08.00)

MOOS.2022$Site <- "MOOS"
### Plot MOOS measured Q
QSummary.MO.2022 <- QSummary.2022 %>% filter(Site =="MOOS")
ggplot(QSummary.MO.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#A6761D")) +
ggtitle("MOOS")
# trying to merge by nearest date if we have an offset point
MOOS.2022.dt <- setDT(MOOS.2022)
MOOS.2022.dt <- subset(MOOS.2022.dt, DateTimeAK < "2022-08-31 06:00:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.MO.2022.dt <- QSummary.MO.2022
Moose1comb.2022 <- MOOS.2022.dt[QSummary.MO.2022.dt, on = "DateTimeAK", roll = 'nearest']
# Remove very low Q points
Moose1comb.2022 <- Moose1comb.2022[-c(4:6),]
## ONLY using PT 2
MOOS1.lm.2022 <- lm(Moose1comb.2022$MeasuredQ_Ls ~ Moose1comb.2022$difference)
summary(MOOS1.lm.2022)
# plot rating curve
moos.formula = y~x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Moose1comb.2022) +
geom_point(aes(color = DateTimeAK, shape = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = moos.formula) +
stat_poly_eq(formula = moos.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Moose all measured Q")
### POKE ####
poke.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR8p1pdbkQBMo54XaZinGwxyzojCnlkXeZid3EFvmt9v31PFvpsa1DlWClj8aG0kkJIuU57WXl-cq7Q/pub?output=csv"
poke.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR-wJjf3rO8eC7bMpQZgwqFLHFQpf5qCInyWtUF1PqaCB8Z_EoM1cTHRUmWypjftREIx1rP0V6zYJxL/pub?output=csv"
# load in url
poke.stream.one.2022 <- read.csv(url(poke.stream.one.2022.url), skip = 1)
poke.stream.two.2022 <- read.csv(url(poke.stream.two.2022.url), skip = 1)
# cleaning df to be able to interpret and merge
poke.stream.one.2022 <- poke.stream.one.2022[, -c(5:18)] # removing columns that arent date/abs pressure and temp
poke.stream.two.2022 <- poke.stream.two.2022[, -c(5:9)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
poke.stream.one.2022$DateTimeAK <- mdy_hms(poke.stream.one.2022$Date.Time..GMT.08.00)
poke.stream.two.2022$DateTimeAK <- mdy_hms(poke.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
poke.stream.one.2022$DateTimeAK <- lubridate::round_date(poke.stream.one.2022$DateTimeAK, "5 minutes")
poke.stream.two.2022$DateTimeAK <- lubridate::round_date(poke.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
poke.stream.one.2022 <- poke.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
poke.stream.two.2022 <- poke.stream.two.2022[, -c(2)] # removing columns that arent
names(poke.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(poke.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
#adjusting/cleaning poke.stream.one
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-18", NA, .))) # PT wasnt placed into the stream until 5/17
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-27" & DateTimeAK <= "2022-08-31" & WaterPressure < 98.3, NA, .)))
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# plot(poke.stream.one.2022$DateTime, poke.stream.one.2022$WaterPressure,
#      xlim = as.POSIXct(c("2022-08-27 00:00:00", "2022-08-31 00:00:00")),
#      ylim = c(97, 99))
ggplot(poke.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
poke.stream.two.2022 <- poke.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-09-17" & WaterPressure < 98, NA, .)))
ggplot(poke.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
poke.stream.two.2022 <- poke.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-09-17" & WaterPressure < 98, NA, .))) %>%
filter(DateTimeAK <= "2022-10-07 15:35:00")
ggplot(poke.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# merge to one
poke.final.pressure.2022 <- left_join(poke.stream.one.2022, poke.stream.two.2022, by = c("DateTimeAK"))
poke.final.pressure.2022$MeanPressure <- rowMeans(poke.final.pressure.2022[,c(2,6)], na.rm = TRUE)
poke.final.pressure.2022 %>% ggplot() + geom_point(aes(DateTimeAK, WaterPressure.x)) + geom_point(aes(DateTimeAK, WaterPressure.y), color = "red")
View(poke.stream.one.2022)
### POKE ####
poke.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR8p1pdbkQBMo54XaZinGwxyzojCnlkXeZid3EFvmt9v31PFvpsa1DlWClj8aG0kkJIuU57WXl-cq7Q/pub?output=csv"
# load in url
poke.stream.one.2022 <- read.csv(url(poke.stream.one.2022.url), skip = 1)
# cleaning df to be able to interpret and merge
poke.stream.one.2022 <- poke.stream.one.2022[, -c(5:18)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
poke.stream.one.2022$DateTimeAK <- mdy_hms(poke.stream.one.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
poke.stream.one.2022$DateTimeAK <- lubridate::round_date(poke.stream.one.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
poke.stream.one.2022 <- poke.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
names(poke.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
#adjusting/cleaning poke.stream.one
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-18", NA, .))) # PT wasnt placed into the stream until 5/17
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-27" & DateTimeAK <= "2022-08-31" & WaterPressure < 98.3, NA, .)))
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-27" & DateTimeAK <= "2022-08-31" & WaterPressure < 98.3, NA, .))) %>% filter( DateTimeAK <- "2022-10-07 15:30:00")
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-27" & DateTimeAK <= "2022-08-31" & WaterPressure < 98.3, NA, .))) %>% filter( DateTimeAK <= "2022-10-07 15:30:00")
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-27" & DateTimeAK <= "2022-08-31" & WaterPressure < 98.3, NA, .))) %>%
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-27" & DateTimeAK <= "2022-08-31" & WaterPressure < 98.3, NA, .)))
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-10-05" & DateTimeAK <= "2022-10-07" & WaterPressure < 98, NA, .)))
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-10-05" & DateTimeAK <= "2022-10-07" & WaterPressure <= 98, NA, .)))
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# merge to one
poke.final.pressure.2022 <- left_join(poke.stream.one.2022, poke.stream.two.2022, by = c("DateTimeAK"))
poke.final.pressure.2022$MeanPressure <- rowMeans(poke.final.pressure.2022[,c(2,6)], na.rm = TRUE)
poke.final.pressure.2022 %>% ggplot() + geom_point(aes(DateTimeAK, WaterPressure.x)) + geom_point(aes(DateTimeAK, WaterPressure.y), color = "red")
# Checking closeness between two PTs
poke.pt.2022 <- right_join(poke.stream.one.2022, poke.stream.two.2022, by = "DateTimeAK")
# poke.stream.one.2022 <- poke.stream.one.2022[1:nrow(poke.stream.two.2022),]
# poke.stream.one.2022$Site <- "POKE1" #add column identifier
# poke.stream.two.2022$Site <- "POKE2"
#poke.pt.2022 <- bind_rows(poke.stream.one.2022, poke.stream.two.2022)
plot(x = poke.pt.2022$WaterPressure.x, y = poke.pt.2022$WaterPressure.y, main = "Poker PT comparison",
xlab = "Poker1PT",
ylab = "Poker2PT")
## It looks like we should use PT2 before August 1st and PT1 after August 1st
poke.final.pressure.2022$WaterPressure.merged <- ifelse(DateTimeAK >= "2022-08-01", WaterPressure.x, WaterPressure.y)
## It looks like we should use PT2 before August 1st and PT1 after August 1st
poke.final.pressure.2022$WaterPressure.merged <- ifelse(DateTimeAK >= "2022-08-01", poke.final.pressure.2022$WaterPressure.x, poke.final.pressure.2022$WaterPressure.y)
poke.final.pressure.2022 %>% ggplot() + geom_point(aes(DateTimeAK, WaterPressure.merged))
View(poke.final.pressure.2022)
## It looks like we should use PT2 before August 1st and PT1 after August 1st
poke.final.pressure.2022$WaterPressure.merged <- ifelse(DateTimeAK <= "2022-08-01", poke.final.pressure.2022$WaterPressure.x, poke.final.pressure.2022$WaterPressure.y)
poke.final.pressure.2022 %>% ggplot() + geom_point(aes(DateTimeAK, WaterPressure.merged))
poke.final.pressure.2022$WaterPressure.x
poke.final.pressure.2022$WaterPressure.y
## It looks like we should use PT2 before August 1st and PT1 after August 1st
poke.final.pressure.2022$WaterPressure.merged <- ifelse(DateTimeAK <= "2022-08-01 00:00:00", poke.final.pressure.2022$WaterPressure.x, poke.final.pressure.2022$WaterPressure.y)
poke.final.pressure.2022 %>% ggplot() + geom_point(aes(DateTimeAK, WaterPressure.merged))
poke.final.pressure.2022$WaterPressure.merged
any(!is.na(poke.final.pressure.2022$WaterPressure.merged))
## It looks like we should use PT2 before August 1st and PT1 after August 1st
poke.final.pressure.2022$WaterPressure.merged <- ifelse(DateTimeAK < "2022-08-01 00:00:00", poke.final.pressure.2022$WaterPressure.x, poke.final.pressure.2022$WaterPressure.y)
any(!is.na(poke.final.pressure.2022$WaterPressure.merged))
## It looks like we should use PT2 before August 1st and PT1 after August 1st
poke.final.pressure.2022 <- poke.final.pressure.2022 %>%
mutate(WaterPressure.merged = ifelse(DateTimeAK <= "2022-08-01", WaterPressure.x, WaterPressure.y))
any(!is.na(poke.final.pressure.2022$WaterPressure.merged))
poke.final.pressure.2022 %>% ggplot() + geom_point(aes(DateTimeAK, WaterPressure.merged))
poke.final.pressure.2022 %>% ggplot() + geom_point(aes(DateTimeAK, WaterPressure.x)) + geom_point(aes(DateTimeAK, WaterPressure.y), color = "red")
poke.final.pressure.2022 %>% ggplot() + geom_point(aes(DateTimeAK, WaterPressure.merged))
POKE.2022 <- left_join(eielson.atmo.2022.compare, poke.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
POKE.2022$difference <- POKE.2022$WaterPressure.merged - POKE.2022$AirPressureCorrectedPOKE
POKE.2022 <-  POKE.2022[ , -which(names(POKE.2022) %in% c("WaterPressure.x","TempC.x", "Site.y", "WaterPressure.y", "TempC.y"))] # removing columns I do not need
names(POKE.2022)[names(POKE.2022) == 'Site.x'] <- 'Site'
POKE.2022$Site <- "POKE"
### Filter POKE ###
QSummary.PO.2022 <- QSummary.2022 %>% filter(Site =="POKE")
ggplot(QSummary.PO.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#6A3D9A")) +
ggtitle("POKE")
# trying to merge by nearest date if we have an offset point
POKE.2022.dt <- setDT(POKE.2022)
POKE.2022.dt <- subset(POKE.2022.dt, DateTimeAK < "2022-08-29 07:45:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.PO.2022.dt <- QSummary.PO.2022
Poker1comb.2022 <- POKE.2022.dt[QSummary.PO.2022.dt, on = "DateTimeAK", roll = 'nearest']
Poker1comb.2022[15,9] <- 0.2580529
POKE1.lm.2022 <- lm(Poker1comb.2022$MeasuredQ_Ls ~ Poker1comb.2022$difference)
### Rating Curve ###
poke.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Poker1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = poke.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
# xlim(-2, 2) +
#ylim(0,1500) +
theme_light() +
ggtitle("Poker all measured Q")
ggplot(aes(x = WaterPressure.merged, y = MeasuredQ_Ls), data = Poker1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = poke.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
# xlim(-2, 2) +
#ylim(0,1500) +
theme_light() +
ggtitle("Poker all measured Q")
### Rating Curve ###
poke.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Poker1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = poke.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
# xlim(-2, 2) +
#ylim(0,1500) +
theme_light() +
ggtitle("Poker all measured Q")
### STRT ####
strt.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS4XSmuumKD-j1aDhpA1gfyfrpqUiJUTuvcP9UGrgagvIrzlGYWk71hl0zAC8g8GHqOm1ONjWOpO_So/pub?output=csv" # WL
strt.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRhNn42-Jr1Y3aTFfMPiRxKrNZZjHeBBxkCmVcLVPQEKBf4qg_1Pw4nyUBr3mDwtEE8NKGIbS7kNSrS/pub?output=csv" #WR
# load in data
strt.stream.one.2022 <- read.csv(url(strt.stream.one.2022.url), skip = 1)
strt.stream.two.2022 <- read.csv(url(strt.stream.two.2022.url), skip = 1)
# clean for merging purposes
strt.stream.one.2022 <- strt.stream.one.2022[, -c(4,6:19)] # removing columns that arent date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(5:12)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
strt.stream.one.2022$DateTimeAK <- mdy_hms(strt.stream.one.2022$Date.Time..GMT.08.00)
strt.stream.two.2022$DateTimeAK <- mdy_hms(strt.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
strt.stream.one.2022$DateTimeAK <- lubridate::round_date(strt.stream.one.2022$DateTimeAK, "5 minutes")
strt.stream.two.2022$DateTimeAK <- lubridate::round_date(strt.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
strt.stream.one.2022 <- strt.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(2)] # removing columns that arent
names(strt.stream.one.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
names(strt.stream.two.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
ggplot(strt.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
### STRT ####
strt.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS4XSmuumKD-j1aDhpA1gfyfrpqUiJUTuvcP9UGrgagvIrzlGYWk71hl0zAC8g8GHqOm1ONjWOpO_So/pub?output=csv" # WL
strt.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRhNn42-Jr1Y3aTFfMPiRxKrNZZjHeBBxkCmVcLVPQEKBf4qg_1Pw4nyUBr3mDwtEE8NKGIbS7kNSrS/pub?output=csv" #WR
# load in data
strt.stream.one.2022 <- read.csv(url(strt.stream.one.2022.url), skip = 1)
strt.stream.two.2022 <- read.csv(url(strt.stream.two.2022.url), skip = 1)
# clean for merging purposes
strt.stream.one.2022 <- strt.stream.one.2022[, -c(4,6:19)] # removing columns that arent date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(5:12)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
strt.stream.one.2022$DateTimeAK <- mdy_hms(strt.stream.one.2022$Date.Time..GMT.08.00)
strt.stream.two.2022$DateTimeAK <- mdy_hms(strt.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
strt.stream.one.2022$DateTimeAK <- lubridate::round_date(strt.stream.one.2022$DateTimeAK, "5 minutes")
strt.stream.two.2022$DateTimeAK <- lubridate::round_date(strt.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
strt.stream.one.2022 <- strt.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(2)] # removing columns that arent
names(strt.stream.one.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
names(strt.stream.two.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
ggplot(strt.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
ggplot(strt.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
#adjusting/cleaning STRT 2
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-06-03", NA, .))) # PT wasnt placed into the stream until 6/3
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-10-03" &
WaterPressure < 100, NA, .))) # PT wasnt placed into the stream until 6/3
ggplot(strt.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-10-03" &
WaterPressure < 100, NA, .))) %>% # PT wasnt placed into the stream until 6/3
filter(WaterPressure < 100)
ggplot(strt.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
### STRT ####
strt.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS4XSmuumKD-j1aDhpA1gfyfrpqUiJUTuvcP9UGrgagvIrzlGYWk71hl0zAC8g8GHqOm1ONjWOpO_So/pub?output=csv" # WL
strt.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRhNn42-Jr1Y3aTFfMPiRxKrNZZjHeBBxkCmVcLVPQEKBf4qg_1Pw4nyUBr3mDwtEE8NKGIbS7kNSrS/pub?output=csv" #WR
# load in data
strt.stream.one.2022 <- read.csv(url(strt.stream.one.2022.url), skip = 1)
strt.stream.two.2022 <- read.csv(url(strt.stream.two.2022.url), skip = 1)
# clean for merging purposes
strt.stream.one.2022 <- strt.stream.one.2022[, -c(4,6:19)] # removing columns that arent date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(5:12)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
strt.stream.one.2022$DateTimeAK <- mdy_hms(strt.stream.one.2022$Date.Time..GMT.08.00)
strt.stream.two.2022$DateTimeAK <- mdy_hms(strt.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
strt.stream.one.2022$DateTimeAK <- lubridate::round_date(strt.stream.one.2022$DateTimeAK, "5 minutes")
strt.stream.two.2022$DateTimeAK <- lubridate::round_date(strt.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
strt.stream.one.2022 <- strt.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(2)] # removing columns that arent
names(strt.stream.one.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
names(strt.stream.two.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
#adjusting/cleaning STRT 2
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-06-03", NA, .))) # PT wasnt placed into the stream until 6/3
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-10-03" &
WaterPressure < 100, NA, .))) %>% # PT wasnt placed into the stream until 6/3
filter(WaterPressure > 100)
ggplot(strt.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# merge to one
strt.final.pressure.2022 <- strt.stream.two.2022 # the first PT is crap
# join the two atmospheric and water pressure together
STRT.2022 <- left_join(eielson.atmo.2022.compare, strt.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
STRT.2022$difference <- STRT.2022$WaterPressure - STRT.2022$AirPressureCorrectedSTRT
STRT.2022 <-  STRT.2022[ , -which(names(STRT.2022) %in% c("TempC"))] # removing columns I do not need
STRT.2022$Site <- "STRT"
strt.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQxotkNZ6zyvUi51XOjNPumqSvwGfsZMJc7I6-QXBELHY7msBzAaqvEHV41A88Lt0I1Ga-l1343Q1cr/pub?output=csv"
strt.atmo.2022 <- read.csv(url(strt.atmo.2022.url), skip = 1)
View(moos.atmo.2022)
View(strt.atmo.2022)
strt.atmo.2022 <- strt.atmo.2022[,-c(4:9)]
strt.atmo.2022$DateTimeAK <- mdy_hms(strt.atmo.2022$Date.Time..GMT.08.00)
strt.atmo.2022 <- strt.atmo.2022[,-c(2)]
names(strt.atmo.2022) <- c("Site", "AirPressure", "DateTimeAK")
# join the two atmospheric and water pressure together
STRT.2022 <- left_join(eielson.atmo.2022.compare, strt.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
STRT.2022$difference <- STRT.2022$WaterPressure - STRT.2022$AirPressureCorrectedSTRT
STRT.2022 <-  STRT.2022[ , -which(names(STRT.2022) %in% c("TempC"))] # removing columns I do not need
STRT.2022$Site <- "STRT"
### Filter STRT ###
QSummary.ST.2022 <- QSummary.2022 %>% filter(Site =="STRT")
ggplot(QSummary.ST.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#66C2A5")) +
ggtitle("STRT")
# trying to merge by nearest date if we have an offset point
STRT.2022.dt <- setDT(STRT.2022)
STRT.2022.dt <- subset(STRT.2022.dt, DateTimeAK < "2022-09-02 05:00:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.ST.2022.dt <- QSummary.ST.2022
Stuart1comb.2022 <- STRT.2022.dt[QSummary.ST.2022.dt, on = "DateTimeAK", roll = 'nearest']
Stuart1comb.2022[c(1,2),9] <- 6.463909 # merging by nearest difference value manually
Stuart1comb.2022[c(10,11),9] <- 3.910157
Stuart1comb.2022[c(12,13),9] <- 3.714323
STRT1.lm.2022 <- lm(Stuart1comb.2022$MeasuredQ_Ls ~ Stuart1comb.2022$difference)
### Filter STRT ###
strt.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Stuart1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
#xlim(216, 216.4) +
#ylim(0,1500) +
theme_light() +
ggtitle("Stuart all measured Q")
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022, strt.atmo.2022)
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022, strt.atmo.2022, by = "DateTimeAK")
View(STRT.atmo.2022.compare)
STRT.atmo.2022.compare %>% ggplot() + geom_point(DateTimeAK, AirPressure.x) + geom_point(DateTimeAK, AirPressure.y)
STRT.atmo.2022.compare %>% ggplot() + geom_point(aes(DateTimeAK, AirPressure.x)) + geom_point(aes(DateTimeAK, AirPressure.y))
STRT.atmo.2022.compare %>% ggplot() + geom_point(aes(DateTimeAK, AirPressure.x)) + geom_point(aes(DateTimeAK, AirPressure.y), color = "red")
STRT.atmo.2022.compare %>% ggplot() + #geom_point(aes(DateTimeAK, AirPressure.x)) +
geom_point(aes(DateTimeAK, AirPressure.y), color = "red")
strt.atmo.2022 <- strt.atmo.2022 %>% filter(AirPressure > 96)
strt.atmo.2022 %>% ggplot() +  geom_point(aes(DateTimeAK, AirPressure.y), color = "red")
strt.atmo.2022 %>% ggplot() +  geom_point(aes(DateTimeAK, AirPressure), color = "red")
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022, strt.atmo.2022, by = "DateTimeAK") %>% filter(AirPressure.y)
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022, strt.atmo.2022, by = "DateTimeAK")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressure.x)) +
geom_point(aes(DateTimeAK, AirPressure.y), color = "red")
View(eielson.atmo.2022)
View(eielson.atmo.2022.compare)
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressure.y), color = "red")
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022.compare, strt.atmo.2022, by = "DateTimeAK")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressure.y), color = "red")
names(strt.atmo.2022) <- c("Site", "AirPressureSTRT", "DateTimeAK")
strt.atmo.2022 <- strt.atmo.2022 %>% filter(AirPressure > 96)
strt.atmo.2022 <- strt.atmo.2022 %>% filter(AirPressureSTRT > 96)
strt.atmo.2022 %>% ggplot() +  geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022.compare, strt.atmo.2022, by = "DateTimeAK")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
strt.atmo.2022 <- strt.atmo.2022 %>%
mutate(across(c(AirPressureSTRT),
~ifelse(DateTimeAK <= "2022-06-01" & AirPressureSTRT < 98, NA, .))) %>% filter( DateTimeAK <= "2022-09-10")
strt.atmo.2022 %>% ggplot() +  geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022.compare, strt.atmo.2022, by = "DateTimeAK")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
### Merge all lab chems with sample metadata ###
library(here)
library(tidyverse)
library(googlesheets4)
### Metadata ###
## samples_in from google drive
samples_in <- read_sheet("https://docs.google.com/spreadsheets/d/1BPYCoUE0jBW64GlEmGW73qs84RGX2s_kbKWabKE-TPI/edit#gid=0", sheet = "samples_in", col_types = "ccDcccDnnncccccccnnncc")
library(here)
library(tidyverse)
library(googlesheets4)
### Metadata ###
## samples_in from google drive
samples_in <- read_sheet("https://docs.google.com/spreadsheets/d/1BPYCoUE0jBW64GlEmGW73qs84RGX2s_kbKWabKE-TPI/edit#gid=0", sheet = "samples_in", col_types = "ccDcccDnnncccccccnnncc")
names(samples_in)[names(samples_in) == 'ID60mL'] <- 'SampleID'
samples_in$Date <- as.Date(samples_in$Date, format = "%m/%d/%Y")
samples_in$DateTime <- as.POSIXct(as.character(paste(samples_in$Date, samples_in$Time)), format="%Y-%m-%d %H:%M", tz = "America/Anchorage")
samples_in$Project[samples_in$Project == "<NA>"] = NA
samples_in$year <- as.numeric(format(samples_in$Date, format = "%Y"))
write.csv(samples_in, "samples_in_2022_archive.csv", row.names = FALSE)
### Merge CRREL well survey metadata ###
wellcoords <- read.csv(here("instrument_data", "GPS_coordinates_landfill.csv"), header = TRUE, stringsAsFactors = FALSE)
names(wellcoords)[names(wellcoords) == 'wellPointI'] <- 'Well'
wellmeta <- read.csv(here("instrument_data", "Landfill_wells_master_Dec2020.csv"), header = TRUE, stringsAsFactors = FALSE)
# Merge well coords & meta
wellsmeta <- full_join(wellcoords, wellmeta, by = "Well")
wellsmeta$Location <- wellsmeta$Well
names(wellsmeta)[names(wellsmeta) == 'x_coord'] <- 'UTM_W'
names(wellsmeta)[names(wellsmeta) == 'y_coord'] <- 'UTM_N'
names(wellsmeta)[names(wellsmeta) == 'Date'] <- 'check_date'
# join well metadata to samples_in
samples_in <- left_join(samples_in, wellsmeta, by = "Location")
### Data ###
## Water isotopes
wateriso <- read.csv(here("water_isotopes_todate.csv"), header = TRUE, stringsAsFactors = FALSE)
names(wateriso)[names(wateriso) == 'ID60mL'] <- 'SampleID'
wateriso$Date <- as.Date(wateriso$Date, format = "%m/%d/%y")
# just the isotope data
wateriso_dat <- wateriso %>% select(year, Site, SampleID, d18O.value, dD.value)
wateriso_dat$SampleID <- sub("\\s+$", "", wateriso_dat$SampleID)
wateriso_dat$Site <- sub("\\s+$", "", wateriso_dat$Site)
wateriso_dat$year <- sub("\\s+$", "", wateriso_dat$year)
wateriso_dat$year <- as.numeric(wateriso_dat$year)
## Anions
# note: update file name to most recent
anions <- read.csv("anions_todate.csv", header = TRUE, stringsAsFactors = FALSE)
anions$SampleID <- sub("\\s+$", "", anions$SampleID)
anions$Site <- sub("\\s+$", "", anions$Site)
anions$year <- sub("\\s+$", "", anions$year)
anions$year <- as.numeric(anions$year)
## Cations
# note: update file name to most recent
cations <- read.csv("cations_todate.csv", header = TRUE, stringsAsFactors = FALSE)
cations$SampleID <- sub("\\s+$", "", cations$SampleID)
cations$Site <- sub("\\s+$", "", cations$Site)
cations$year <- sub("\\s+$", "", cations$year)
### Merge CRREL well survey metadata ###
wellcoords <- read.csv(here("instrument_data", "GPS_coordinates_landfill.csv"), header = TRUE, stringsAsFactors = FALSE)
library(here)
library(tidyverse)
library(googlesheets4)
### Metadata ###
## samples_in from google drive
samples_in <- read_sheet("https://docs.google.com/spreadsheets/d/1BPYCoUE0jBW64GlEmGW73qs84RGX2s_kbKWabKE-TPI/edit#gid=0", sheet = "samples_in", col_types = "ccDcccDnnncccccccnnncc")
names(samples_in)[names(samples_in) == 'ID60mL'] <- 'SampleID'
samples_in$Date <- as.Date(samples_in$Date, format = "%m/%d/%Y")
samples_in$DateTime <- as.POSIXct(as.character(paste(samples_in$Date, samples_in$Time)), format="%Y-%m-%d %H:%M", tz = "America/Anchorage")
samples_in$Project[samples_in$Project == "<NA>"] = NA
samples_in$year <- as.numeric(format(samples_in$Date, format = "%Y"))
write.csv(samples_in, "samples_in_2022_archive.csv", row.names = FALSE)
### Merge CRREL well survey metadata ###
wellcoords <- read.csv(here("instrument_data", "GPS_coordinates_landfill.csv"), header = TRUE, stringsAsFactors = FALSE)
names(wellcoords)[names(wellcoords) == 'wellPointI'] <- 'Well'
wellmeta <- read.csv(here("instrument_data", "Landfill_wells_master_Dec2020.csv"), header = TRUE, stringsAsFactors = FALSE)
# Merge well coords & meta
wellsmeta <- full_join(wellcoords, wellmeta, by = "Well")
wellsmeta$Location <- wellsmeta$Well
names(wellsmeta)[names(wellsmeta) == 'x_coord'] <- 'UTM_W'
names(wellsmeta)[names(wellsmeta) == 'y_coord'] <- 'UTM_N'
names(wellsmeta)[names(wellsmeta) == 'Date'] <- 'check_date'
# join well metadata to samples_in
samples_in <- left_join(samples_in, wellsmeta, by = "Location")
### Data ###
## Water isotopes
wateriso <- read.csv(here("water_isotopes_todate.csv"), header = TRUE, stringsAsFactors = FALSE)
names(wateriso)[names(wateriso) == 'ID60mL'] <- 'SampleID'

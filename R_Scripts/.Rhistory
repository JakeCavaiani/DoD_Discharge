Poke
setwd(here())
# check: should be at DoD_Discharge
getwd()
### Write CSV ###
write.csv(allmoosfinal,"PT_data/clean/allmoos.csv", row.names = FALSE)
write.csv(allfrchfinal,"PT_data/clean/allfrch.csv", row.names = FALSE)
write.csv(allstrtfinal,"PT_data/clean/allstrt.csv", row.names = FALSE)
write.csv(allvaul,"PT_data/clean/allvaul.csv", row.names = FALSE)
write.csv(allpoke,"PT_data/clean/allpoke.csv", row.names = FALSE)
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(here)
dir.create(here("Rating_curve"))
dir.create(here("Rating_curve", "Plots"))
dir.create(here("Rating_curve", "Plots", "FRCH"))
dir.create(here("Rating_curve", "Plots", "MOOS"))
dir.create(here("Rating_curve", "Plots", "POKE"))
dir.create(here("Rating_curve", "Plots", "STRT"))
dir.create(here("Rating_curve", "Plots", "VAUL"))
# Import data from google drive #
discharge.2020 <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTPrFKu3yyEDEDkxPVJW2vIWznwmSUcwuNlHInDmrD4EjOQYAkHmtnWJXRT1toDa74ptmHj4O1My3xw/pub?output=csv"
QSummary <- read.csv(url(discharge.2020))
QSummary <-  subset(QSummary, select = -c(X2019, Notes, Average, X, Observations, X.1, X2020, average.as.of.8.29., X.2, observations.as.of.8.29.)) # Cleaning columns that are not important to the dataset
QSummary$date <- mdy(QSummary$Date)
QSummary$DateTime <- as.POSIXct(paste(QSummary$date, QSummary$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
### ALL Sites ###
ggplot(QSummary) +
geom_point(aes(x=Date, y=MeasuredQ_Ls, color=Site, shape=Method), size=3) +
theme_classic() +
scale_color_brewer(palette = "Set1") +
ggtitle("ALL SITES")
# Filter French #
QSummary.FR <- QSummary %>% filter(Site =="FRCH")
# Clean date and time #
QSummary.FR$date <- mdy(QSummary.FR$Date)
QSummary.FR$DateTime <- as.POSIXct(paste(QSummary.FR$date, QSummary.FR$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
### Rating curve for FRCH PT1 ###
frch.stream.one$Site <- "FRCH"
French1comb <- full_join(frch.stream.one, QSummary.FR) # Join PT data with Discharge
French1.lm <- lm(French1comb$MeasuredQ_Ls ~ French1comb$WaterLevel) # linear model with discharge and water level
frch.formula <- y ~ x
frc.1 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = French1comb) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(184,185.5) +
theme_classic() +
ggtitle("French1 all measured Q")
frc.1
### Rating curve for FRCH PT2 ###
frch.stream.two$Site <- "FRCH"
French2comb <- full_join(frch.stream.two, QSummary.FR)
French2.lm <- lm(French2comb$MeasuredQ_Ls ~ French2comb$WaterLevel)
frc.2 <- ggplot(aes(x= WaterLevel, y = MeasuredQ_Ls), data = French2comb) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(184, 185.5) +
theme_classic() +
ggtitle("French2 all measured Q")
frc.2
### Filter Moose ###
QSummary.MO <- QSummary %>% filter(Site =="MOOS")
### Rating curve for MOOS PT1 ###
QSummary.MO$date <- mdy(QSummary.MO$Date)
QSummary.MO$DateTime <- as.POSIXct(paste(QSummary.MO$date, QSummary.MO$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
moos.stream.one$Site <- "MOOS"
Moose1comb <- full_join(moos.stream.one, QSummary.MO)
MOOS1.lm <- lm(Moose1comb$MeasuredQ_Ls ~ Moose1comb$WaterLevel)
moos.formula <- y ~ x
mrc.1 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Moose1comb) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = moos.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(165.75,166.5) +
ylim(600, 1500) +
theme_classic() +
ggtitle("Moose1 all measured Q")
mrc.1
### Rating curve for MOOS PT2 ###
moos.stream.two$Site <- "MOOS"
Moose2comb <- full_join(moos.stream.two, QSummary.MO)
MOOS2.lm <- lm(Moose2comb$MeasuredQ_Ls ~ Moose2comb$WaterLevel)
mrc.2 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Moose2comb) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = moos.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(165.75,166.75) +
ylim(600, 1500) +
theme_classic() +
ggtitle("Moose2 all measured Q")
mrc.2
### Filter Poker ###
QSummary.PO <- QSummary %>% filter(Site =="POKE")
### Rating curve for POKE PT1 ###
poke.stream.one$Site <- "POKE"
Poke1comb <- full_join(poke.stream.one, QSummary.PO)
POKE1.lm <- lm(Poke1comb$MeasuredQ_Ls ~ Poke1comb$WaterLevel)
poke.formula <- y ~ x
prc.1 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Poke1comb) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = poke.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(215.9, 216.5) +
ylim(200, 2000) +
theme_classic() +
ggtitle("Poke1 all measured Q")
prc.1
### Rating curve for POKE PT2 ###
poke.stream.two$Site <- "POKE"
Poke2comb <- full_join(poke.stream.two, QSummary.PO)
POKE2.lm <- lm(Poke2comb$MeasuredQ_Ls ~ Poke2comb$WaterLevel)
prc.2 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Poke2comb) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(215.8, 216.5) +
ylim(200, 2000) +
theme_classic() +
ggtitle("Poker2 all measured Q")
### Filter Stuart ###
QSummary.ST <- QSummary %>% filter(Site =="STRT")
### Rating curve for STRT PT1 ###
strt.stream.one$Site <- "STRT"
Strt1comb <- full_join(strt.stream.one, QSummary.ST)
STRT1.lm <- lm(Strt1comb$MeasuredQ_Ls ~ Strt1comb$WaterLevel)
strt.formula <- y ~ x
src.1 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt1comb) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(248.4, 248.7) +
ylim(200, 3000) +
theme_classic() +
ggtitle("Strt1 all measured Q")  # I think this worked
src.1
### Rating curve for STRT PT2 ###
strt.stream.two$Site <- "STRT"
Strt2comb <- full_join(strt.stream.two, QSummary.ST)
STRT2.lm <- lm(Strt2comb$MeasuredQ_Ls ~ Strt2comb$WaterLevel)
strt.formula <- y ~ x
src.2 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt2comb) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(248.5, 248.7) +
ylim(200, 2000) +
theme_classic() +
ggtitle("Strt2 all measured Q")
src.2
### Filter Vault ###
QSummary.VA <- QSummary %>% filter(Site =="VAUL") %>% filter(MeasuredQ_Ls < 2000)
### Rating curve for VAUL PT2 ###
vaul.stream$Site <- "VAUL"
Vaul2comb <- full_join(vaul.stream, QSummary.VA)
VAUL2.lm <- lm(Vaul2comb$MeasuredQ_Ls ~ Vaul2comb$WaterLevel)
vaul.formula <- y ~ x
vrc.1 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Vaul2comb) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
xlim(197.5, 198.5) +
ylim(0, 1500) +
theme_classic() +
ggtitle("Vault2 all measured Q")
vrc.1
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(here)
dir.create(here("Predicted_Discharge"))
dir.create(here("Predicted_Discharge", "Processed"))
### FRCH ###
# PT1 #
French1comb$pred.french1.Q <- coef(French1.lm)[2] * French1comb$WaterLevel+ coef(French1.lm)[1]
ggplot(aes(x = DateTime, y = pred.french1.Q), data=French1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
ggtitle("French1 predicted all measured Q") +
xlab("Date") +
ylab("Predicted Discharge")
# PT2 #
French2comb$pred.french2.Q <- coef(French2.lm)[2] * French2comb$WaterLevel+ coef(French2.lm)[1]
ggplot(aes(x = DateTime, y = pred.french2.Q), data=French2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
ggtitle("French") +
xlab("") +
ylab("Discharge (L/s)")
# Final Discharge #
French1comb$DateTimeGMT <- mdy_hms(French1comb$DateTimeGMT, tz = "GMT")
attributes(French1comb$DateTimeGMT)$tzone <- 'America/Anchorage' # Changing GMT to AK time to prep to remove pred Q for PT1
French1comb[c(1039:2382), 13] <- NA # Setting NA to noisy part of the data set
frch.final.discharge <- data.frame(French1comb$Site, French2comb$DateTime, French1comb$pred.french1.Q, French2comb$pred.french2.Q)
frch.final.discharge$MeanDischarge <- rowMeans(frch.final.discharge[,c ('French1comb.pred.french1.Q', 'French2comb.pred.french2.Q')], na.rm = TRUE)
frch.final.discharge <- frch.final.discharge[,-(3:4)] # Just mean discharge because it looks fine
frch.final.discharge <- frch.final.discharge[-c(1:2), ] # Removing errant points
names(frch.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
### French1 (light blue), French2 (dark blue), and mean (red) with observed Q.
French.final <- ggplot(aes(x = DateTime, y = pred.french2.Q), data = French2comb) +
geom_line(aes(x = DateTime, y = pred.french1.Q), data = French1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.french2.Q), data = French2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = DateTime, y = MeanDischarge), data = frch.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ggtitle("French1(light) & French2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
French.final
### MOOS ###
# PT1 #
Moose1comb$pred.moos1.Q <- coef(MOOS1.lm)[2] * Moose1comb$WaterLevel+ coef(MOOS1.lm)[1]
ggplot(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Moose1 predicted all measured Q") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("Date") +
ylab("Predicted Discharge")
# PT2 #
Moose2comb$pred.moos2.Q <- coef(MOOS2.lm)[2] * Moose2comb$WaterLevel+ coef(MOOS2.lm)[1]
ggplot(aes(x = DateTime, y = pred.moos2.Q), data = Moose2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Moose") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge (L/s)")
# Final Discharge #
Moose1comb[c(540:1594), 13] <- NA # Remove the noisy data
moos.final.discharge <- full_join(Moose1comb, Moose2comb, by = c("DateTime"))
moos.final.discharge$MeanDischarge <- rowMeans(moos.final.discharge[,c(13,25)], na.rm = TRUE)
moos.final.discharge <- moos.final.discharge[,-c(2:4, 6:12, 14:24)]
moos.final.discharge <- moos.final.discharge[,-(3:4)]
### Moose1 (light blue), Moose2 (dark blue), and mean (red) with observed Q.
moos.final <- ggplot(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb) +
geom_line(aes(x = DateTime, y = pred.moos1.Q), data = Moose1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.moos2.Q), data = Moose2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = DateTime, y = MeanDischarge), data = moos.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3500) +
ggtitle("Moose1(light) & Moose2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
moos.final
### POKE ###
# PT1 #
Poke1comb$pred.poke1.Q <- coef(POKE1.lm)[2] * Poke1comb$WaterLevel+ coef(POKE1.lm)[1]
ggplot(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Poker1 predicted all measured Q") +
xlab("Date") +
ylab("Predicted Discharge")
# PT2 #
Poke2comb$pred.poke2.Q <- coef(POKE2.lm)[2] * Poke2comb$WaterLevel+ coef(POKE2.lm)[1]
ggplot(aes(x = DateTime, y = pred.poke2.Q), data = Poke2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Poker") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylim(0, 3500) +
ylab("Discharge(L/s)") +
scale_x_datetime(limits = as_datetime(c("2020-05-15", "2020-10-10")))
# POKE
poke.final.discharge <- data.frame(Poke1comb$Site, Poke1comb$DateTime, Poke1comb$pred.poke1.Q, Poke2comb$pred.poke2.Q)
poke.final.discharge$MeanDischarge <- rowMeans(poke.final.discharge[,c('Poke1comb.pred.poke1.Q', 'Poke2comb.pred.poke2.Q')], na.rm = TRUE)
poke.final.discharge <- poke.final.discharge[,-(3:4)]
### Poker1 (light blue) and Poker2 (dark blue) with observed Q.
poke.final <- ggplot(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb) +
geom_line(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.poke2.Q), data = Poke2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = Poke1comb.DateTime, y = MeanDischarge), data = poke.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("Poker1(light) & Poker2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
Poke1comb$DateTime
### STRT ###
# PT1 #
Strt1comb$pred.strt1.Q <- coef(STRT1.lm)[2] * Strt1comb$WaterLevel+ coef(STRT1.lm)[1]
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge (L/s)") +
scale_x_datetime(limits = as_datetime(c("2020-05-15", "2020-10-09")))
# PT2 #
Strt2comb$pred.strt2.Q <- coef(STRT2.lm)[2] * Strt2comb$WaterLevel+ coef(STRT2.lm)[1]
ggplot(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart2 predicted all measured Q") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("Date") +
ylab("Predicted Discharge")
# Final STRT #
strt.final.discharge <- data.frame(Strt1comb$Site, Strt1comb$DateTime, Strt1comb$pred.strt1.Q)
strt.final.discharge <- strt.final.discharge %>% subset(strt.stream.one$DateTime > "2020-06-16")
### Stuart1 (light blue), Stuart2 (dark blue), and Stuart1 (red) because STRT2 seems bad with observed Q.
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb) +
geom_line(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = Strt1comb.DateTime, y = Strt1comb.pred.strt1.Q), data = strt.final.discharge, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("Stuart1(light) & Stuart2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
### VAUL ###
# PT2 #
Vaul2comb$pred.vaul2.Q <- coef(VAUL2.lm)[2] * Vaul2comb$WaterLevel+ coef(VAUL2.lm)[1]
ggplot(aes(x = DateTime, y = pred.vaul2.Q), data = Vaul2comb) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Vault") +
scale_shape_discrete(name = "Mehtod", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge (L/s)") +
scale_x_datetime(limits = as_datetime(c("2020-05-15", "2020-10-10")))
# Final VAUL #
vaul.final.discharge <- data.frame(Vaul2comb$Site, Vaul2comb$DateTime, Vaul2comb$pred.vaul2.Q)
vaul.final.discharge <- vaul.final.discharge %>%  subset(vaul.stream$DateTime > "2020-06-16")
setwd(here())
# check: should be at DoD_Discharge
getwd()
### Write CSV ###
write.csv(frch.final.discharge,"Predicted_Discharge/processed/FRCH.csv", row.names = FALSE)
write.csv(moos.final.discharge,"Predicted_Discharge/processed/MOOS.csv", row.names = FALSE)
write.csv(poke.final.discharge,"Predicted_Discharge/processed/POKE.csv", row.names = FALSE)
write.csv(strt.final.discharge,"Predicted_Discharge/processed/STRT.csv", row.names = FALSE)
write.csv(vaul.final.discharge,"Predicted_Discharge/processed/VAUL.csv", row.names = FALSE)
### Rename Columns ###
names(frch.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(moos.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(poke.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(strt.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
names(vaul.final.discharge) <- c("Site", "DateTime", "MeanDischarge")
moos.final.discharge <- na.omit(moos.final.discharge) # cleaning NaN in data set
poke.final.discharge <- na.omit(poke.final.discharge) # cleaning NaN in data set
final_discharge_2020 <- rbind(frch.final.discharge, moos.final.discharge,
poke.final.discharge, strt.final.discharge,
vaul.final.discharge)
write.csv(final_discharge_2020,"Predicted_Discharge/processed/All_Sites.csv", row.names = FALSE)
Q_2020 <- final_discharge_2020
Q_2020$day = format(as.POSIXct(Q_2020$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
Q_2020$day = as.POSIXct(Q_2020$day, "%Y-%m-%d", tz="America/Anchorage")
Q_2020$DateTime = NULL
Q.daily = with(Q_2020, tapply(MeanDischarge, list(day, Site), mean))
Q.daily = as.data.frame(Q.daily)
mean(vaul.final.discharge$MeanDischarge, na.rm = TRUE)
mean(frch.final.discharge$MeanDischarge, na.rm = TRUE)
mean(poke.final.discharge$MeanDischarge, na.rm = TRUE)
mean(moos.final.discharge$MeanDischarge, na.rm = TRUE)
mean(strt.final.discharge$MeanDischarge, na.rm = TRUE)
head(FRCH_storm4a_07_07_fDOM)
head(FRCH_storm3c_06_28)
reticulate::repl_python()
FRCH.hyst.results.list = list(py$hysdict_FRCH_storm1_06_13_fDOM,
py$hysdict_FRCH_storm2_06_19_fDOM,
py$hysdict_FRCH_storm3a_06_20_fDOM,
py$hysdict_FRCH_storm3b_06_22_fDOM,
py$hysdict_FRCH_storm3c_06_28_fDOM,
py$hysdict_FRCH_storm4a_07_07_fDOM,
py$hysdict_FRCH_storm4b_07_09_fDOM,
py$hysdict_FRCH_storm6_07_17_fDOM,
py$hysdict_FRCH_storm7_07_20_fDOM,
py$hysdict_FRCH_storm8_07_26_fDOM,
py$hysdict_FRCH_storm9a_08_01_fDOM,
py$hysdict_FRCH_storm9b_08_02_fDOM)
reticulate::repl_python()
FRCH.hyst.results.list = list(py$hysdict_FRCH_storm1_06_13_fDOM,
py$hysdict_FRCH_storm2_06_19_fDOM,
py$hysdict_FRCH_storm3a_06_20_fDOM,
py$hysdict_FRCH_storm3b_06_22_fDOM,
py$hysdict_FRCH_storm3c_06_28_fDOM,
py$hysdict_FRCH_storm4a_07_07_fDOM,
py$hysdict_FRCH_storm4b_07_09_fDOM,
py$hysdict_FRCH_storm6_07_17_fDOM,
py$hysdict_FRCH_storm7_07_20_fDOM,
py$hysdict_FRCH_storm8_07_26_fDOM,
py$hysdict_FRCH_storm9a_08_01_fDOM,
py$hysdict_FRCH_storm9b_08_02_fDOM)
FRCH.hyst.results.list.2 = list()
for (i in 1:length(FRCH.hyst.results.list)){
FRCH.hyst.results.list.2[[i]] = as.data.frame(t(as.numeric(c(
FRCH.hyst.results.list[[i]][["HI_mean_with_Interp"]],
FRCH.hyst.results.list[[i]][["HI_standard_deviation_with_Interp"]],
FRCH.hyst.results.list[[i]][["Normalized slope of response"]],
FRCH.hyst.results.list[[i]][["interpolated Max width of response"]],
FRCH.hyst.results.list[[i]][["Min response"]],
FRCH.hyst.results.list[[i]][["Max response"]],
FRCH.hyst.results.list[[i]][["Peak Q"]]
))))
names(FRCH.hyst.results.list.2[[i]]) = c("HI_mean_Interp", "HI_sd_with_Interp", "N.S.", "Max_width_Interp", "Min_response", "Max_response", "Peak_Q")
}
HIs.list = list()
HIs.tests = list()
for (i in 1:length(FRCH.hyst.results.list)){
HIs.list[[i]] = unlist(FRCH.hyst.results.list[[i]][["Hysteresis_Index"]],recursive=FALSE)
HIs.tests[[i]] = as.data.frame(t(round(as.numeric(c(shapiro.test(HIs.list[[i]])$statistic, shapiro.test(HIs.list[[i]])$p.value,
t.test(HIs.list[[i]], mu=0)$statistic, t.test(HIs.list[[i]], mu=0)$p.value,
t.test(HIs.list[[i]], mu=0)$conf.int[1],t.test(HIs.list[[i]], mu=0)$conf.int[2],
wilcox.test(HIs.list[[i]], mu=0)$statistic, wilcox.test(HIs.list[[i]], mu=0)$p.value)), 4)))
names(HIs.tests[[i]]) = c("ShapiroTest.W", "ShapiroTest.p", "t.test.stat", "t.test.p", "t.test.CIlow", "t.test.CIhigh",
"wilcox.test.stat", "wilcox.test.p")
}
FRCH.hyst.results.list.3 =list()
for (i in 1:length(FRCH.hyst.results.list)){
FRCH.hyst.results.list.3[[i]] = cbind(FRCH.hyst.results.list.2[[i]], HIs.tests[[i]])
}
FRCH.hyst.results.df = bind_rows(FRCH.hyst.results.list.3, .id = "column_label")
reticulate::repl_python()
FRCH.hyst.results.list = list(py$hysdict_FRCH_storm1_06_13_fDOM,
py$hysdict_FRCH_storm2_06_19_fDOM,
py$hysdict_FRCH_storm3a_06_20_fDOM,
py$hysdict_FRCH_storm3b_06_22_fDOM,
py$hysdict_FRCH_storm3c_06_28_fDOM,
py$hysdict_FRCH_storm4a_07_07_fDOM,
py$hysdict_FRCH_storm4b_07_09_fDOM,
py$hysdict_FRCH_storm6_07_17_fDOM,
py$hysdict_FRCH_storm7_07_20_fDOM,
py$hysdict_FRCH_storm8_07_26_fDOM,
py$hysdict_FRCH_storm9a_08_01_fDOM,
py$hysdict_FRCH_storm9b_08_02_fDOM,
py$hysdict_FRCH_storm10a_08_09_fDOM,
py$hysdict_FRCH_storm10b_08_12_fDOM,
py$hysdict_FRCH_storm11_08_20_fDOM,
py$hysdict_FRCH_storm12_09_06_fDOM)
FRCH.hyst.results.list.2 = list()
for (i in 1:length(FRCH.hyst.results.list)){
FRCH.hyst.results.list.2[[i]] = as.data.frame(t(as.numeric(c(
FRCH.hyst.results.list[[i]][["HI_mean_with_Interp"]],
FRCH.hyst.results.list[[i]][["HI_standard_deviation_with_Interp"]],
FRCH.hyst.results.list[[i]][["Normalized slope of response"]],
FRCH.hyst.results.list[[i]][["interpolated Max width of response"]],
FRCH.hyst.results.list[[i]][["Min response"]],
FRCH.hyst.results.list[[i]][["Max response"]],
FRCH.hyst.results.list[[i]][["Peak Q"]]
))))
names(FRCH.hyst.results.list.2[[i]]) = c("HI_mean_Interp", "HI_sd_with_Interp", "N.S.", "Max_width_Interp", "Min_response", "Max_response", "Peak_Q")
}
rm(FRCH.hyst.results.list)
rm(FRCH.hyst.results.list.2)
rm(FRCH.hyst.results.list.3)
reticulate::repl_python()

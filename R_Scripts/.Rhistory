# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022.compare, strt.atmo.2022, by = "DateTimeAK")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressure.y), color = "red")
names(strt.atmo.2022) <- c("Site", "AirPressureSTRT", "DateTimeAK")
strt.atmo.2022 <- strt.atmo.2022 %>% filter(AirPressure > 96)
strt.atmo.2022 <- strt.atmo.2022 %>% filter(AirPressureSTRT > 96)
strt.atmo.2022 %>% ggplot() +  geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022.compare, strt.atmo.2022, by = "DateTimeAK")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
strt.atmo.2022 <- strt.atmo.2022 %>%
mutate(across(c(AirPressureSTRT),
~ifelse(DateTimeAK <= "2022-06-01" & AirPressureSTRT < 98, NA, .))) %>% filter( DateTimeAK <= "2022-09-10")
strt.atmo.2022 %>% ggplot() +  geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022.compare, strt.atmo.2022, by = "DateTimeAK")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
### Merge all lab chems with sample metadata ###
library(here)
library(tidyverse)
library(googlesheets4)
### Metadata ###
## samples_in from google drive
samples_in <- read_sheet("https://docs.google.com/spreadsheets/d/1BPYCoUE0jBW64GlEmGW73qs84RGX2s_kbKWabKE-TPI/edit#gid=0", sheet = "samples_in", col_types = "ccDcccDnnncccccccnnncc")
library(here)
library(tidyverse)
library(googlesheets4)
### Metadata ###
## samples_in from google drive
samples_in <- read_sheet("https://docs.google.com/spreadsheets/d/1BPYCoUE0jBW64GlEmGW73qs84RGX2s_kbKWabKE-TPI/edit#gid=0", sheet = "samples_in", col_types = "ccDcccDnnncccccccnnncc")
names(samples_in)[names(samples_in) == 'ID60mL'] <- 'SampleID'
samples_in$Date <- as.Date(samples_in$Date, format = "%m/%d/%Y")
samples_in$DateTime <- as.POSIXct(as.character(paste(samples_in$Date, samples_in$Time)), format="%Y-%m-%d %H:%M", tz = "America/Anchorage")
samples_in$Project[samples_in$Project == "<NA>"] = NA
samples_in$year <- as.numeric(format(samples_in$Date, format = "%Y"))
write.csv(samples_in, "samples_in_2022_archive.csv", row.names = FALSE)
### Merge CRREL well survey metadata ###
wellcoords <- read.csv(here("instrument_data", "GPS_coordinates_landfill.csv"), header = TRUE, stringsAsFactors = FALSE)
names(wellcoords)[names(wellcoords) == 'wellPointI'] <- 'Well'
wellmeta <- read.csv(here("instrument_data", "Landfill_wells_master_Dec2020.csv"), header = TRUE, stringsAsFactors = FALSE)
# Merge well coords & meta
wellsmeta <- full_join(wellcoords, wellmeta, by = "Well")
wellsmeta$Location <- wellsmeta$Well
names(wellsmeta)[names(wellsmeta) == 'x_coord'] <- 'UTM_W'
names(wellsmeta)[names(wellsmeta) == 'y_coord'] <- 'UTM_N'
names(wellsmeta)[names(wellsmeta) == 'Date'] <- 'check_date'
# join well metadata to samples_in
samples_in <- left_join(samples_in, wellsmeta, by = "Location")
### Data ###
## Water isotopes
wateriso <- read.csv(here("water_isotopes_todate.csv"), header = TRUE, stringsAsFactors = FALSE)
names(wateriso)[names(wateriso) == 'ID60mL'] <- 'SampleID'
wateriso$Date <- as.Date(wateriso$Date, format = "%m/%d/%y")
# just the isotope data
wateriso_dat <- wateriso %>% select(year, Site, SampleID, d18O.value, dD.value)
wateriso_dat$SampleID <- sub("\\s+$", "", wateriso_dat$SampleID)
wateriso_dat$Site <- sub("\\s+$", "", wateriso_dat$Site)
wateriso_dat$year <- sub("\\s+$", "", wateriso_dat$year)
wateriso_dat$year <- as.numeric(wateriso_dat$year)
## Anions
# note: update file name to most recent
anions <- read.csv("anions_todate.csv", header = TRUE, stringsAsFactors = FALSE)
anions$SampleID <- sub("\\s+$", "", anions$SampleID)
anions$Site <- sub("\\s+$", "", anions$Site)
anions$year <- sub("\\s+$", "", anions$year)
anions$year <- as.numeric(anions$year)
## Cations
# note: update file name to most recent
cations <- read.csv("cations_todate.csv", header = TRUE, stringsAsFactors = FALSE)
cations$SampleID <- sub("\\s+$", "", cations$SampleID)
cations$Site <- sub("\\s+$", "", cations$Site)
cations$year <- sub("\\s+$", "", cations$year)
### Merge CRREL well survey metadata ###
wellcoords <- read.csv(here("instrument_data", "GPS_coordinates_landfill.csv"), header = TRUE, stringsAsFactors = FALSE)
library(here)
library(tidyverse)
library(googlesheets4)
### Metadata ###
## samples_in from google drive
samples_in <- read_sheet("https://docs.google.com/spreadsheets/d/1BPYCoUE0jBW64GlEmGW73qs84RGX2s_kbKWabKE-TPI/edit#gid=0", sheet = "samples_in", col_types = "ccDcccDnnncccccccnnncc")
names(samples_in)[names(samples_in) == 'ID60mL'] <- 'SampleID'
samples_in$Date <- as.Date(samples_in$Date, format = "%m/%d/%Y")
samples_in$DateTime <- as.POSIXct(as.character(paste(samples_in$Date, samples_in$Time)), format="%Y-%m-%d %H:%M", tz = "America/Anchorage")
samples_in$Project[samples_in$Project == "<NA>"] = NA
samples_in$year <- as.numeric(format(samples_in$Date, format = "%Y"))
write.csv(samples_in, "samples_in_2022_archive.csv", row.names = FALSE)
### Merge CRREL well survey metadata ###
wellcoords <- read.csv(here("instrument_data", "GPS_coordinates_landfill.csv"), header = TRUE, stringsAsFactors = FALSE)
names(wellcoords)[names(wellcoords) == 'wellPointI'] <- 'Well'
wellmeta <- read.csv(here("instrument_data", "Landfill_wells_master_Dec2020.csv"), header = TRUE, stringsAsFactors = FALSE)
# Merge well coords & meta
wellsmeta <- full_join(wellcoords, wellmeta, by = "Well")
wellsmeta$Location <- wellsmeta$Well
names(wellsmeta)[names(wellsmeta) == 'x_coord'] <- 'UTM_W'
names(wellsmeta)[names(wellsmeta) == 'y_coord'] <- 'UTM_N'
names(wellsmeta)[names(wellsmeta) == 'Date'] <- 'check_date'
# join well metadata to samples_in
samples_in <- left_join(samples_in, wellsmeta, by = "Location")
### Data ###
## Water isotopes
wateriso <- read.csv(here("water_isotopes_todate.csv"), header = TRUE, stringsAsFactors = FALSE)
names(wateriso)[names(wateriso) == 'ID60mL'] <- 'SampleID'
install.packages("ggpmisc")
# Load packages #
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(gridExtra)
library(ggpmisc)
library(birk)
# Import data from google drive #
discharge.2022 <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQR6HHHDpnxc6DmNHfdNLR9-dgDHR5Imt0Ve4_t2DzIF18_8D3O2da5zcWQzJUSoFQfaetPZDeXZ610/pub?gid=0&single=true&output=csv"
QSummary.2022 <- read.csv(url(discharge.2022))
### Format Time ###
QSummary.2022$Date <- mdy(QSummary.2022$Date)
QSummary.2022$DateTimeAK <- as.POSIXct(paste(QSummary.2022$Date, QSummary.2022$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
QSummary.2022$DateTimeAK <- lubridate::round_date(QSummary.2022$DateTimeAK, "60 minutes")
### ALL Sites ###
QSummary.2022 %>% ggplot() +
geom_point(aes(x=DateTimeAK, y=MeasuredQ_Ls, color=Site, shape=Method), size=3) +
theme_classic() +
scale_color_manual(values=c("#FF7F00","#A6761D", "#6A3D9A", "#66C2A5", "#E7298A")) + ggtitle("ALL SITES")
eielson.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRNaeqSnSANyg1akwelIH50Oh3undYyZkhoMku-n0Y9JTpLOY3jK7BJwQlA2ktP40MFZ3OzYdjnGmFm/pub?output=csv"
eielson.atmo.2022 <- read.csv(url(eielson.atmo.2022.url), skip = 6)
eielson.atmo.2022 <- eielson.atmo.2022[-1,]
names(eielson.atmo.2022) <- c("Site", "DateTimeAK", "sea_level_pressure", "AirPressure")
eielson.atmo.2022$DateTimeAK <- mdy_hm(eielson.atmo.2022$DateTimeAK)
eielson.atmo.2022$DateTimeAK <- lubridate::round_date(eielson.atmo.2022$DateTimeAK, "15 minutes")
eielson.atmo.2022$DateTimeAK <- force_tz(eielson.atmo.2022$DateTimeAK, "America/Anchorage")
eielson.atmo.2022$AirPressure <- as.numeric(eielson.atmo.2022$AirPressure)
eielson.atmo.2022$AirPressure <- eielson.atmo.2022$AirPressure*3.38639 # converting from inHG to kPa
# Load in water pressure data
# urls
moos.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQ7QMNWjVX1R43qflIW7lVqkj7wRHouhgQhWK76kfR8zK-UZg9bFSm92ccPy8T0luhFHKwsLNQQjA56/pub?output=csv"
moos.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRo04g32Yr3DsZbXQiw6VTPfgWuWq5csh1VhxfMy3IT3U6OkJOGvTlofjXwFfugiaRVJ34pPnOUZ3te/pub?output=csv"
moos.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQRXmAtoP_7I2RYEDZrdCT1LDyD8W3Thjst549srxdlWDMUYUyBjiGABd8pgtZE9Efa8b4Vgb3qtyoc/pub?output=csv"
# load in data
moos.atmo.2022 <- read.csv(url(moos.atmo.2022.url), skip = 1)
moos.stream.one.2022 <- read.csv(url(moos.stream.one.2022.url), skip = 1)
moos.stream.two.2022 <- read.csv(url(moos.stream.two.2022.url), skip = 1)
# cleaning df to be able to interpret and merge
moos.atmo.2022 <- moos.atmo.2022[, -c(5:11)] # removing columns that aren't date/abs pressure and temp
moos.stream.one.2022 <- moos.stream.one.2022[, -c(5:13)] # removing columns that aren't date/abs pressure and temp
moos.stream.two.2022 <- moos.stream.two.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
# changing datetime to AK time
moos.atmo.2022$DateTimeAK <- mdy_hms(moos.atmo.2022$Date.Time..GMT.08.00)
moos.stream.one.2022$DateTimeAK <- mdy_hms(moos.stream.one.2022$Date.Time..GMT.08.00)
moos.stream.two.2022$DateTimeAK <- mdy_hms(moos.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
moos.atmo.2022$DateTimeAK <- lubridate::round_date(moos.atmo.2022$DateTimeAK, "5 minutes")
moos.stream.one.2022$DateTimeAK <- lubridate::round_date(moos.stream.one.2022$DateTimeAK, "5 minutes")
moos.stream.two.2022$DateTimeAK <- lubridate::round_date(moos.stream.two.2022$DateTimeAK, "5 minutes")
# changing the names
# cleaning off original datetime
moos.atmo.2022 <- moos.atmo.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
moos.stream.one.2022 <- moos.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
moos.stream.two.2022 <- moos.stream.two.2022[, -c(2)] # removing columns that arent
names(moos.atmo.2022) <- c("Site", "AirPressure", "TempC", "DateTimeAK")
names(moos.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(moos.stream.two.2022) <- c("Site", "WaterPressure", "TempC",  "DateTimeAK")
moos.atmo.2022 %>% filter(AirPressure > 96.8) %>% ggplot(aes(x = DateTimeAK, y = AirPressure)) +
geom_point()
ggplot(eielson.atmo.2022, aes(x = DateTimeAK, y = AirPressure)) +
geom_point()
# MOOS elevation is 574 feet
# POKE 760.96
# STRT 820 ft
# FRCH 601 ft
# VAUL 688.8 ft
# compare Eielson and MOOS atmospheric pressure
eielson.atmo.2022.compare <- eielson.atmo.2022
eielson.atmo.2022.compare$sea_level_pressure <- as.numeric(eielson.atmo.2022.compare$sea_level_pressure)
eielson.atmo.2022.compare$mmHG <- eielson.atmo.2022.compare$sea_level_pressure * 25.44 # converting to mmHG
# conversion to elevation at each site
# MOOS
eielson.atmo.2022.compare$mmHGcorrectedMOOS <- eielson.atmo.2022.compare$mmHG - (2.5*574/100)
eielson.atmo.2022.compare$AirPressureCorrectedMOOS <- eielson.atmo.2022.compare$mmHGcorrectedMOOS * 0.133322 # converting this to kPA to compare with MOOS PT
# POKE
eielson.atmo.2022.compare$mmHGcorrectedPOKE <- eielson.atmo.2022.compare$mmHG - (2.5*760.96/100)
eielson.atmo.2022.compare$AirPressureCorrectedPOKE <- eielson.atmo.2022.compare$mmHGcorrectedPOKE * 0.133322 # converting this to kPA
# STRT
eielson.atmo.2022.compare$mmHGcorrectedSTRT <- eielson.atmo.2022.compare$mmHG - (2.5*820/100)
eielson.atmo.2022.compare$AirPressureCorrectedSTRT <- eielson.atmo.2022.compare$mmHGcorrectedSTRT * 0.133322 # converting this to kPA
# FRCH
eielson.atmo.2022.compare$mmHGcorrectedFRCH <- eielson.atmo.2022.compare$mmHG - (2.5*601/100)
eielson.atmo.2022.compare$AirPressureCorrectedFRCH <- eielson.atmo.2022.compare$mmHGcorrectedFRCH * 0.133322 # converting this to kPA
# VAUL
eielson.atmo.2022.compare$mmHGcorrectedVAUL <- eielson.atmo.2022.compare$mmHG - (2.5*688.8/100)
eielson.atmo.2022.compare$AirPressureCorrectedVAUL <- eielson.atmo.2022.compare$mmHGcorrectedVAUL * 0.133322 # converting this to kPA
moos.atmo.2022.compare <- moos.atmo.2022
atmo.pt.2022.1 <- left_join(eielson.atmo.2022.compare, moos.atmo.2022.compare, by = "DateTimeAK")
atmo.pt.2022.1 %>% filter(DateTimeAK >= "2022-05-01") %>% ggplot(aes(x = DateTimeAK, y = AirPressureCorrectedMOOS)) +
geom_line(aes(x=DateTimeAK, y=AirPressureCorrectedMOOS), color="#A6CEE3") +
geom_line(aes(x=DateTimeAK, y=AirPressure.x), color="#FF7F00") +
geom_line(aes(x=DateTimeAK, y=AirPressure.y), color = "red") +
theme_classic() +
ggtitle("Eielson Corrected(blue) & Eielson uncorrected(orange) & MOOS(red) Atmo P")
### POKE ####
poke.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR8p1pdbkQBMo54XaZinGwxyzojCnlkXeZid3EFvmt9v31PFvpsa1DlWClj8aG0kkJIuU57WXl-cq7Q/pub?output=csv"
poke.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR-wJjf3rO8eC7bMpQZgwqFLHFQpf5qCInyWtUF1PqaCB8Z_EoM1cTHRUmWypjftREIx1rP0V6zYJxL/pub?output=csv"
# load in url
poke.stream.one.2022 <- read.csv(url(poke.stream.one.2022.url), skip = 1)
poke.stream.two.2022 <- read.csv(url(poke.stream.two.2022.url), skip = 1)
# cleaning df to be able to interpret and merge
poke.stream.one.2022 <- poke.stream.one.2022[, -c(5:18)] # removing columns that arent date/abs pressure and temp
poke.stream.two.2022 <- poke.stream.two.2022[, -c(5:9)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
poke.stream.one.2022$DateTimeAK <- mdy_hms(poke.stream.one.2022$Date.Time..GMT.08.00)
poke.stream.two.2022$DateTimeAK <- mdy_hms(poke.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
poke.stream.one.2022$DateTimeAK <- lubridate::round_date(poke.stream.one.2022$DateTimeAK, "5 minutes")
poke.stream.two.2022$DateTimeAK <- lubridate::round_date(poke.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
poke.stream.one.2022 <- poke.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
poke.stream.two.2022 <- poke.stream.two.2022[, -c(2)] # removing columns that arent
names(poke.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(poke.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
#adjusting/cleaning poke.stream.one
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-18", NA, .))) # PT wasnt placed into the stream until 5/17
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-27" & DateTimeAK <= "2022-08-31" & WaterPressure < 98.3, NA, .))) %>% filter( DateTimeAK <= "2022-10-07 15:30:00")
poke.stream.one.2022 <- poke.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-10-05" & DateTimeAK <= "2022-10-07" & WaterPressure < 98, NA, .)))
ggplot(poke.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
### STRT ####
strt.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS4XSmuumKD-j1aDhpA1gfyfrpqUiJUTuvcP9UGrgagvIrzlGYWk71hl0zAC8g8GHqOm1ONjWOpO_So/pub?output=csv" # WL
strt.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRhNn42-Jr1Y3aTFfMPiRxKrNZZjHeBBxkCmVcLVPQEKBf4qg_1Pw4nyUBr3mDwtEE8NKGIbS7kNSrS/pub?output=csv" #WR
strt.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQxotkNZ6zyvUi51XOjNPumqSvwGfsZMJc7I6-QXBELHY7msBzAaqvEHV41A88Lt0I1Ga-l1343Q1cr/pub?output=csv"
# load in data
strt.stream.one.2022 <- read.csv(url(strt.stream.one.2022.url), skip = 1)
strt.stream.two.2022 <- read.csv(url(strt.stream.two.2022.url), skip = 1)
strt.atmo.2022 <- read.csv(url(strt.atmo.2022.url), skip = 1)
# clean for merging purposes
strt.stream.one.2022 <- strt.stream.one.2022[, -c(4,6:19)] # removing columns that arent date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(5:12)] # removing columns that arent date/abs pressure and temp
strt.atmo.2022 <- strt.atmo.2022[,-c(4:9)]
# changing to AK time (It reads in as GMT but it is actually AKST )
strt.stream.one.2022$DateTimeAK <- mdy_hms(strt.stream.one.2022$Date.Time..GMT.08.00)
strt.stream.two.2022$DateTimeAK <- mdy_hms(strt.stream.two.2022$Date.Time..GMT.08.00)
strt.atmo.2022$DateTimeAK <- mdy_hms(strt.atmo.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
strt.stream.one.2022$DateTimeAK <- lubridate::round_date(strt.stream.one.2022$DateTimeAK, "5 minutes")
strt.stream.two.2022$DateTimeAK <- lubridate::round_date(strt.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
strt.stream.one.2022 <- strt.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(2)] # removing columns that arent
strt.atmo.2022 <- strt.atmo.2022[,-c(2)]
names(strt.stream.one.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
names(strt.stream.two.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
names(strt.atmo.2022) <- c("Site", "AirPressureSTRT", "DateTimeAK")
ggplot(strt.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
ggplot(strt.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
#adjusting/cleaning STRT 2
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-06-03", NA, .))) # PT wasnt placed into the stream until 6/3
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-10-03" &
WaterPressure < 100, NA, .))) %>% # PT wasnt placed into the stream until 6/3
filter(WaterPressure > 100)
ggplot(strt.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
ggplot(strt.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic() + geom_point(strt.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))
ggplot(strt.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic() + geom_point(data = strt.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))
# merge to one
strt.final.pressure.2022 <- strt.stream.two.2022 # the first PT is crap
strt.atmo.2022 <- strt.atmo.2022 %>% filter(AirPressureSTRT > 96)
strt.atmo.2022 <- strt.atmo.2022 %>%
mutate(across(c(AirPressureSTRT),
~ifelse(DateTimeAK <= "2022-06-01" & AirPressureSTRT < 98, NA, .))) %>% filter( DateTimeAK <= "2022-09-10")
strt.atmo.2022 %>% ggplot() +  geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022.compare, strt.atmo.2022, by = "DateTimeAK")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022.compare, strt.atmo.2022, by = "DateTimeAK")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
View(eielson.atmo.2022.compare)
## Use measured air pressure when possible
STRT.atmo.2022.compare <- STRT.atmo.2022.compare %>% select(DateTimeAK, AirPressureCorrectedSTRT, AirPressureSTRT )
STRT.atmo.2022.compare %>% mutate(strt.combo = ~ifelse(DateTimeAK <= "2022-05-18" |DateTimeAK >= "2022-06-01" , AirPressureSTRT, AirPressureCorrectedSTRT)))
STRT.atmo.2022.compare %>% mutate(strt.combo = ~ifelse(DateTimeAK <= "2022-05-18" |DateTimeAK >= "2022-06-01" , AirPressureSTRT, AirPressureCorrectedSTRT))
### Using mostly our air pressure data with gap filled in by Eilson:
STRT.atmo.2022.compare$strt.combo <- c()
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(across(c(strt.combo),
~ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-02", AirPressureSTRT, AirPressureCorrectedSTRT)))
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo ~ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-02", AirPressureSTRT, AirPressureCorrectedSTRT)))
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo ~ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-02", AirPressureSTRT, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo = ~ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-02", AirPressureSTRT, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo = ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-02", AirPressureSTRT, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo))
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo = ifelse(DateTimeAK <= "2022-05-18" & DateTimeAK >= "2022-06-02", AirPressureSTRT, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo))
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo = ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-02", AirPressureSTRT, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo = ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-04", AirPressureSTRT, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo = ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-03", AirPressureSTRT, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo = ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-02", AirPressureSTRT, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo = ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-03", AirPressureSTRT, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(across(c(AirPressureSTRT),
~ifelse(DateTimeAK >= "2022-07-18" & DateTimeAK <= "2022-09-01", AirPressureCorrectedSTRT, .)))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(across(c(strt.combo),
~ifelse(DateTimeAK >= "2022-07-18" & DateTimeAK <= "2022-09-01", AirPressureCorrectedSTRT, .)))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(across(c(strt.combo),
~ifelse(DateTimeAK >= "2022-07-18" & DateTimeAK <= "2022-09-02", AirPressureCorrectedSTRT, .)))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
## Use measured air pressure when possible
STRT.atmo.2022.compare <- STRT.atmo.2022.compare %>% select(DateTimeAK, AirPressureCorrectedSTRT, AirPressureSTRT )
### Using mostly our air pressure data with gap filled in by Eilson:
STRT.atmo.2022.compare$strt.combo <- c()
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo = ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-03", AirPressureSTRT, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(across(c(strt.combo),
~ifelse(DateTimeAK >= "2022-07-18" & DateTimeAK <= "2022-09-02", AirPressureCorrectedSTRT, .)))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(across(c(strt.combo),
~ifelse(DateTimeAK >= "2022-07-18" & DateTimeAK <= "2022-09-03", AirPressureCorrectedSTRT, .)))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
strt.atmo.2022 <- strt.atmo.2022 %>% filter(AirPressureSTRT > 96)
strt.atmo.2022 <- strt.atmo.2022 %>%
mutate(across(c(AirPressureSTRT),
~ifelse(DateTimeAK <= "2022-06-01" & AirPressureSTRT < 98, NA, .))) %>% filter( DateTimeAK <= "2022-09-10")
strt.atmo.2022 %>% ggplot() +  geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
strt.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQxotkNZ6zyvUi51XOjNPumqSvwGfsZMJc7I6-QXBELHY7msBzAaqvEHV41A88Lt0I1Ga-l1343Q1cr/pub?output=csv"
# load in data
strt.stream.one.2022 <- read.csv(url(strt.stream.one.2022.url), skip = 1)
strt.stream.two.2022 <- read.csv(url(strt.stream.two.2022.url), skip = 1)
strt.atmo.2022 <- read.csv(url(strt.atmo.2022.url), skip = 1)
### STRT ####
strt.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS4XSmuumKD-j1aDhpA1gfyfrpqUiJUTuvcP9UGrgagvIrzlGYWk71hl0zAC8g8GHqOm1ONjWOpO_So/pub?output=csv" # WL
strt.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRhNn42-Jr1Y3aTFfMPiRxKrNZZjHeBBxkCmVcLVPQEKBf4qg_1Pw4nyUBr3mDwtEE8NKGIbS7kNSrS/pub?output=csv" #WR
strt.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQxotkNZ6zyvUi51XOjNPumqSvwGfsZMJc7I6-QXBELHY7msBzAaqvEHV41A88Lt0I1Ga-l1343Q1cr/pub?output=csv"
# load in data
strt.stream.one.2022 <- read.csv(url(strt.stream.one.2022.url), skip = 1)
strt.stream.two.2022 <- read.csv(url(strt.stream.two.2022.url), skip = 1)
strt.atmo.2022 <- read.csv(url(strt.atmo.2022.url), skip = 1)
# clean for merging purposes
strt.stream.one.2022 <- strt.stream.one.2022[, -c(4,6:19)] # removing columns that arent date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(5:12)] # removing columns that arent date/abs pressure and temp
strt.atmo.2022 <- strt.atmo.2022[,-c(4:9)]
# changing to AK time (It reads in as GMT but it is actually AKST )
strt.stream.one.2022$DateTimeAK <- mdy_hms(strt.stream.one.2022$Date.Time..GMT.08.00)
strt.stream.two.2022$DateTimeAK <- mdy_hms(strt.stream.two.2022$Date.Time..GMT.08.00)
strt.atmo.2022$DateTimeAK <- mdy_hms(strt.atmo.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
strt.stream.one.2022$DateTimeAK <- lubridate::round_date(strt.stream.one.2022$DateTimeAK, "5 minutes")
strt.stream.two.2022$DateTimeAK <- lubridate::round_date(strt.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
strt.stream.one.2022 <- strt.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(2)] # removing columns that arent
strt.atmo.2022 <- strt.atmo.2022[,-c(2)]
names(strt.stream.one.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
names(strt.stream.two.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
names(strt.atmo.2022) <- c("Site", "AirPressureSTRT", "DateTimeAK")
strt.atmo.2022 <- strt.atmo.2022 %>% filter(AirPressureSTRT > 96)
strt.atmo.2022 %>% ggplot() +  geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
strt.atmo.2022 <- strt.atmo.2022 %>% filter(AirPressureSTRT > 96)
strt.atmo.2022 <- strt.atmo.2022 %>%
mutate(across(c(AirPressureSTRT),
~ifelse(DateTimeAK <= "2022-06-01" & AirPressureSTRT < 98, NA, .))) %>% filter( DateTimeAK <= "2022-09-10")
strt.atmo.2022 %>% ggplot() +  geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(eielson.atmo.2022.compare, strt.atmo.2022, by = "DateTimeAK")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
## Use measured air pressure when possible
STRT.atmo.2022.compare <- STRT.atmo.2022.compare %>% select(DateTimeAK, AirPressureCorrectedSTRT, AirPressureSTRT )
### Using mostly our air pressure data with gap filled in by Eilson:
STRT.atmo.2022.compare$strt.combo <- c()
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(strt.combo = ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-03", AirPressureSTRT, AirPressureCorrectedSTRT))
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(across(c(strt.combo),
~ifelse(DateTimeAK >= "2022-07-18" & DateTimeAK <= "2022-09-03", AirPressureCorrectedSTRT, .)))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(across(c(strt.combo),
~ifelse(DateTimeAK >= "2022-07-18" & DateTimeAK <= "2022-09-03" | DateTimeAK >= "2022-09-10", AirPressureCorrectedSTRT, .)))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(across(c(strt.combo),
~ifelse(DateTimeAK >= "2022-07-18" & DateTimeAK <= "2022-09-03" | DateTimeAK >= "2022-09-09", AirPressureCorrectedSTRT, .)))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
mutate(across(c(strt.combo),
~ifelse(DateTimeAK >= "2022-07-18" & DateTimeAK <= "2022-09-03" | DateTimeAK >= "2022-09-08", AirPressureCorrectedSTRT, .)))
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) #+ geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
# join the two atmospheric and water pressure together
STRT.2022 <- left_join(STRT.atmo.2022.compare, strt.final.pressure.2022, by = "DateTimeAK")
# Water pressure - atmospheric pressure
STRT.2022$difference <- STRT.2022$WaterPressure - STRT.2022$strt.combo
STRT.2022 <-  STRT.2022[ , -which(names(STRT.2022) %in% c("TempC"))] # removing columns I do not need
STRT.2022$Site <- "STRT"
### Filter STRT ###
QSummary.ST.2022 <- QSummary.2022 %>% filter(Site =="STRT")
ggplot(QSummary.ST.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#66C2A5")) +
ggtitle("STRT")
# trying to merge by nearest date if we have an offset point
STRT.2022.dt <- setDT(STRT.2022)
STRT.2022.dt <- subset(STRT.2022.dt, DateTimeAK < "2022-09-02 05:00:00") # removing rows that had dates corresponding to end of record that messed up the rolling nearest function
QSummary.ST.2022.dt <- QSummary.ST.2022
Stuart1comb.2022 <- STRT.2022.dt[QSummary.ST.2022.dt, on = "DateTimeAK", roll = 'nearest']
Stuart1comb.2022[c(1,2),9] <- 6.463909 # merging by nearest difference value manually
Stuart1comb.2022[c(10,11),9] <- 3.910157
Stuart1comb.2022[c(12,13),9] <- 3.714323
STRT1.lm.2022 <- lm(Stuart1comb.2022$MeasuredQ_Ls ~ Stuart1comb.2022$difference)
### Filter STRT ###
strt.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Stuart1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
#xlim(216, 216.4) +
#ylim(0,1500) +
theme_light() +
ggtitle("Stuart all measured Q")
install.packages("ggpmisc")
frch.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRkT5GIhFY4nLblzPi4Upc8y6Pk2k4vXLSGAkFyMhLowsCmct0fZ5rxm-vd85RfFr7YLrCuuSiOqQbL/pub?output=csv"
frch.stream.two.2022.url <-  "https://docs.google.com/spreadsheets/d/e/2PACX-1vRiDAbzBj_jHk1Hd3iM7fFvzMrRCSF9fbKTcmQD_dUFGOjoIQuBZBKV4KdNhfevLOq0Udch0LbWiKXw/pub?output=csv"
# load in url
frch.stream.one.2022 <- read.csv(url(frch.stream.one.2022.url), skip = 1)
frch.stream.two.2022 <- read.csv(url(frch.stream.two.2022.url), skip = 1)
# clean for merging purposes
frch.stream.one.2022 <- frch.stream.one.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(5:14)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
frch.stream.one.2022$DateTimeAK <- mdy_hms(frch.stream.one.2022$Date.Time..GMT.08.00)
frch.stream.two.2022$DateTimeAK <- mdy_hms(frch.stream.two.2022$Date.Time..GMT.08.00)
# round date to 5 minute intervals
frch.stream.one.2022$DateTimeAK <- lubridate::round_date(frch.stream.one.2022$DateTimeAK, "5 minutes")
frch.stream.two.2022$DateTimeAK <- lubridate::round_date(frch.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
frch.stream.one.2022 <- frch.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(2)] # removing columns that arent
names(frch.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(frch.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
# merge to one
frch.final.pressure.2022 <- left_join(frch.stream.one.2022, frch.stream.two.2022, by = c("DateTimeAK"))
frch.final.pressure.2022$MeanPressure <- rowMeans(frch.final.pressure.2022[,c(2,6)], na.rm = TRUE)
ggplot(frch.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()

## DoD 2018 - compile and do initial cleaning of EXO files ##
# press Command+Option+O to collapse all sections and get an overview of the workflow! #

#### read me ####

#### load libraries ####
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(scales)
library(psych)
library(here)
library(ggplot2)
library(googledrive)
library(readxl)

#### servicing dates ####

FRCH.service = c("2018-05-31 14:00:00",
                 "2018-06-13 14:00:00",
                 "2018-06-20 14:00:00",
                 "2018-06-27 14:15:00", "2018-06-27 15:25:00",
                 "2018-07-11 13:40:00", "2018-07-11 14:30:00",
                 "2018-07-18 14:45:00", 
                 "2018-07-25 13:45:00", 
                 "2018-08-01 12:00:00",
                 "2018-08-08 09:30:00",
                 "2018-08-17 10:00:00", 
                 "2018-08-31 10:30:00", 
                 "2018-09-13 13:45:00",
                 "2018-10-05 10:45:00") 

MOOS.service = c("2018-05-31 14:00:00",
                 "2018-06-13 14:00:00",
                 "2018-06-20 10:00:00",
                 "2018-06-27 12:15:00", "2018-06-27 12:45:00",
                 "2018-07-11 10:00:00", "2018-07-11 11:00:00",
                 "2018-07-18 14:45:00", 
                 "2018-07-26 13:45:00", 
                 "2018-08-01 12:00:00",
                 "2018-08-08 09:30:00",
                 "2018-08-17 10:00:00", 
                 "2018-08-31 10:30:00", 
                 "2018-09-13 13:45:00",
                 "2018-10-05 10:45:00",
                 "2018-10-12 10:45:00") 



servicez = list(FRCH.service, MOOS.service)
names(servicez) = c("FRCH", "MOOS")


#### end of record date and time ####
FRCH.end = "2018-10-12 14:00:00"
MOOS.end = "2018-10-26 12:45:00"


service.endz = list(FRCH.end, MOOS.end)
names(service.endz) = c("FRCH", "MOOS")

#### functions ####

# Function to import Campbell data
importCSdata <- function(filename,RetOpt="data"){
  if(RetOpt=="info"){
    # bring in entire header of CSI TOA5 data file for metadata
    stn.info <- scan(file=filename,nlines=4,what=character(),sep="\r")
    return(stn.info)
  } else {
    # second line of header contains variable names
    header <- scan(file=filename,skip=1,nlines=1,what=character(),sep=",")
    # bring in data
    stn.data <- read.table(file=filename,skip=4,header=FALSE, na.strings=c("NAN"),sep=",")
    names(stn.data) <- header
    # add column of R-formatted date/timestamps
    stn.data$TIMESTAMP <- as.POSIXlt(strptime(stn.data$TIMESTAMP,"%Y-%m-%d %H:%M:%S"))
    return(stn.data)}
}

# plotting 
makePlotEXO <- function(service, data){
  plot.new()
  par(mfrow=c(3,2), mar=c(5,4,2,1.5))
  plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$Battery.V.mn,pch=20,col="black", xlab="", ylab="Battery voltage")
  abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  #plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$CablePwr.V.mn,pch=20,col="black", xlab="", ylab="Cable voltage")
  #abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  # plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$Wipe.V.mn,pch=20,col="black", xlab="", ylab="Wiper voltage")
  # abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$Temp..C.mn,pch=20,col="gray45", xlab="", ylab="Temp C")
  abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  arrows(as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$Temp..C.mn-data$Temp..C.SD, 
         as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$Temp..C.mn+data$Temp..C.SD,
         length=.01, angle=90, code=3, col="grey", lwd=.5)
  plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$SpCond.µS.cm.mn,pch=20,col="darkslateblue", xlab="", ylab="SpCond uScm")
  abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  arrows(as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$SpCond.µS.cm.mn-data$SpCond.µS.cm.SD, 
         as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$SpCond.µS.cm.mn+data$SpCond.µS.cm.SD,
         length=.01, angle=90, code=3, col="grey", lwd=.5)
  plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$fDOM.QSU.mn,pch=20,col="darkorange4", xlab="", ylab="fDOM QSU")
  abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  arrows(as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$fDOM.QSU.mn-data$fDOM.QSU.SD, 
         as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$fDOM.QSU.mn+data$fDOM.QSU.SD,
         length=.01, angle=90, code=3, col="grey", lwd=.5)
  plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$Turbidity.FNU.mn,pch=20,col="firebrick4", xlab="", ylab="Turbidity FNU")
  abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  arrows(as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$Turbidity.FNU.mn-data$Turbidity.FNU.SD, 
         as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$Turbidity.FNU.mn+data$Turbidity.FNU.SD,
         length=.01, angle=90, code=3, col="grey", lwd=.5)
  # plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$ODO.mgL.mn,pch=20,col="blue", xlab="", ylab="DO mg/L")
  # abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  # arrows(as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$ODO.mgL.mn-data$ODO.mgL.SD, 
  #        as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$ODO.mgL.mn+data$ODO.mgL.SD,
  #        length=.01, angle=90, code=3, col="grey", lwd=.5)
  # plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$ODO.Psat.mn,pch=20,col="blue", xlab="", ylab="DO % sat")
  # abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  # arrows(as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$ODO.Psat.mn-data$ODO.Psat.SD, 
  #        as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$ODO.Psat.mn+data$ODO.Psat.SD,
  #        length=.01, angle=90, code=3, col="grey", lwd=.5)
  # plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$ODO.Ploc.mn,pch=20,col="blue", xlab="", ylab="DO % local")
  # abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  # arrows(as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$ODO.Ploc.mn-data$ODO.Ploc.SD, 
  #        as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$ODO.Ploc.mn+data$ODO.Ploc.SD,
  #        length=.01, angle=90, code=3, col="grey", lwd=.5)
}
makePlotTelem.EXO <- function(EXOdata){
  plot.new()
  par(mfrow=c(3,2), mar=c(5,6,2,3))
  
  EXOdata = EXOdata[!is.na(EXOdata$temp_Avg),]
  
  plot(as.POSIXct(EXOdata$datetimeAK, tz="America/Anchorage"),EXOdata$Batt_volt_Min,pch=20,col="black", xlab="", ylab="Battery voltage", type="o", cex.main=1.25, cex.lab=2, cex.axis=1.75)
  abline(h=12.5, col="red")
  
  plot(as.POSIXct(EXOdata$datetimeAK, tz="America/Anchorage"),EXOdata$temp_Avg,pch=20,col="black", xlab="", ylab="EXO stream temp (C)", type="o", ylim = c(-.5, max(EXOdata$temp_Avg, na.rm=T)), cex.main=1.25, cex.lab=2, cex.axis=1.75)
  abline(h=0, col="red")
  
  plot(as.POSIXct(EXOdata$datetimeAK, tz="America/Anchorage"),EXOdata$SpC_Avg,pch=20,col="darkslateblue", xlab="", ylab="Specific Cond. (uScm)", type="o", cex.main=1.25, cex.lab=2, cex.axis=1.75)
  
  plot(as.POSIXct(EXOdata$datetimeAK, tz="America/Anchorage"),EXOdata$fDOM_Avg,pch=20,col="darkorange4", xlab="", ylab="fDOM (QSU)", type="o", cex.main=1.25, cex.lab=2, cex.axis=1.75)
  
  plot(as.POSIXct(EXOdata$datetimeAK, tz="America/Anchorage"),EXOdata$DOsat_Avg,pch=20,col="blue", xlab="", ylab="DO (% saturation)", type="o", cex.main=1.25, cex.lab=2, cex.axis=1.75)
  
  plot(as.POSIXct(EXOdata$datetimeAK, tz="America/Anchorage"),EXOdata$turbidity_Avg,pch=20,col="firebrick4", xlab="", ylab="Turbidity (FNU)", type="o", cex.main=1.25, cex.lab=2, cex.axis=1.75)
  
}

#

#### load and stitch interally-logged EXO data ####

### Download data from Google Drive
FRCHurl <- "https://drive.google.com/drive/u/1/folders/1e4Z83kaokVId5jYJohi3icSqjMFHm_XU"
MOOSurl <- "https://drive.google.com/drive/u/1/folders/1c0jumWxk_j_nNHnkJaEiFeQFEvKPcBdC" # there appeared to be some missing internally logged data within the original link that was put in this repo but I copied over the missing internally logged data and made a separate folder called raw_all

# First time this will ask to cache OAuth credentials. Open browser. Run the drive_get commands below. Enter "1" to allow cache. Go to browser, log in to Google, and allow API access. 
FRCH_new <- drive_get(as_id(FRCHurl))
MOOS_new <- drive_get(as_id(MOOSurl))


FRCH_glist <- drive_ls(FRCH_new, type = "csv")
MOOS_glist <- drive_ls(MOOS_new, type = "csv")


#I know this is hinky with the switching of working directory. The drive_download command does not currently allow downloading into subdirectories (see issue #250 on github tidyverse/googledrive).
setwd(here("EXO_data", "from_internal_harddrive", "raw"))
walk(FRCH_glist$id, ~ drive_download(as_id(.x), overwrite = TRUE))
walk(MOOS_glist$id, ~ drive_download(as_id(.x), overwrite = TRUE))

# Merge individual EXO files
### MOOS ###
MOOSfile_list <- list.files(path=".", 
                            recursive=F, 
                            pattern="MOOS", 
                            full.names=TRUE)
EXO.MOOS<-do.call("rbind", lapply(MOOSfile_list, 
                                  read.csv, 
                                  check.names = FALSE,
                                  stringsAsFactors=FALSE, 
                                  skip=21, header=T, blank.lines.skip = TRUE, fill=TRUE))
names(EXO.MOOS) <- c("Date..MM.DD.YYYY.", "Time..HH.mm.ss.", "Time..Fract..Sec.", "Site.Name" , "Fault.Code",
                     "Battery.V", "Cable.Pwr.V", "fDOM.RFU", "fDOM.QSU", "Temp..C", "Cond.µS.cm" , "SpCond.µS.cm", "Sal.psu",
                     "nLF.Cond.µS.cm",  "TDS.mg.L", "Turbidity.FNU" , "TSS.mg.L") # renaming the columns 
EXO.MOOS$Site.Name <- "MOOS"

EXO.MOOS <- EXO.MOOS[order(EXO.MOOS$datetimeAK),]

### FRCH ###
FRCHfile_list <- list.files(path=".", 
                            recursive=F, 
                            pattern="FRCH", 
                            full.names=TRUE)
EXO.FRCH<-do.call("rbind", lapply(FRCHfile_list, 
                                  read.csv, 
                                  check.names = FALSE,
                                  stringsAsFactors=FALSE, 
                                  skip=21, header=T, blank.lines.skip = TRUE, fill=TRUE))
names(EXO.FRCH) <- c("Date..MM.DD.YYYY.", "Time..HH.mm.ss.", "Time..Fract..Sec.", "Site.Name" , "Fault.Code",
                     "Battery.V", "Cable.Pwr.V", "fDOM.RFU", "fDOM.QSU", "Temp..C", "Cond.µS.cm" , "SpCond.µS.cm", "Sal.psu",
                     "nLF.Cond.µS.cm",  "TDS.mg.L", "Turbidity.FNU" , "TSS.mg.L") # renaming the columns 
EXO.FRCH$Site.Name <- "FRCH"

EXO.FRCH <- EXO.FRCH[order(EXO.FRCH$datetimeAK),]

#### format date and time ####

EXO.lst <- list(EXO.FRCH = EXO.FRCH, 
                EXO.MOOS = EXO.MOOS)

EXO.lst <- lapply(EXO.lst, function(x) {x$datetimeAK <- as.POSIXct(paste(x$Date..MM.DD.YYYY., x$Time..HH.mm.ss.), format = "%m/%d/%Y %H:%M:%S", tz="America/Anchorage"); return(x)})
       
list2env(EXO.lst, envir=.GlobalEnv)

EXO.processed = rbind(EXO.MOOS,EXO.FRCH)

write.csv(EXO.processed, "/Users/jakecavaiani/Documents/DOD_2018_repo/EXO_data/from_internal_harddrive/processed/EXO.processed.csv")


########################################################
#### Fill gaps in internally logged data with telem ####
########################################################

#### identify contiguous date/time range(s) ####
# contiguous ranges = those with < 6 hr gaps

### FRCH ###
my_dat = data.frame(datetimeAK = na.omit(EXO.FRCH$datetimeAK))
my_dat$datetimeAK = sort(my_dat$datetimeAK, decreasing = F)
my_dat$gap <- c(NA, with(my_dat, datetimeAK[-1] - datetimeAK[-nrow(my_dat)]))
gap_threshold <- 21600 # 6 hours in sec
my_dat$over_thresh <- my_dat$gap > gap_threshold
range(my_dat$datetimeAK, na.rm=T)
my_dat[which(my_dat$over_thresh==T)-1,]
my_dat[my_dat$over_thresh==T,]


FRCH_start_1 = min(range(my_dat$datetimeAK, na.rm=T))
FRCH_end_1 = my_dat[which(my_dat$over_thresh==T)-1,][1,1]

FRCH_start_2 = my_dat[my_dat$over_thresh==T,][2,1]
FRCH_end_2 = max(range(my_dat$datetimeAK, na.rm=T))



c(FRCH_start_1, FRCH_end_1, FRCH_start_2, FRCH_end_2)


### MOOS ###
my_dat = data.frame(datetimeAK = na.omit(EXO.MOOS$datetimeAK))
my_dat$datetimeAK = sort(my_dat$datetimeAK, decreasing = F)
my_dat$gap <- c(NA, with(my_dat, datetimeAK[-1] - datetimeAK[-nrow(my_dat)]))
gap_threshold <- 21600 # 6 hours in sec
my_dat$over_thresh <- my_dat$gap > gap_threshold
range(my_dat$datetimeAK, na.rm=T)
my_dat[which(my_dat$over_thresh==T)-1,]
my_dat[my_dat$over_thresh==T,]

MOOS_start_1 = min(range(my_dat$datetimeAK, na.rm=T))
MOOS_end_1 = my_dat[which(my_dat$over_thresh==T)-1,][1,1]

MOOS_start_2 = my_dat[my_dat$over_thresh==T,][2,1]
MOOS_end_2 = max(range(my_dat$datetimeAK, na.rm=T))

c(MOOS_start_1, MOOS_end_1, MOOS_start_2, MOOS_end_2)


#### stitch in telemetry (non-burst) EXO data - FRCH ####

# ### FRCH ###
# # import data
# FRCH.telem_1 = importCSdata("Telem_data/EXO data/CR1000X_french_YSI_data.dat")
# FRCH.telem_2 = importCSdata("Telem_data/EXO data/French_YSI_data_191010.dat")
# FRCH.telem_3 = importCSdata("Telem_data/old EXO only data/CR1000X_french_Fifteenmin.dat")
# 
# # format date/time
# FRCH.telem_1$datetimeAK = as.POSIXct(FRCH.telem_1$TIMESTAMP, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
# FRCH.telem_2$datetimeAK = as.POSIXct(FRCH.telem_2$TIMESTAMP, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
# FRCH.telem_3$datetimeAK = as.POSIXct(FRCH.telem_3$TIMESTAMP, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
# 
# # check column headers
# names(FRCH.telem_1) == names(FRCH.telem_2)
# names(FRCH.telem_1) == names(FRCH.telem_3)
# # FRCH.telem_3 does not match
# # Fix:
# head(FRCH.telem_1)
# head(FRCH.telem_3)
# # columns are the same, just with different names, so will replace names
# names(FRCH.telem_3) = names(FRCH.telem_1)
# 
# # rbind
# FRCH.telem = rbind(FRCH.telem_1, FRCH.telem_2, FRCH.telem_3)
# 
# # check for duplicates
# FRCH.telem[which(duplicated(FRCH.telem$datetimeAK)),]
# # remove duplicates
# FRCH.telem.r = unique(FRCH.telem)
# anyDuplicated(FRCH.telem.r)
# 
# # extract data corresponding to gaps in internal logging
# # create clean set of time stamps to join to
# FRCHtimeideal = seq.POSIXt(
#   from = lubridate::round_date(FRCH_start_1, "15 minutes"),
#   to = lubridate::round_date(as.POSIXct(service.endz[["FRCH"]], tz="America/Anchorage"), "15 minutes"),
#   by = "15 min" )
# FRCHtimeactual = lubridate::round_date(FRCH.EXO$datetimeAK, "15 minutes")
# FRCHtimeGAPS = setdiff(FRCHtimeideal, FRCHtimeactual)
# FRCHtimeGAPS = FRCHtimeideal[!FRCHtimeideal %in% FRCHtimeactual]
# FRCH.telem_replacement = FRCH.telem.r[FRCH.telem.r$datetimeAK %in% FRCHtimeGAPS,]
# 
# # format telem data to match internally logged data
# head(FRCH.EXO)
# FRCH.telem_replacement_formatted = 
#   data.frame(Date = date(FRCH.telem_replacement$datetimeAK),
#              Time = strftime(FRCH.telem_replacement$datetimeAK, format="%H:%M:%S"),
#              Time.s = 0,
#              site.ID = "FRCH",
#              Cond.uScm = NA,
#              fDOM.QSU = FRCH.telem_replacement$fDOM_Avg,
#              nLFCond.uScm = NA,
#              ODO.Psat = FRCH.telem_replacement$DOsat_Avg,
#              ODO.Ploc = NA,
#              ODO.mgL = NA,
#              Sal.psu = NA,
#              SpCond.uScm = FRCH.telem_replacement$SpC_Avg,
#              TDS.mgL = NA,
#              Turbidity.FNU = FRCH.telem_replacement$turbidity_Avg,
#              TSS.mgL = NA,
#              Wipe.V = NA,
#              Temp.C = FRCH.telem_replacement$temp_Avg,
#              Battery.V = NA,
#              CablePwr.V = FRCH.telem_replacement$Power_Avg,
#              datetimeAK = FRCH.telem_replacement$datetimeAK
#   )
# 
# # rbind and sort telem data to internally logged data
# FRCH.EXO_stitched = rbind(FRCH.EXO, FRCH.telem_replacement_formatted)
# FRCH.EXO_stitched = FRCH.EXO_stitched[order(FRCH.EXO_stitched$datetimeAK),]
# 
# ## plot to check ##
# # pre-stitching:
# # compile burst measurements for plotting
# FRCH.EXO.st = FRCH.EXO
# FRCH.EXO.st$datetimeAK = lubridate::round_date(as.POSIXct(format(as.POSIXct(FRCH.EXO.st$datetimeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d %H:%M"), "%Y-%m-%d %H:%M", tz="America/Anchorage"), "15 minutes")
# FRCH.EXO.st = FRCH.EXO.st %>%
#   select(datetimeAK, SpCond.uScm, Turbidity.FNU, Temp.C, fDOM.QSU, ODO.Psat, Battery.V) %>%
#   group_by(datetimeAK) %>%
#   summarize_all(list(~mean(.),~sd(.)), na.rm = TRUE)
# names(FRCH.EXO.st) = gsub("_mean", ".mn", names(FRCH.EXO.st))
# names(FRCH.EXO.st) = gsub("_sd", ".SD", names(FRCH.EXO.st))
# #plot burst-compiled data and save plots
# pdf("./plots/EXO/FRCH.EXO_intlogged_raw.pdf", width = 14, height =9, onefile=FALSE)
# makePlotEXO(FRCH.service,FRCH.EXO.st)
# dev.off()
# #
# # post-stitching:
# # compile burst measurements for plotting
# FRCH.EXO.st = FRCH.EXO_stitched
# FRCH.EXO.st$datetimeAK = lubridate::round_date(as.POSIXct(format(as.POSIXct(FRCH.EXO.st$datetimeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d %H:%M"), "%Y-%m-%d %H:%M", tz="America/Anchorage"), "15 minutes")
# FRCH.EXO.st = FRCH.EXO.st %>%
#   select(datetimeAK, SpCond.uScm, Turbidity.FNU, Temp.C, fDOM.QSU, ODO.Psat, Battery.V) %>%
#   group_by(datetimeAK) %>%
#   summarize_all(list(~mean(.),~sd(.)), na.rm = TRUE)
# names(FRCH.EXO.st) = gsub("_mean", ".mn", names(FRCH.EXO.st))
# names(FRCH.EXO.st) = gsub("_sd", ".SD", names(FRCH.EXO.st))
# #plot burst-compiled data and save plots
# pdf("./plots/EXO/FRCH.EXO_stitched_raw.pdf", width = 14, height =9, onefile=FALSE)
# makePlotEXO(FRCH.service, FRCH.EXO.st)
# dev.off()
# 
# 
# #
# #### stitch in telemetry (non-burst) EXO data - MOOS ####
# 
# ### MOOS ###
# # import data
# MOOS.telem_1 = importCSdata("Telem_data/EXO data/CR1000X_moose_YSI_data.dat")
# MOOS.telem_2 = importCSdata("Telem_data/old EXO only data/CR1000X_moose_Fifteenmin.dat")
# 
# # format date/time
# MOOS.telem_1$datetimeAK = as.POSIXct(MOOS.telem_1$TIMESTAMP, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
# MOOS.telem_2$datetimeAK = as.POSIXct(MOOS.telem_2$TIMESTAMP, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
# 
# # check column headers
# names(MOOS.telem_1) == names(MOOS.telem_2)
# # columns are the same, just with one different name, so will replace names
# names(MOOS.telem_2) = names(MOOS.telem_1)
# 
# # rbind
# MOOS.telem = rbind(MOOS.telem_1, MOOS.telem_2)
# 
# # check for duplicates
# MOOS.telem[which(duplicated(MOOS.telem$datetimeAK)),] # no dups
# # # remove duplicates
# MOOS.telem.r = unique(MOOS.telem)
# anyDuplicated(MOOS.telem.r)
# 
# # extract data corresponding to gaps in internal logging
# # create clean set of time stamps to join to
# MOOStimeideal = seq.POSIXt(
#   from = lubridate::round_date(MOOS_start_1, "15 minutes"),
#   to = lubridate::round_date(as.POSIXct(service.endz[["MOOS"]], tz="America/Anchorage"), "15 minutes"),
#   by = "15 min" )
# MOOStimeactual = lubridate::round_date(MOOS.EXO$datetimeAK, "15 minutes")
# MOOStimeGAPS = MOOStimeideal[!MOOStimeideal %in% MOOStimeactual]
# MOOS.telem_replacement = MOOS.telem.r[MOOS.telem.r$datetimeAK %in% MOOStimeGAPS,]
# 
# # format telem data to match internally logged data
# head(MOOS.EXO)
# MOOS.telem_replacement_formatted = 
#   data.frame(Date = date(MOOS.telem_replacement$datetimeAK),
#              Time = strftime(MOOS.telem_replacement$datetimeAK, format="%H:%M:%S"),
#              Time.s = 0,
#              site.ID = "MOOS",
#              Cond.uScm = NA,
#              fDOM.QSU = MOOS.telem_replacement$fDOM_Avg,
#              nLFCond.uScm = NA,
#              ODO.Psat = MOOS.telem_replacement$DOsat_Avg,
#              ODO.Ploc = NA,
#              ODO.mgL = NA,
#              Sal.psu = NA,
#              SpCond.uScm = MOOS.telem_replacement$SpC_Avg,
#              TDS.mgL = NA,
#              Turbidity.FNU = MOOS.telem_replacement$turbidity_Avg,
#              TSS.mgL = NA,
#              Wipe.V = NA,
#              Temp.C = MOOS.telem_replacement$temp_Avg,
#              Battery.V = NA,
#              CablePwr.V = MOOS.telem_replacement$Power_Avg,
#              datetimeAK = MOOS.telem_replacement$datetimeAK
#   )
# 
# # rbind and sort telem data to internally logged data
# MOOS.EXO_stitched = rbind(MOOS.EXO, MOOS.telem_replacement_formatted)
# MOOS.EXO_stitched = MOOS.EXO_stitched[order(MOOS.EXO_stitched$datetimeAK),]
# 
# ## plot to check ##
# # pre-stitching:
# # compile burst measurements for plotting
# MOOS.EXO.st = MOOS.EXO
# MOOS.EXO.st$datetimeAK = lubridate::round_date(as.POSIXct(format(as.POSIXct(MOOS.EXO.st$datetimeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d %H:%M"), "%Y-%m-%d %H:%M", tz="America/Anchorage"), "15 minutes")
# MOOS.EXO.st = MOOS.EXO.st %>%
#   select(datetimeAK, SpCond.uScm, Turbidity.FNU, Temp.C, fDOM.QSU, ODO.Psat, Battery.V) %>%
#   group_by(datetimeAK) %>%
#   summarize_all(list(~mean(.),~sd(.)), na.rm = TRUE)
# names(MOOS.EXO.st) = gsub("_mean", ".mn", names(MOOS.EXO.st))
# names(MOOS.EXO.st) = gsub("_sd", ".SD", names(MOOS.EXO.st))
# #plot burst-compiled data and save plots
# pdf("./plots/EXO/MOOS.EXO_intlogged_raw.pdf", width = 14, height =9, onefile=FALSE)
# makePlotEXO(MOOS.service,MOOS.EXO.st)
# dev.off()
# #
# # post-stitching:
# # compile burst measurements for plotting
# MOOS.EXO.st = MOOS.EXO_stitched
# MOOS.EXO.st$datetimeAK = lubridate::round_date(as.POSIXct(format(as.POSIXct(MOOS.EXO.st$datetimeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d %H:%M"), "%Y-%m-%d %H:%M", tz="America/Anchorage"), "15 minutes")
# MOOS.EXO.st = MOOS.EXO.st %>%
#   select(datetimeAK, SpCond.uScm, Turbidity.FNU, Temp.C, fDOM.QSU, ODO.Psat, Battery.V) %>%
#   group_by(datetimeAK) %>%
#   summarize_all(list(~mean(.),~sd(.)), na.rm = TRUE)
# names(MOOS.EXO.st) = gsub("_mean", ".mn", names(MOOS.EXO.st))
# names(MOOS.EXO.st) = gsub("_sd", ".SD", names(MOOS.EXO.st))
# #plot burst-compiled data and save plots
# pdf("./plots/EXO/MOOS.EXO_stitched_raw.pdf", width = 14, height =9, onefile=FALSE)
# makePlotEXO(MOOS.service,MOOS.EXO.st)
# dev.off()
# 
# 
# #
# 
# #
# #### save stitched internally logged (burst) + telemetry (non-burst) data ####
# 
# FRCH.EXO_stitched$site.ID="FRCH"
# write.csv(FRCH.EXO_stitched, "EXO_processed/FRCH_EXO_stitched_formatted.csv")
# 
# MOOS.EXO_stitched$site.ID="MOOS"
# write.csv(MOOS.EXO_stitched, "EXO_processed/MOOS_EXO_stitched_formatted.csv")

#

write.csv(EXO.FRCH, "~/Documents/DOD_2018_repo/EXO_data/from_internal_harddrive/processed/EXO_FRCH_stitched_formatted.csv")
write.csv(EXO.MOOS, "~/Documents/DOD_2018_repo/EXO_data/from_internal_harddrive/processed/EXO_MOOS_stitched_formatted.csv")

### Check PLOTS #### The only file at this point is EXO.MOOS and we are getting all
  # of the rising limb points for Turbidity and I want to keep those
    # I am trying to find the portion of the script that scrubs those 
plot(as.POSIXct(EXO.MOOS$datetimeAK, tz= "America/Anchorage"), EXO.MOOS$Turbidity.FNU, pch=20, col="black", 
     xlab = "", 
     ylab = "turb",
     ylim = c(0, 300),
     xlim = as.POSIXct(c("2018-05-25 00:00:00", "2018-06-13 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")


#### reload stitched data for cleaning ####

# recommended: clear global environment before proceeding, reload service dates and functions

# load data and rename for editing
setwd("~/Documents/DOD_2018_repo/EXO_data/from_internal_harddrive")

file_list <- list.files(path="processed/", 
                        recursive=F, 
                        pattern="stitched_formatted", 
                        full.names=TRUE)

sitedataz = do.call("list",lapply(file_list,read.csv, header=T,row.names=1))

names(sitedataz) = c("FRCH", "MOOS")

#names(sitedataz) = c(sitedataz[[1]][1,"site.ID"],
#                     sitedataz[[2]][1,"site.ID"],
#                     sitedataz[[3]][1,"site.ID"],
#                     sitedataz[[4]][1,"site.ID"],
#                     sitedataz[[5]][1,"site.ID"])

sitenamez = names(sitedataz)
for(i in sitenamez){
  sitedataz[[i]]$datetimeAK = as.POSIXct(sitedataz[[i]]$datetimeAK, format="%Y-%m-%d %H:%M:%S",tz="America/Anchorage")
}

service.endz <- lapply(service.endz, function(x){as.POSIXct(x, format = "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")})


####################################################################
#### clean combo data of in-air and obvious faulty measurements ####
####################################################################

sitedataz_ic = sitedataz

servicez <- lapply(servicez, function(x){as.POSIXct(x, format = "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")})

# trim to end of deployment
for(i in sitenamez){
  sitedataz_ic[[i]] = sitedataz_ic[[i]][sitedataz_ic[[i]]$datetimeAK < service.endz[[i]],]
}

# replace pts over temp threshold and under data thresholds on service dates with NA
for(i in sitenamez){
  dat = sitedataz_ic[[i]] 
  ## add/replace day column ##
  dat$day = as.POSIXct(format(as.POSIXct(dat$datetimeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d"), "%Y-%m-%d", tz="America/Anchorage")
  dat$day = as.character(dat$day)
  service.day = format(servicez[[i]], format="%Y-%m-%d", tz="America/Anchorage")
  ## set temp threshold for each service date ##
  # temp threshold to identify in-air points is set here to be x1.5 the upper (75%) quantile of temp data on each service date. Can edit by changing either quantile probability or what it is divided by.
  daily.temp.stats =
    dat[dat$day %in% service.day,] %>%
    select(day, Temp..C) %>%
    group_by(day) %>%
    summarize_all(list(Temp.highQ = quantile), probs = 0.75, na.rm = TRUE) %>%
    mutate_at(vars(-day), ~(.*1.5))
  # join threshold to data #
  dat = left_join(dat, daily.temp.stats, by="day")
  # replace pts above temp theshold on service dates with NA #
  dat[which(dat$Temp..C > dat$Temp.highQ), c(5:15,17)] = NA
  ## set additional thresholds for each service date ##
  # threshold to identify in-air points is set here to be 1/2 the lower (25%) quantile of all data on each service date. Can edit by changing either quantile probability or what it is divided by.
  daily.sats =
    dat[dat$day %in% service.day,] %>%
    select(day, Cond.µS.cm, fDOM.QSU,
           nLF.Cond.µS.cm, Sal.psu,
           SpCond.µS.cm, TDS.mg.L, Turbidity.FNU, TSS.mg.L, Temp..C) %>%
    group_by(day) %>%
    summarize_all(list(lowQ = quantile), probs = 0.25, na.rm = TRUE) %>%
    mutate_at(vars(-day), ~(./2))
  ## join threshold to data ##
  dat = left_join(dat, daily.sats, by="day")
  ## replace pts below theshold on service dates with NA ##
  dat$Cond.µS.cm[dat$Cond.µS.cm < dat$Cond.uScm_lowQ] = NA
  dat$fDOM.QSU[dat$fDOM.QSU < dat$fDOM.QSU_lowQ] = NA
  dat$nLF.Cond.µS.cm[dat$nLF.Cond.µS.cm < dat$nLFCond.uScm_lowQ] = NA
  dat$Sal.psu[dat$Sal.psu < dat$Sal.psu_lowQ] = NA
  dat$SpCond.µS.cm[dat$SpCond.µS.cm < dat$SpCond.uScm_lowQ] = NA
  dat$TDS.mg.L[dat$TDS.mg.L < dat$TDS.mgL_lowQ] = NA
  dat$Turbidity.FNU[dat$Turbidity.FNU < dat$Turbidity.FNU_lowQ] = NA
  dat$TSS.mg.L[dat$TSS.mg.L < dat$TSS.mgL_lowQ] = NA
  dat$Temp..C[dat$Temp..C < dat$Temp.C_lowQ] = NA
  # replace in list
  sitedataz_ic[[i]] = dat[,-c(21:34)]
}

# still good with the rising limb plots after this threshold stuff

#### I was having a problem running the entire for loop and found the problem that the day and 
# service day structures were different so they werent syncing so this bottom part is me trying
# to trouble shoot line by line 
# ###
# 
# EXO.processed$day = as.POSIXct(format(as.POSIXct(EXO.processed$datetimeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d"), "%Y-%m-%d", tz="America/Anchorage")
# service.day = format(servicez[[i]], format="%Y-%m-%d", tz="America/Anchorage")
# EXO.processed$day <- as.character(EXO.processed$day)
# 
# daily.temp.stats =
#   EXO.processed[EXO.processed$day %in% service.day,] %>%
#   select(day, Temp..C) %>%
#   group_by(day) %>%
#   summarize_all(list(Temp.highQ = quantile), probs = 0.75, na.rm = TRUE) %>%
#   mutate_at(vars(-day), ~(.*1.5))
# 
# # join threshold to data #
# EXO.processed = left_join(EXO.processed, daily.temp.stats, by="day")
# # replace pts above temp theshold on service dates with NA #
# EXO.processed[which(EXO.processed$Temp..C > EXO.processed$Temp.highQ), c(5:15,17)] = NA
# ## set additional thresholds for each service date ##
# # threshold to identify in-air points is set here to be 1/2 the lower (25%) quantile of all data on each service date. Can edit by changing either quantile probability or what it is divided by.
# daily.sats =
#   EXO.processed[EXO.processed$day %in% service.day,] %>%
#   select(day, Cond.µS.cm, fDOM.QSU,
#          nLF.Cond.µS.cm, Sal.psu,
#          SpCond.µS.cm, TDS.mg.L, Turbidity.FNU, TSS.mg.L, Temp..C) %>%
#   group_by(day) %>%
#   summarize_all(list(lowQ = quantile), probs = 0.25, na.rm = TRUE) %>%
#   mutate_at(vars(-day), ~(./2))
# ## join threshold to data ##
# EXO.processed = left_join(EXO.processed, daily.sats, by="day")
# ## replace pts below theshold on service dates with NA ##
# dat$Cond.µS.cm[dat$Cond.µS.cm < dat$Cond.uScm_lowQ] = NA
# dat$fDOM.QSU[dat$fDOM.QSU < dat$fDOM.QSU_lowQ] = NA
# dat$nLF.Cond.µS.cm[dat$nLF.Cond.µS.cm < dat$nLFCond.uScm_lowQ] = NA
# dat$Sal.psu[dat$Sal.psu < dat$Sal.psu_lowQ] = NA
# dat$SpCond.µS.cm[dat$SpCond.µS.cm < dat$SpCond.uScm_lowQ] = NA
# dat$TDS.mg.L[dat$TDS.mg.L < dat$TDS.mgL_lowQ] = NA
# dat$Turbidity.FNU[dat$Turbidity.FNU < dat$Turbidity.FNU_lowQ] = NA
# dat$TSS.mg.L[dat$TSS.mg.L < dat$TSS.mgL_lowQ] = NA
# dat$Temp..C[dat$Temp..C < dat$Temp.C_lowQ] = NA
# # replace in list
# sitedataz_ic[[i]] = dat[,-c(21:34)]
# }
# 
# ###

### FRCH ###
FRCH.EXO = sitedataz_ic[["FRCH"]]
## add/replace day column ##
FRCH.EXO$day = as.POSIXct(format(as.POSIXct(FRCH.EXO$datetimeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d"), "%Y-%m-%d", tz="America/Anchorage")
FRCH.service.day = as.POSIXct(format(as.POSIXct(FRCH.service,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d"), "%Y-%m-%d", tz="America/Anchorage")
## set temp threshold for each service date ##
# temp threshold to identify in-air points is set here to be x1.5 the upper (75%) quantile of temp data on each service date. Can edit by changing either quantile probability or what it is divided by.
daily.temp.stats =
  FRCH.EXO[FRCH.EXO$day %in% FRCH.service.day,] %>%
  select(day, Temp..C) %>%
  group_by(day) %>%
  summarize_all(list(Temp.highQ = quantile), probs = 0.75, na.rm = TRUE) %>%
  mutate_at(vars(-day), ~(.*1.5))

plot(FRCH.EXO$Temp..C ~ FRCH.EXO$datetimeAK)
abline(v=as.POSIXct(FRCH.service, tz="America/Anchorage"), lty=2)
points(daily.temp.stats$Temp.highQ~daily.temp.stats$day, col="red", pch=1)

# join threshold to data #
FRCH.EXO = left_join(FRCH.EXO, daily.temp.stats, by="day")
# replace pts above temp theshold on service dates with NA #
FRCH.EXO[which(FRCH.EXO$Temp..C > FRCH.EXO$Temp.highQ), c(5:15,17)] = NA

## set additional thresholds for each service date ##
# threshold to identify in-air points is set here to be 1/2 the lower (25%) quantile of all data on each service date. Can edit by changing either quantile probability or what it is divided by.
daily.stats =
  FRCH.EXO[FRCH.EXO$day %in% FRCH.service.day,] %>%
  select(day, Cond.µS.cm, fDOM.QSU,
         nLF.Cond.µS.cm, Sal.psu,
         SpCond.µS.cm, TDS.mg.L, Turbidity.FNU, TSS.mg.L, Temp..C) %>%
  group_by(day) %>%
  summarize_all(list(lowQ = quantile), probs = 0.25, na.rm = TRUE) %>%
  mutate_at(vars(-day), ~(./2.5))

plot(FRCH.EXO$Temp..C ~ FRCH.EXO$datetimeAK)
abline(v=as.POSIXct(FRCH.service, tz="America/Anchorage"), lty=2)
points(daily.stats$Temp..C_lowQ~daily.temp.stats$day, col="blue", pch=1)
points(daily.temp.stats$Temp.highQ~daily.temp.stats$day, col="red", pch=1)

## join threshold to data ##
FRCH.EXO = left_join(FRCH.EXO, daily.stats, by="day")

## replace pts below theshold on service dates with NA ##
FRCH.EXO$Cond.µS.cm[FRCH.EXO$Cond.µS.cm < FRCH.EXO$Cond.uScm_lowQ] = NA
FRCH.EXO$fDOM.QSU[FRCH.EXO$fDOM.QSU < FRCH.EXO$fDOM.QSU_lowQ] = NA
FRCH.EXO$nLF.Cond.µS.cm[FRCH.EXO$nLF.Cond.µS.cm < FRCH.EXO$nLFCond.uScm_lowQ] = NA
FRCH.EXO$Sal.psu[FRCH.EXO$Sal.psu < FRCH.EXO$Sal.psu_lowQ] = NA
FRCH.EXO$SpCond.µS.cm[FRCH.EXO$SpCond.µS.cm < FRCH.EXO$SpCond.uScm_lowQ] = NA
FRCH.EXO$TDS.mg.L[FRCH.EXO$TDS.mg.L < FRCH.EXO$TDS.mgL_lowQ] = NA
FRCH.EXO$Turbidity.FNU[FRCH.EXO$Turbidity.FNU < FRCH.EXO$Turbidity.FNU_lowQ] = NA
FRCH.EXO$TSS.mg.L[FRCH.EXO$TSS.mg.L < FRCH.EXO$TSS.mgL_lowQ] = NA
FRCH.EXO$Temp..C[FRCH.EXO$Temp..C < FRCH.EXO$Temp..C_lowQ] = NA
# replace in list
sitedataz_ic[["FRCH"]] = FRCH.EXO


### MOOS ###
MOOS.EXO = sitedataz[["MOOS"]]
## add/replace day column ##
MOOS.EXO$day = as.POSIXct(format(as.POSIXct(MOOS.EXO$datetimeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d"), "%Y-%m-%d", tz="America/Anchorage")
MOOS.service.day = as.POSIXct(format(as.POSIXct(MOOS.service,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d"), "%Y-%m-%d", tz="America/Anchorage")

## set temp threshold for each service date ##
# temp threshold to identify in-air points is set here to be x1.5 the upper (75%) quantile of temp data on each service date. Can edit by changing either quantile probability or what it is divided by.
daily.temp.stats =
  MOOS.EXO[MOOS.EXO$day %in% MOOS.service.day,] %>%
  select(day, Temp..C) %>%
  group_by(day) %>%
  summarize_all(list(Temp.highQ = quantile), probs = 0.75, na.rm = TRUE) %>%
  mutate_at(vars(-day), ~(.*1.2))

plot(MOOS.EXO$Temp..C ~ MOOS.EXO$datetimeAK)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), lty=2)
points(daily.temp.stats$Temp.highQ~daily.temp.stats$day, col="red", pch=1)

# join threshold to data #
MOOS.EXO = left_join(MOOS.EXO, daily.temp.stats, by="day")
# replace pts above temp theshold on service dates with NA #
MOOS.EXO[which(MOOS.EXO$Temp..C > MOOS.EXO$Temp.highQ), c(5:15,17)] = NA

## set threshold for each service date ##
# threshold to identify in-air points is set here to be 1/2 the lower (25%) quantile of all data on each service date. Can edit by changing either quantile probability or what it is divided by.
daily.stats =
  MOOS.EXO[MOOS.EXO$day %in% MOOS.service.day,] %>%
  select(day, Cond.µS.cm, fDOM.QSU,
         nLF.Cond.µS.cm, Sal.psu,
         SpCond.µS.cm, TDS.mg.L, Turbidity.FNU, TSS.mg.L, Temp..C) %>%
  group_by(day) %>%
  summarize_all(list(lowQ = quantile), probs = 0.25, na.rm = TRUE) %>%
  mutate_at(vars(-day), ~(./2.5))

## join threshold to data ##
MOOS.EXO = left_join(MOOS.EXO, daily.stats, by="day")

plot(MOOS.EXO$Temp..C ~ MOOS.EXO$datetimeAK)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), lty=2)
points(daily.stats$Temp..C_lowQ~daily.temp.stats$day, col="blue", pch=1)
points(daily.temp.stats$Temp.highQ~daily.temp.stats$day, col="red", pch=1)

## replace pts below theshold on service dates with NA ##
MOOS.EXO$Cond.µS.cm[MOOS.EXO$Cond.µS.cm < MOOS.EXO$Cond.uScm_lowQ] = NA
MOOS.EXO$fDOM.QSU[MOOS.EXO$fDOM.QSU < MOOS.EXO$fDOM.QSU_lowQ] = NA
MOOS.EXO$nLF.Cond.µS.cm[MOOS.EXO$nLF.Cond.µS.cm < MOOS.EXO$nLFCond.uScm_lowQ] = NA
MOOS.EXO$Sal.psu[MOOS.EXO$Sal.psu < MOOS.EXO$Sal.psu_lowQ] = NA
MOOS.EXO$SpCond.µS.cm[MOOS.EXO$SpCond.µS.cm < MOOS.EXO$SpCond.uScm_lowQ] = NA
MOOS.EXO$TDS.mg.L[MOOS.EXO$TDS.mg.L < MOOS.EXO$TDS.mgL_lowQ] = NA
MOOS.EXO$Turbidity.FNU[MOOS.EXO$Turbidity.FNU < MOOS.EXO$Turbidity.FNU_lowQ] = NA
MOOS.EXO$TSS.mg.L[MOOS.EXO$TSS.mg.L < MOOS.EXO$TSS.mgL_lowQ] = NA
MOOS.EXO$Temp..C[MOOS.EXO$Temp..C < MOOS.EXO$Temp..C_lowQ] = NA
# replace in list
sitedataz_ic[["MOOS"]] = MOOS.EXO


# still good for the rising points after these thresholds are applied

#### plot and save plots of initially cleaned data ####

sitedataz.st = sitedataz_ic

# compile burst measurements for plotting
for( i in sitenamez){
  sitedataz.st[[i]]$datetimeAK = lubridate::round_date(as.POSIXct(format(as.POSIXct(sitedataz.st[[i]]$datetimeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d %H:%M"), "%Y-%m-%d %H:%M", tz="America/Anchorage"), "15 minutes")
  sitedataz.st[[i]] = sitedataz.st[[i]] %>%
    select(datetimeAK, SpCond.µS.cm, Turbidity.FNU, Temp..C, fDOM.QSU, Battery.V) %>%
    group_by(datetimeAK) %>%
    summarize_all(list(~mean(.),~sd(.)), na.rm = TRUE)
  names(sitedataz.st[[i]]) = gsub("_mean", ".mn", names(sitedataz.st[[i]]))
  names(sitedataz.st[[i]]) = gsub("_sd", ".SD", names(sitedataz.st[[i]]))
}

# plot burst-compiled data and save plots
for( i in sitenamez){
  pdf(paste("./plots/", i, ".EXO_initial_clean.st.pdf", sep=""), width = 14, height =9, onefile=FALSE)
  makePlotEXO(servicez[[i]], sitedataz.st[[i]])
  dev.off()
}

#### save initially cleaned stitched internally logged (burst) + telemetry (non-burst) data ####

# remove quantile cols
for(i in sitenamez){
  sitedataz_ic[[i]] = sitedataz_ic[[i]][,1:21]
}

# check that col headers are the same
names(sitedataz_ic[["MOOS"]]) == names(sitedataz_ic[["FRCH"]])

write.csv(sitedataz_ic[["FRCH"]], "~/Documents/DOD_2018_repo/EXO_data/from_internal_harddrive/processed/FRCH_EXO_stitched_initialclean.csv")
write.csv(sitedataz_ic[["MOOS"]], "~/Documents/DOD_2018_repo/EXO_data/from_internal_harddrive/processed/MOOS_EXO_stitched_initialclean.csv")

#
#### reload stitched + initially cleaned data for burst compiling ####

# recommended: clear global environment before proceeding, reload service dates and functions

# load data and rename for editing
file_list <- list.files(path="processed/", 
                        recursive=F, 
                        pattern="stitched_initialclean", 
                        full.names=TRUE)
sitedataz = do.call("list",lapply(file_list,read.csv, header=T,row.names=1))

names(sitedataz) = c("FRCH", "MOOS")

#names(sitedataz) = c(sitedataz[[1]][["site.ID"]][1],
#                     sitedataz[[2]][["site.ID"]][1],
#                     sitedataz[[3]][["site.ID"]][1],
#                     sitedataz[[4]][["site.ID"]][1],
#                     sitedataz[[5]][["site.ID"]][1])



#### SEMI-automatic removal of outliers ####

# ("aord" = "automatic outlier removal done") #

# based on:

# 1) Jumps in temp and bottomed-out fDOM values, which indicate that the instrument was out of the water ***(note that temp threshold must be checked and set for each site using .st plots and changed as temp goes up over time!!) ***. 

# 2) High standard deviations of burst readings. "High" =  > 5 * mean SD for MOOS and > 4 for FRCH

# 3) Extremely high (>1000 FNU) turbidity values.

# <<< make sure from exploratory plots that cut-offs are well-away from data!! >>> #

#### compile bursts within 1 min ####

# convert columns to numeric
for(i in sitenamez){
  sitedataz[[i]]$datetimeAK = as.POSIXct(sitedataz[[i]]$datetimeAK, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
  sitedataz[[i]][c(3,5:17)] <- sapply(sitedataz[[i]][c(3,5:17)],as.numeric)
  sapply(sitedataz[[i]], class)
}

sitedataz.st = sitedataz


for(i in sitenamez){
  sitedataz.st[[i]]$min = lubridate::round_date(sitedataz.st[[i]]$datetimeAK, "15 minutes")
  sitedataz.st[[i]] =
    sitedataz.st[[i]] %>% 
    select(min, 
           Site.Name, 
           fDOM.QSU,
           SpCond.µS.cm,
           Turbidity.FNU,
           Temp..C,
           Battery.V,
           Cable.Pwr.V) %>%
    group_by(min, Site.Name) %>%
    summarise(across(where(is.numeric), list(mn = mean, sd = sd)))
  sitedataz.st[[i]]$datetimeAK<-as.POSIXct(sitedataz.st[[i]]$min, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
  names(sitedataz.st[[i]]) = gsub("_mn",".mn",names(sitedataz.st[[i]]))
  names(sitedataz.st[[i]]) = gsub("_sd",".SD",names(sitedataz.st[[i]]))
}

# this is taking means of 15 minute intervals so that is why we lose a lot of points

plot(as.POSIXct(sitedataz.st$MOOS$datetimeAK, tz= "America/Anchorage"), sitedataz.st$MOOS$Turbidity.FNU.mn, pch=20, col="black", 
     xlab = "", 
     ylab = "turb",
     ylim = c(0, 300),
     xlim = as.POSIXct(c("2018-05-25 00:00:00", "2018-06-13 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")


#### plot .st data and save plots ####

for( i in sitenamez){
  pdf(paste("plots/", i, ".EXO.st.pdf", sep=""), width = 15, height =12, onefile=FALSE)
  makePlotEXO(servicez[[i]], sitedataz.st[[i]])
  dev.off()
}

col.mn = c("fDOM.QSU.mn", "SpCond.uScm.mn", "Turbidity.FNU.mn", "Temp.C.mn")
col.SD = c("fDOM.QSU.SD", "SpCond.uScm.SD", "Turbidity.FNU.SD", "Temp.C.SD")

### FRCH ###
# ("aord" = "automatic outlier removal done") #
FRCH.EXO.aord = sitedataz.st[["FRCH"]]
#FRCH.EXO.aord = filter(FRCH.EXO.st, Temp..C.mn<10, !is.na(Temp..C.mn))  # removes entire row
FRCH.EXO.aord = filter(FRCH.EXO.aord, fDOM.QSU.mn>20, !is.na(fDOM.QSU.mn))  # removes entire row
FRCH.EXO.aord$Turbidity.FNU.mn[FRCH.EXO.aord$Turbidity.FNU.SD> (4*mean(FRCH.EXO.aord$Turbidity.FNU.SD, na.rm = T))] = NA # replaces individual turb values with NA
FRCH.EXO.aord$fDOM.QSU.mn[FRCH.EXO.aord$fDOM.QSU.SD> (4*mean(FRCH.EXO.aord$fDOM.QSU.SD, na.rm = T))] = NA # replaces individual turb values with NA
FRCH.EXO.aord$SpCond.µS.cm.mn[FRCH.EXO.aord$SpCond.µS.cm.SD > (4 * mean(FRCH.EXO.aord$SpCond.µS.cm.SD, na.rm = T))] = NA
FRCH.EXO.aord$Turbidity.FNU.mn[FRCH.EXO.aord$Turbidity.FNU.mn> 1000] = NA # replaces individual turb values with NA

# for(i in 1:7) {
#   FRCH.EXO.aord[[col.mn[i]]][FRCH.EXO.aord[[col.SD[i]]] > (10*mean(FRCH.EXO.aord[[col.SD[i]]], na.rm = T))] = NA # replaces individual values with NA
# }

### MOOS ###
# ("aord" = "automatic outlier removal done") #
MOOS.EXO.aord = sitedataz.st[["MOOS"]]
MOOS.EXO.aord$Temp..C.mn[MOOS.EXO.aord$Temp..C.mn > 15] = NA
MOOS.EXO.aord = filter(MOOS.EXO.aord, fDOM.QSU.mn > 10, !is.na(fDOM.QSU.mn))  # removes entire row
MOOS.EXO.aord$Turbidity.FNU.mn[MOOS.EXO.aord$Turbidity.FNU.SD> (17*mean(MOOS.EXO.aord$Turbidity.FNU.SD, na.rm = T))] = NA # replaces individual turb values with NA
MOOS.EXO.aord$fDOM.QSU.mn[MOOS.EXO.aord$fDOM.QSU.SD> (5*mean(MOOS.EXO.aord$fDOM.QSU.SD, na.rm = T))] = NA # replaces individual turb values with NA
MOOS.EXO.aord$SpCond.µS.cm.mn[MOOS.EXO.aord$SpCond.µS.cm.SD > (5 * mean(MOOS.EXO.aord$SpCond.µS.cm.SD, na.rm = T))] = NA
MOOS.EXO.aord$Turbidity.FNU.mn[MOOS.EXO.aord$Turbidity.FNU.mn> 250] = NA # replaces individual turb values with NA

# plot(as.POSIXct(MOOS.EXO.aord$datetimeAK, tz= "America/Anchorage"), MOOS.EXO.aord$Turbidity.FNU.mn, pch=20, col="black", 
#      xlab = "", 
#      ylab = "turb",
#      ylim = c(0, 300),
#      xlim = as.POSIXct(c("2018-05-25 00:00:00", "2018-06-13 00:00:00")))
# #axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
# abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")
# 

# Not worth it here due to rapid changes in temperature caused by ice melt
#for(i in 1:7) {
#  MOOS.EXO.aord[[col.mn[i]]][MOOS.EXO.aord[[col.SD[i]]] > (5*mean(MOOS.EXO.aord[[col.SD[i]]], na.rm = T))] = NA # replaces individual values with NA
#}


sitedataz.aord = list(FRCH.EXO.aord,MOOS.EXO.aord)
names(sitedataz.aord) = sitenamez

#### plot "aord" data and save plots ####

pdf("plots/FRCH.EXO.aord.pdf", width = 15, height =12, onefile=FALSE)
makePlotEXO(FRCH.service, FRCH.EXO.aord)
dev.off()

pdf("plots/MOOS.EXO.aord.pdf", width = 15, height =12, onefile=FALSE)
makePlotEXO(MOOS.service, MOOS.EXO.aord)
dev.off()

#### save ".aord" data ####

FRCH.EXO.aord$Site.Name = "FRCH"
MOOS.EXO.aord$Site.Name = "MOOS"


EXO.aord.out = rbind(FRCH.EXO.aord, MOOS.EXO.aord)

write.csv(EXO.aord.out, "~/Documents/DOD_2018_repo/EXO_data/from_internal_harddrive/processed/EXO.aord.csv")

# Make list for manual cleaning
EXO.aord.out <- data.frame(EXO.aord.out)

EXO.aord <- split(EXO.aord.out, f = EXO.aord.out$Site.Name) 

#########################
#### Manual cleaning #### 
#########################

### Not needed in current workflow:
# ## Read in .aord as needed
# EXO.list <- list.files(path="processed/", 
#                        recursive=F, 
#                        pattern="aord", 
#                        full.names=TRUE)
# 
# EXO.aord <- lapply(EXO.list, 
#                  read.csv, 
#                  stringsAsFactors=FALSE, 
#                  header = TRUE)

# Should do this programmatically, but file names contain junk that would need to be trimmed off
names(EXO.aord) <- c("FRCH", "MOOS")
###

EXO.cl <- EXO.aord
  
# Format datetime
EXO.cl <- lapply(EXO.cl, function(x) {
  mutate(x, datetimeAK = as.POSIXct(datetimeAK, format = "%Y-%m-%d %H:%M:%S", tz= "America/Anchorage"))
})
# Containers for adjusted records
EXO.cl = EXO.aord
EXO.cl <- lapply(EXO.cl, function(x) {
  mutate(x, SpCond.uScm.mn.adj = SpCond.µS.cm.mn) %>%
  mutate(x, Turbidity.FNU.mn.adj = Turbidity.FNU.mn) %>%
  mutate(x, fDOM.QSU.mn.adj = fDOM.QSU.mn)
})

### FRCH ###
#FRCH.EXO.aord <- EXO.aord[["FRCH"]]
FRCH.EXO.cl <- EXO.cl[["FRCH"]]

## Baseline adjust SPCond ##
# FRCH.EXO.cl <- FRCH.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK < "2019-06-27 16:00:00" & datetimeAK > "2019-06-13 13:30:00", SpCond.uScm.mn + 55.5, SpCond.uScm.mn)) 
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK <= "2019-05-12 06:30:00" & datetimeAK > "2019-05-09 13:30:00", SpCond.uScm.mn + 52, SpCond.uScm.mn.adj)) 
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK < "2019-05-22 15:45:00" & datetimeAK > "2019-05-12 13:30:00", SpCond.uScm.mn + 46, SpCond.uScm.mn.adj)) 
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK <= "2019-05-25 18:00:00" & datetimeAK > "2019-05-22 15:45:00", SpCond.uScm.mn + 64.3, SpCond.uScm.mn.adj)) 
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK < "2019-05-31 14:45:00" & datetimeAK > "2019-05-25 18:00:00", SpCond.uScm.mn + 48.7, SpCond.uScm.mn.adj)) 
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK < "2019-06-13 13:30:00" & datetimeAK > "2019-05-31 14:45:00", SpCond.uScm.mn + 50.2, SpCond.uScm.mn.adj)) 
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK > "2019-08-08 11:00:00" & datetimeAK < "2019-09-03 15:45:00", SpCond.uScm.mn + 8.6, SpCond.uScm.mn.adj))
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK < "2019-09-03 15:45:00" & datetimeAK > "2019-08-27 13:30:00", SpCond.uScm.mn.adj - 3.5, SpCond.uScm.mn.adj)) 
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK < "2019-09-26 12:15:00" & datetimeAK > "2019-09-03 15:45:00", SpCond.uScm.mn.adj + 10.3, SpCond.uScm.mn.adj)) 
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK > "2019-09-26 12:15:00" , SpCond.uScm.mn.adj + 2.4, SpCond.uScm.mn.adj)) 
# Not perfect- revisit with anions & cations in-hand

## Clean turbidity: remove errant points, baseline adjust ##
plot(as.POSIXct(FRCH.EXO.cl$datetimeAK, tz= "America/Anchorage"), FRCH.EXO.cl$Turbidity.FNU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "Turb",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-05-20 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(FRCH.service, tz="America/Anchorage"), col="red")

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK >= "2018-06-13" & datetimeAK <= "2018-06-14" & Turbidity.FNU.mn > 15, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK >= "2018-06-21" & datetimeAK <= "2018-06-28" & Turbidity.FNU.mn > 30, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK >= "2018-06-21" & datetimeAK <= "2018-06-28" & Turbidity.FNU.mn > 10, NA, .)))


FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK >= "2018-07-08" & datetimeAK <= "2018-07-11" & Turbidity.FNU.mn > 50, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK >= "2018-07-16" & datetimeAK <= "2018-07-17" & Turbidity.FNU.mn > 30, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK >= "2018-07-17" & datetimeAK <= "2018-07-19" & Turbidity.FNU.mn > 15, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK >= "2018-07-20" & datetimeAK <= "2018-07-25" & Turbidity.FNU.mn > 7.5, NA, .)))


FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK >= "2018-07-21" & datetimeAK <= "2018-07-28" & Turbidity.FNU.mn > 70, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK >= "2018-08-11" & datetimeAK <= "2018-08-19" & Turbidity.FNU.mn > 41, NA, .)))


FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK >= "2018-10-05" & datetimeAK <= "2018-10-12" & Turbidity.FNU.mn < 0, NA, .)))

#baseline adjust turbidity
# FRCH.EXO.cl <- FRCH.EXO.cl %>% 
#   mutate(Turbidity.FNU.mn.adj = ifelse(datetimeAK < "2019-08-02 18:00:00" & datetimeAK > "2019-07-12 10:00:00", Turbidity.FNU.mn + 0.74, Turbidity.FNU.mn)) 
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>%
#   mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
#                 ~ifelse(datetimeAK >= "2019-08-31" & datetimeAK < "2019-09-20" & Turbidity.FNU.mn > 40, NA, .)))

## Remove errant points ##
#SpCond

plot(as.POSIXct(FRCH.EXO.cl$datetimeAK, tz= "America/Anchorage"), FRCH.EXO.cl$SpCond.uScm.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "SPC",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-05-20 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(FRCH.service, tz="America/Anchorage"), col="red")


FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(SpCond.uScm.mn.adj, SpCond.µS.cm.SD), 
                ~ifelse(datetimeAK >= "2018-10-01" & SpCond.uScm.mn.adj > 80, NA, .)))


# fDOM

# single plot check 
### FRCH ### 
plot(as.POSIXct(FRCH.EXO.cl$datetimeAK, tz= "America/Anchorage"), FRCH.EXO.cl$fDOM.QSU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "fDOM",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-04-30 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(FRCH.service, tz="America/Anchorage"), col="red")

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-06-05" & datetimeAK <= "2018-06-14" & fDOM.QSU.mn < 51, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-06-12" & datetimeAK <= "2018-06-14" & fDOM.QSU.mn > 56, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-06-18" & datetimeAK <= "2018-06-20" & fDOM.QSU.mn < 53.1, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-06-20" & datetimeAK <= "2018-06-21" & fDOM.QSU.mn > 55, NA, .)))


FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-06-20" & datetimeAK <= "2018-06-28" & fDOM.QSU.mn > 60, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-06-20" & datetimeAK <= "2018-06-28" & fDOM.QSU.mn < 49, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-06-27" & datetimeAK <= "2018-06-28" & fDOM.QSU.mn > 54, NA, .)))


FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-06-28" & datetimeAK <= "2018-07-11" & fDOM.QSU.mn < 49, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-06-28" & datetimeAK <= "2018-07-11" & fDOM.QSU.mn > 162, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-06-30" & datetimeAK <= "2018-07-01" & fDOM.QSU.mn < 52, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-07-02" & datetimeAK <= "2018-07-04" & fDOM.QSU.mn < 120, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-07-03" & datetimeAK <= "2018-07-07" & fDOM.QSU.mn < 70, NA, .)))


FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-07-05" & datetimeAK <= "2018-07-06" & fDOM.QSU.mn < 90, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-07-11" & datetimeAK <= "2018-07-12" & fDOM.QSU.mn > 84, NA, .)))


FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-07-18" & datetimeAK <= "2018-07-25" & fDOM.QSU.mn < 60, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-07-31" & datetimeAK <= "2018-08-02" & fDOM.QSU.mn > 68, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-08-01" & datetimeAK <= "2018-08-03" & fDOM.QSU.mn > 62, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-08-02" & datetimeAK <= "2018-08-03" & fDOM.QSU.mn < 60, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-08-15" & datetimeAK <= "2018-08-16" & fDOM.QSU.mn < 97, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-08-21" & datetimeAK <= "2018-08-22" & fDOM.QSU.mn < 84.5, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-08-23" & datetimeAK <= "2018-08-24" & fDOM.QSU.mn < 89, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-06" & datetimeAK <= "2018-09-09" & fDOM.QSU.mn < 97, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-13" & datetimeAK <= "2018-09-15" & fDOM.QSU.mn < 76, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-21" & datetimeAK <= "2018-09-29" & fDOM.QSU.mn < 100, NA, .)))


FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-13" & datetimeAK <= "2018-10-05" & fDOM.QSU.mn < 66.5, NA, .)))


FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-30" & datetimeAK <= "2018-10-01" & fDOM.QSU.mn < 80, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-30" & datetimeAK <= "2018-10-05" & fDOM.QSU.mn < 70, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-13" & datetimeAK <= "2018-10-06" & fDOM.QSU.mn > 110, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-10-08" & fDOM.QSU.mn > 0, NA, .)))

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-21" & datetimeAK <= "2018-09-29" & fDOM.QSU.mn > 0, NA, .)))


plot(as.POSIXct(FRCH.EXO.cl$datetimeAK, tz= "America/Anchorage"), FRCH.EXO.cl$fDOM.QSU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "fDOM",
     ylim = c(50, 150),
     xlim = as.POSIXct(c("2018-09-21 00:00:00", "2018-09-29 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(FRCH.service, tz="America/Anchorage"), col="red")


# Temp
#single plot, time window
### FRCH ### 
plot(as.POSIXct(FRCH.EXO.cl$datetimeAK, tz= "America/Anchorage"), FRCH.EXO.cl$Temp..C.mn, pch=20, col="black", 
     xlab = "", 
     ylab = "fDOM",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-04-30 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(FRCH.service, tz="America/Anchorage"), col="red")

FRCH.EXO.cl <- FRCH.EXO.cl %>%
  mutate(across(c(Temp..C.mn, Temp..C.SD), 
                ~ifelse(datetimeAK >= "2018-10-09" & Temp..C.mn > -5, NA, .)))

write.csv(FRCH.EXO.cl, here("EXO_data", "from_internal_harddrive", "processed", "EXO_FRCH_final_formatted.csv"), row.names = FALSE)

# # dataframe for drift regression
# FR.dates <- c("2018-06-27 14:45:00", "2018-07-11 14:45:00") # diagnostics check at this time # the other diagnostic checks are during NA points 
# FR.Temp <- c(7.866, 5.787)
# FR.SPC <- c(81.8, 85.16)
# FR.fDOM <- c(72.41, 77.47)
# FR.Turb <- c(3.89, 5.96)
# 
# FR.drift <- data.frame(cbind("datetimeAK" = FR.dates, "Temp" = FR.Temp, "SPC" = FR.SPC, "fDOM" = FR.fDOM, "Turb" = FR.Turb))
# FR.drift$datetimeAK <- as.POSIXct(FR.drift$datetimeAK, format = "%Y-%m-%d %H:%M:%S", tz = "America/Anchorage")
# FR.drift$doy <- sapply(FR.drift$datetimeAK, function(x) julian(x, origin = as.POSIXct(paste0(format(x, "%Y"),'-01-01'), tz = 'America/Anchorage')))
# FR.drift <- FR.drift %>% mutate(across(where(is.character), ~as.numeric(.)))
# 
# FR.drift$diffTemp <- FR.drift$Temp - FR.drift$Temp[1]
# FR.drift$diffSPC <- FR.drift$SPC - FR.drift$SPC[1]
# FR.drift$difffDOM <- FR.drift$fDOM - FR.drift$fDOM[1]
# FR.drift$diffTurb <- FR.drift$Turb - FR.drift$Turb[1]
# 
# 
# # FR.drift$diffabs254 <- FR.drift$abs254 - FR.drift$abs254[1]
# # FR.drift$diffabs350 <- FR.drift$abs350 - FR.drift$abs350[1]
# 
# FR.Temp.drift <- lm(diffTemp ~ doy, data = FR.drift)
# #int = 26.3696, slope = -0.1485 
# 
# FR.SPC.drift <- lm(diffSPC ~ doy, data = FR.drift)
# #int = -42.62, slope = 0.24  
# 
# FR.fDOM.drift <- lm(difffDOM ~ doy, data = FR.drift)
# #int = -64.1799, slope = 0.3614  
# 
# FR.Turb.drift <- lm(diffTurb ~ doy, data = FR.drift)
# #int = -26.2554, slope = 0.1479  
# 
# 
# FRCH.EXO.cl$doy <- sapply(FRCH.EXO.cl$datetimeAK, function(x) julian(x, origin = as.POSIXct(paste0(format(x, "%Y"),'-01-01'), tz = 'America/Anchorage')))
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>%
#   mutate(Temp.adj = ifelse(datetimeAK >= "2018-06-27 14:45:00" & datetimeAK <= "2018-07-11 14:45:00", Temp..C.mn - ((doy - 177.5729)*-0.1485), Temp..C.mn))
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>%
#   mutate(SPC.adj = ifelse(datetimeAK >= "2018-06-27 14:45:00" & datetimeAK <= "2018-07-11 14:45:00", SpCond.µS.cm.mn - ((doy - 177.5729)*0.24), SpCond.µS.cm.mn))
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>%
#   mutate(fDOM.adj = ifelse(datetimeAK >= "2018-06-27 14:45:00" & datetimeAK <= "2018-07-11 14:45:00", fDOM.QSU.mn - ((doy - 177.5729)*0.3614 ), fDOM.QSU.mn))
# 
# FRCH.EXO.cl <- FRCH.EXO.cl %>%
#   mutate(Turb.adj = ifelse(datetimeAK >= "2018-06-27 14:45:00" & datetimeAK <= "2018-07-11 14:45:00", Turbidity.FNU.mn - ((doy - 177.5729)*0.1479 ), Turbidity.FNU.mn))


### MOOS ###
#MOOS.EXO.cl <- MOOS.EXO.aord
MOOS.EXO.cl <- EXO.cl[["MOOS"]]

## Remove out-of-water time periods, all variables
# MOOS.EXO.cl <- MOOS.EXO.cl %>%
#   mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD, ODO.Ploc.mn, ODO.Ploc.SD, ODO.Psat.mn, ODO.Psat.SD, ODO.mgL.mn, ODO.mgL.SD, Turbidity.FNU.mn.adj, Turbidity.FNU.SD, Temp.C.mn, Temp.C.SD, SpCond.uScm.mn.adj, SpCond.uScm.SD), 
#                 ~ifelse(datetimeAK >= "2019-08-10 12:00:00" & datetimeAK < "2019-08-12 15:00:00", NA, .)))
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>%
#   mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD, ODO.Ploc.mn, ODO.Ploc.SD, ODO.Psat.mn, ODO.Psat.SD, ODO.mgL.mn, ODO.mgL.SD, Turbidity.FNU.mn.adj, Turbidity.FNU.SD, Temp.C.mn, Temp.C.SD, SpCond.uScm.mn.adj, SpCond.uScm.SD), 
#                 ~ifelse(datetimeAK >= "2019-08-20 10:45:00" & datetimeAK < "2019-08-26 15:30:00", NA, .)))
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>%
#   mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD, ODO.Ploc.mn, ODO.Ploc.SD, ODO.Psat.mn, ODO.Psat.SD, ODO.mgL.mn, ODO.mgL.SD, Turbidity.FNU.mn.adj, Turbidity.FNU.SD, Temp.C.mn, Temp.C.SD, SpCond.uScm.mn.adj, SpCond.uScm.SD), 
#                 ~ifelse(datetimeAK > "2019-05-17 19:30:00" & datetimeAK < "2019-05-19 18:00:00", NA, .)))
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>%
#   mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD, ODO.Ploc.mn, ODO.Ploc.SD, ODO.Psat.mn, ODO.Psat.SD, ODO.mgL.mn, ODO.mgL.SD, Turbidity.FNU.mn.adj, Turbidity.FNU.SD, Temp.C.mn, Temp.C.SD, SpCond.uScm.mn.adj, SpCond.uScm.SD), 
#                 ~ifelse(datetimeAK >= "2019-05-31 00:00:00" & datetimeAK < "2019-05-31 12:00:00" & Temp.C.mn > 10, NA, .)))
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>%
#   mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD, ODO.Ploc.mn, ODO.Ploc.SD, ODO.Psat.mn, ODO.Psat.SD, ODO.mgL.mn, ODO.mgL.SD, Turbidity.FNU.mn.adj, Turbidity.FNU.SD, Temp.C.mn, Temp.C.SD, SpCond.uScm.mn.adj, SpCond.uScm.SD), 
#                 ~ifelse(datetimeAK >= "2019-06-27 08:00:00" & datetimeAK < "2019-06-27 12:00:00" & Temp.C.mn > 11, NA, .)))
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>%
#   mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD, ODO.Ploc.mn, ODO.Ploc.SD, ODO.Psat.mn, ODO.Psat.SD, ODO.mgL.mn, ODO.mgL.SD, Turbidity.FNU.mn.adj, Turbidity.FNU.SD, Temp.C.mn, Temp.C.SD, SpCond.uScm.mn.adj, SpCond.uScm.SD), 
#                 ~ifelse(datetimeAK >= "2019-07-12 08:00:00" & datetimeAK < "2019-07-12 19:00:00" & Temp.C.mn > 13, NA, .)))
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>%
#   mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD, ODO.Ploc.mn, ODO.Ploc.SD, ODO.Psat.mn, ODO.Psat.SD, ODO.mgL.mn, ODO.mgL.SD, Turbidity.FNU.mn.adj, Turbidity.FNU.SD, Temp.C.mn, Temp.C.SD, SpCond.uScm.mn.adj, SpCond.uScm.SD), 
#                 ~ifelse(datetimeAK >= "2019-07-26 08:00:00" & datetimeAK < "2019-07-27 19:00:00" & Temp.C.mn > 12, NA, .)))
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>%
#   mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD, ODO.Ploc.mn, ODO.Ploc.SD, ODO.Psat.mn, ODO.Psat.SD, ODO.mgL.mn, ODO.mgL.SD, Turbidity.FNU.mn.adj, Turbidity.FNU.SD, Temp.C.mn, Temp.C.SD, SpCond.uScm.mn.adj, SpCond.uScm.SD), 
#                 ~ifelse(datetimeAK >= "2019-08-08 08:00:00" & datetimeAK < "2019-08-08 19:00:00" & Temp.C.mn > 9, NA, .)))
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>%
#   mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD, ODO.Ploc.mn, ODO.Ploc.SD, ODO.Psat.mn, ODO.Psat.SD, ODO.mgL.mn, ODO.mgL.SD, Turbidity.FNU.mn.adj, Turbidity.FNU.SD, Temp.C.mn, Temp.C.SD, SpCond.uScm.mn.adj, SpCond.uScm.SD), 
#                 ~ifelse(datetimeAK >= "2019-08-20 13:30:00" & datetimeAK < "2019-08-26 18:15:00", NA, .)))
# 
# ## Baseline adjust SPCond ##
# MOOS.EXO.cl <- MOOS.EXO.cl %>%
#   mutate(across(c(SpCond.uScm.mn.adj, SpCond.uScm.SD), 
#                 ~ifelse(SpCond.uScm.mn < 10, NA, .)))
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK > "2019-05-19" & datetimeAK < "2019-05-31 12:45:00", SpCond.uScm.mn.adj + 4, SpCond.uScm.mn.adj)) 
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK > "2019-08-11" & datetimeAK < "2019-08-15", NA, SpCond.uScm.mn.adj)) 
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK > "2019-08-22" & datetimeAK < "2019-09-03 14:15:00", SpCond.uScm.mn.adj + 8, SpCond.uScm.mn.adj)) 
# 
# MOOS.EXO.cl <- MOOS.EXO.cl %>% 
#   mutate(SpCond.uScm.mn.adj = ifelse(datetimeAK > "2019-09-26" , SpCond.uScm.mn.adj - 9, SpCond.uScm.mn.adj)) 

## Remove errant points ##
#SpCond

plot(as.POSIXct(MOOS.EXO.cl$datetimeAK, tz= "America/Anchorage"), MOOS.EXO.cl$SpCond.uScm.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "SPC",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-05-20 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(SpCond.uScm.mn.adj, SpCond.µS.cm.SD), 
                ~ifelse(SpCond.µS.cm.mn < 50, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(SpCond.uScm.mn.adj, SpCond.µS.cm.SD), 
                ~ifelse(datetimeAK >= "2018-08-30" & datetimeAK <= "2018-08-31" & SpCond.uScm.mn.adj > 90, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(SpCond.uScm.mn.adj, SpCond.µS.cm.SD), 
                ~ifelse(datetimeAK >= "2018-10-23" & datetimeAK <= "2018-10-24" & SpCond.uScm.mn.adj < 104, NA, .)))

# Turbidity
plot(as.POSIXct(MOOS.EXO.cl$datetimeAK, tz= "America/Anchorage"), MOOS.EXO.cl$Turbidity.FNU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "turb",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-05-20 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-07-15" & datetimeAK < "2018-07-30" & Turbidity.FNU.mn > 5, NA, .)))


MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-08-15" & datetimeAK < "2018-08-30" & Turbidity.FNU.mn > 125, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-08-31" & datetimeAK < "2018-09-02" & Turbidity.FNU.mn > 80, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-09-02" & datetimeAK < "2018-09-10" & Turbidity.FNU.mn > 200, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-09-04" & datetimeAK < "2018-09-10" & Turbidity.FNU.mn > 100, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-09-10" & datetimeAK < "2018-09-20" & Turbidity.FNU.mn > 30, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-09-14" & datetimeAK < "2018-09-16" & Turbidity.FNU.mn > 15, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-09-18" & datetimeAK < "2018-09-20" & Turbidity.FNU.mn > 20, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-09-20" & datetimeAK < "2018-09-21" & Turbidity.FNU.mn > 30, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-09-21" & datetimeAK < "2018-09-23" & Turbidity.FNU.mn > 80, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-09-23" & datetimeAK < "2018-09-25" & Turbidity.FNU.mn > 150, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-09-29" & datetimeAK < "2018-10-05" & Turbidity.FNU.mn > 30, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-10-10" & datetimeAK < "2018-10-11" & Turbidity.FNU.mn > 30, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-10-15" & datetimeAK < "2018-10-20" & Turbidity.FNU.mn > 11, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(Turbidity.FNU.mn.adj, Turbidity.FNU.SD), 
                ~ifelse(datetimeAK > "2018-10-20" & datetimeAK < "2018-10-30" & Turbidity.FNU.mn > 13, NA, .)))


plot(as.POSIXct(MOOS.EXO.cl$datetimeAK, tz= "America/Anchorage"), MOOS.EXO.cl$Turbidity.FNU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "turb",
     ylim = c(0, 40),
     xlim = as.POSIXct(c("2018-10-20 00:00:00", "2018-10-30 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")



#fDOM
plot(as.POSIXct(MOOS.EXO.cl$datetimeAK, tz= "America/Anchorage"), MOOS.EXO.cl$fDOM.QSU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "fDOM",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-05-20 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(fDOM.QSU.mn < 50, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK > "2018-05-31" & datetimeAK <= "2018-06-13" & fDOM.QSU.mn < 75, NA, .)))


MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK > "2018-08-08" & datetimeAK <= "2018-08-15" & fDOM.QSU.mn < 120, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-08-27" & datetimeAK < "2018-08-30" & fDOM.QSU.mn < 200, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-13" & datetimeAK < "2019-09-28" & fDOM.QSU.mn < 110, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-24" & datetimeAK <= "2018-10-01" & fDOM.QSU.mn < 150, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-25" & datetimeAK <= "2018-09-29" & fDOM.QSU.mn < 175, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-09-29" & datetimeAK <= "2018-09-30" & fDOM.QSU.mn < 170, NA, .)))

MOOS.EXO.cl <- MOOS.EXO.cl %>%
  mutate(across(c(fDOM.QSU.mn.adj, fDOM.QSU.SD), 
                ~ifelse(datetimeAK >= "2018-10-01" & datetimeAK <= "2018-10-02" & fDOM.QSU.mn < 140, NA, .)))


plot(as.POSIXct(MOOS.EXO.cl$datetimeAK, tz= "America/Anchorage"), MOOS.EXO.cl$fDOM.QSU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "fDOM",
     ylim = c(100, 180),
     xlim = as.POSIXct(c("2018-10-01 00:00:00", "2018-10-02 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")


# Temp
plot(as.POSIXct(MOOS.EXO.cl$datetimeAK, tz= "America/Anchorage"), MOOS.EXO.cl$Temp..C.mn, pch=20, col="black", 
     xlab = "", 
     ylab = "fDOM",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-04-30 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")

write.csv(MOOS.EXO.cl, here("EXO_data", "from_internal_harddrive", "processed", "EXO_MOOS_final_formatted.csv"), row.names = FALSE)


#single plot, time window
### FRCH ### 
plot(as.POSIXct(FRCH.EXO.cl$datetimeAK, tz= "America/Anchorage"), FRCH.EXO.cl$fDOM.QSU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "fDOM",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-04-30 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(FRCH.service, tz="America/Anchorage"), col="red")

plot(as.POSIXct(FRCH.EXO.cl$datetimeAK, tz= "America/Anchorage"), FRCH.EXO.cl$SpCond.uScm.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "SPC",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-06-20 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(FRCH.service, tz="America/Anchorage"), col="red")

plot(as.POSIXct(FRCH.EXO.cl$datetimeAK, tz= "America/Anchorage"), FRCH.EXO.cl$Turbidity.FNU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "Turb",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-06-20 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(FRCH.service, tz="America/Anchorage"), col="red")

### MOOS ### 
plot(as.POSIXct(MOOS.EXO.cl$datetimeAK, tz= "America/Anchorage"), MOOS.EXO.cl$fDOM.QSU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "fDOM",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-06-20 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")

plot(as.POSIXct(MOOS.EXO.cl$datetimeAK, tz= "America/Anchorage"), MOOS.EXO.cl$SpCond.uScm.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "SPC",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-06-20 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")

plot(as.POSIXct(MOOS.EXO.cl$datetimeAK, tz= "America/Anchorage"), MOOS.EXO.cl$Turbidity.FNU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "turb",
     #ylim = c(200, 250),
     xlim = as.POSIXct(c("2018-06-20 00:00:00", "2018-10-31 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")


##################################################################################
##################################################################################
####################################################################################
#             load FINALIZED CLEANED data and rename for editing
##################################################################################
##################################################################################
##################################################################################

setwd("~/Documents/DOD_2018_repo/EXO_data/from_internal_harddrive")

file_list <- list.files(path="processed/", 
                        recursive=F, 
                        pattern="final_formatted", 
                        full.names=TRUE)

sitedataz = do.call("list",lapply(file_list,read.csv, header=T,row.names=1))

names(sitedataz) = c("FRCH", "MOOS")

#names(sitedataz) = c(sitedataz[[1]][1,"site.ID"],
#                     sitedataz[[2]][1,"site.ID"],
#                     sitedataz[[3]][1,"site.ID"],
#                     sitedataz[[4]][1,"site.ID"],
#                     sitedataz[[5]][1,"site.ID"])

sitenamez = names(sitedataz)
for(i in sitenamez){
  sitedataz[[i]]$datetimeAK = as.POSIXct(sitedataz[[i]]$datetimeAK, format="%Y-%m-%d %H:%M:%S",tz="America/Anchorage")
}

service.endz <- lapply(service.endz, function(x){as.POSIXct(x, format = "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")})


####################################################################
#### clean combo data of in-air and obvious faulty measurements ####
####################################################################

sitedataz_ic = sitedataz

servicez <- lapply(servicez, function(x){as.POSIXct(x, format = "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")})

# trim to end of deployment
for(i in sitenamez){
  sitedataz_ic[[i]] = sitedataz_ic[[i]][sitedataz_ic[[i]]$datetimeAK < service.endz[[i]],]
}


### FRCH ###
FRCH.EXO.cl = sitedataz_ic[["FRCH"]]

## replace in list
sitedataz_ic[["FRCH"]] = FRCH.EXO.cl


### MOOS ###
MOOS.EXO.cl = sitedataz[["MOOS"]]

# # replace in list
sitedataz_ic[["MOOS"]] = MOOS.EXO.cl


#### plot and save plots of initially cleaned data ####

sitedataz.st = sitedataz_ic

plot(as.POSIXct(sitedataz.st$MOOS$datetimeAK, tz= "America/Anchorage"), sitedataz.st$MOOS$Turbidity.FNU.mn.adj, pch=20, col="black", 
     xlab = "", 
     ylab = "fDOM",
     # ylim = c(100, 180),
     xlim = as.POSIXct(c("2018-05-01 00:00:00", "2018-10-30 00:00:00")))
#axis.POSIXct(1, at = ticks, format = "%Y-%m-%d %H", labels = labels)
abline(v=as.POSIXct(MOOS.service, tz="America/Anchorage"), col="red")


# # compile burst measurements for plotting
# for( i in sitenamez){
#   sitedataz.st[[i]]$datetimeAK = lubridate::round_date(as.POSIXct(format(as.POSIXct(sitedataz.st[[i]]$datetimeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d %H:%M"), "%Y-%m-%d %H:%M", tz="America/Anchorage"), "15 minutes")
#   sitedataz.st[[i]] = sitedataz.st[[i]] %>%
#     select(datetimeAK, SpCond.µS.cm.mn, Turbidity.FNU.mn, Temp..C.mn, fDOM.QSU.mn, Battery.V.mn) %>%
#     group_by(datetimeAK) %>%
#     summarize_all(list(~mean(.),~sd(.)), na.rm = TRUE)
#   names(sitedataz.st[[i]]) = gsub("_mean", ".mn", names(sitedataz.st[[i]]))
#   names(sitedataz.st[[i]]) = gsub("_sd", ".SD", names(sitedataz.st[[i]]))
# }

# plotting 
makePlotEXO <- function(service, data){
  plot.new()
  par(mfrow=c(3,2), mar=c(5,4,2,1.5))
  plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$Battery.V.mn,pch=20,col="black", xlab="", ylab="Battery voltage")
  abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$Temp..C.mn,pch=20,col="gray45", xlab="", ylab="Temp C")
  abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  arrows(as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$Temp..C.mn-data$Temp..C.SD, 
         as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$Temp..C.mn+data$Temp..C.SD,
         length=.01, angle=90, code=3, col="grey", lwd=.5)
  plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$SpCond.uScm.mn.adj,pch=20,col="darkslateblue", xlab="", ylab="SpCond uScm")
  abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  arrows(as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$SpCond.µS.cm.mn-data$SpCond.µS.cm.SD, 
         as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$SpCond.µS.cm.mn+data$SpCond.µS.cm.SD,
         length=.01, angle=90, code=3, col="grey", lwd=.5)
  plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$fDOM.QSU.mn.adj,pch=20,col="darkorange4", xlab="", ylab="fDOM QSU")
  abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  arrows(as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$fDOM.QSU.mn-data$fDOM.QSU.SD, 
         as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$fDOM.QSU.mn+data$fDOM.QSU.SD,
         length=.01, angle=90, code=3, col="grey", lwd=.5)
  plot(as.POSIXct(data$datetimeAK, tz="America/Anchorage"),data$Turbidity.FNU.mn.adj,pch=20,col="firebrick4", xlab="", ylab="Turbidity FNU")
  abline(v=as.POSIXct(service, tz="America/Anchorage"), col="red")
  arrows(as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$Turbidity.FNU.mn-data$Turbidity.FNU.SD, 
         as.POSIXct(data$datetimeAK, tz="America/Anchorage"), data$Turbidity.FNU.mn+data$Turbidity.FNU.SD,
         length=.01, angle=90, code=3, col="grey", lwd=.5)
 
}

# plot burst-compiled data and save plots
pdf("plots/FRCH.EXO_final_clean.st.pdf", width = 15, height =12, onefile=FALSE)
makePlotEXO(FRCH.service, FRCH.EXO.cl)
dev.off()


pdf("plots/MOOS.EXO.Final.pdf", width = 15, height =12, onefile=FALSE)
makePlotEXO(MOOS.service, MOOS.EXO.cl)
dev.off()







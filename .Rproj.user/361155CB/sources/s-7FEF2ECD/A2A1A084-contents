### Read me ###
# the purpose of this script is to generate rating curves from discrete observed discharge measurements 

# Important NOTES:
# 1) Discrete discharge measurements are found using two methods: Salt Slug Dilution that and a wading rod measurement

# 2) This data is read in from DoD Project->2020 AK sensors->Discharge-> QSummary

# Step 1: import discrete discharge measurements summary file which is site, date, time, method, VolSlugml	Batch, and MeasuredQ_Ls 
# Step 2: Generate rating curves for both rating curves from PT data from 01_PT_data script

# Load packages #
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(here)



dir.create(here("Rating_curve"))
dir.create(here("Rating_curve", "Plots"))
dir.create(here("Rating_curve", "Plots", "FRCH"))
dir.create(here("Rating_curve", "Plots", "MOOS"))
dir.create(here("Rating_curve", "Plots", "POKE"))
dir.create(here("Rating_curve", "Plots", "STRT"))
dir.create(here("Rating_curve", "Plots", "VAUL"))

# Import data from google drive #
discharge.2020 <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTPrFKu3yyEDEDkxPVJW2vIWznwmSUcwuNlHInDmrD4EjOQYAkHmtnWJXRT1toDa74ptmHj4O1My3xw/pub?output=csv"
QSummary <- read.csv(url(discharge.2020))
QSummary <-  subset(QSummary, select = -c(X2019, Notes, Average, X, Observations, X.1, X2020, average.as.of.8.29., X.2, observations.as.of.8.29.)) # Cleaning columns that are not important to the dataset
QSummary$date <- mdy(QSummary$Date)
QSummary$DateTime <- as.POSIXct(paste(QSummary$date, QSummary$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")

### ALL Sites ###
ggplot(QSummary) +
  geom_point(aes(x=Date, y=MeasuredQ_Ls, color=Site, shape=Method), size=3) +
  theme_classic() +
  scale_color_brewer(palette = "Set1") +
  ggtitle("ALL SITES")

# Filter French #
QSummary.FR <- QSummary %>% filter(Site =="FRCH")

# Clean date and time # 
QSummary.FR$date <- mdy(QSummary.FR$Date)
QSummary.FR$DateTime <- as.POSIXct(paste(QSummary.FR$date, QSummary.FR$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")

### Rating curve for FRCH PT1 ###
frch.stream.one$Site <- "FRCH"

French1comb <- full_join(frch.stream.one, QSummary.FR) # Join PT data with Discharge
French1.lm <- lm(French1comb$MeasuredQ_Ls ~ French1comb$WaterLevel) # linear model with discharge and water level


frch.formula <- y ~ x

frc.1 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = French1comb) +
  geom_point(aes(color = Method), size = 3) +
  geom_smooth(method = "lm", se=FALSE) +
  stat_poly_eq(formula = frch.formula, 
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) +
  xlim(184,185.5) +
  theme_classic() +
  ggtitle("French1 all measured Q") 

frc.1

### Rating curve for FRCH PT2 ### 
frch.stream.two$Site <- "FRCH"

French2comb <- full_join(frch.stream.two, QSummary.FR)
French2.lm <- lm(French2comb$MeasuredQ_Ls ~ French2comb$WaterLevel)


frc.2 <- ggplot(aes(x= WaterLevel, y = MeasuredQ_Ls), data = French2comb) +
  geom_point(aes(color = Method), size = 3) +
  geom_smooth(method = "lm", se=FALSE) +
  stat_poly_eq(formula = frch.formula, 
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) +
  xlim(184, 185.5) + 
  theme_classic() +
  ggtitle("French2 all measured Q") 

frc.2

### Filter Moose ###
QSummary.MO <- QSummary %>% filter(Site =="MOOS")

### Rating curve for MOOS PT1 ###
QSummary.MO$date <- mdy(QSummary.MO$Date)
QSummary.MO$DateTime <- as.POSIXct(paste(QSummary.MO$date, QSummary.MO$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")


moos.stream.one$Site <- "MOOS"

Moose1comb <- full_join(moos.stream.one, QSummary.MO)
MOOS1.lm <- lm(Moose1comb$MeasuredQ_Ls ~ Moose1comb$WaterLevel)

moos.formula <- y ~ x
mrc.1 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Moose1comb) +
  geom_point(aes(color = Method), size = 3) +
  geom_smooth(method = "lm", se=FALSE) +
  stat_poly_eq(formula = moos.formula, 
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) +
  xlim(165.75,166.5) +
  ylim(600, 1500) +
  theme_classic() +
  ggtitle("Moose1 all measured Q") 

mrc.1

### Rating curve for MOOS PT2 ### 

moos.stream.two$Site <- "MOOS"

Moose2comb <- full_join(moos.stream.two, QSummary.MO)
MOOS2.lm <- lm(Moose2comb$MeasuredQ_Ls ~ Moose2comb$WaterLevel)

mrc.2 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Moose2comb) +
  geom_point(aes(color = Method), size = 3) +
  geom_smooth(method = "lm", se=FALSE) +
  stat_poly_eq(formula = moos.formula, 
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) +
  xlim(165.75,166.75) +
  ylim(600, 1500) +
  theme_classic() +
  ggtitle("Moose2 all measured Q") 
mrc.2

### Filter Poker ###
QSummary.PO <- QSummary %>% filter(Site =="POKE")

### Rating curve for POKE PT1 ###
poke.stream.one$Site <- "POKE"

Poke1comb <- full_join(poke.stream.one, QSummary.PO)
POKE1.lm <- lm(Poke1comb$MeasuredQ_Ls ~ Poke1comb$WaterLevel)

poke.formula <- y ~ x


prc.1 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Poke1comb) +
  geom_point(aes(color = Method), size = 3) +
  geom_smooth(method = "lm", se=FALSE, formula = poke.formula) +
  stat_poly_eq(formula = poke.formula, 
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) +
  xlim(215.9, 216.5) + 
  ylim(200, 2000) + 
  theme_classic() +
  ggtitle("Poke1 all measured Q") 

prc.1

### Rating curve for POKE PT2 ###

poke.stream.two$Site <- "POKE"

Poke2comb <- full_join(poke.stream.two, QSummary.PO)
POKE2.lm <- lm(Poke2comb$MeasuredQ_Ls ~ Poke2comb$WaterLevel)


prc.2 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Poke2comb) +
  geom_point(aes(color = Method), size = 3) +
  geom_smooth(method = "lm", se=FALSE) +
  stat_poly_eq(formula = poke.formula, 
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) +
  xlim(215.8, 216.5) + 
  ylim(200, 2000) +
  theme_classic() +
  ggtitle("Poker2 all measured Q")  


### Filter Stuart ###
QSummary.ST <- QSummary %>% filter(Site =="STRT")

### Rating curve for STRT PT1 ### 

strt.stream.one$Site <- "STRT"

Strt1comb <- full_join(strt.stream.one, QSummary.ST)
STRT1.lm <- lm(Strt1comb$MeasuredQ_Ls ~ Strt1comb$WaterLevel)

strt.formula <- y ~ x

src.1 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt1comb) +
  geom_point(aes(color = Method), size = 3) +
  geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
  stat_poly_eq(formula = strt.formula, 
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) +
  xlim(248.4, 248.7) + 
  ylim(200, 3000) + 
  theme_classic() +
  ggtitle("Strt1 all measured Q")  # I think this worked
src.1

### Rating curve for STRT PT2 ###

strt.stream.two$Site <- "STRT"

Strt2comb <- full_join(strt.stream.two, QSummary.ST)
STRT2.lm <- lm(Strt2comb$MeasuredQ_Ls ~ Strt2comb$WaterLevel)

strt.formula <- y ~ x

src.2 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt2comb) +
  geom_point(aes(color = Method), size = 3) +
  geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
  stat_poly_eq(formula = strt.formula, 
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) +
  xlim(248.5, 248.7) + 
  ylim(200, 2000) + 
  theme_classic() +
  ggtitle("Strt2 all measured Q") 
src.2

### Filter Vault ### 
QSummary.VA <- QSummary %>% filter(Site =="VAUL") %>% filter(MeasuredQ_Ls < 2000)

### Rating curve for VAUL PT2 ###
vaul.stream$Site <- "VAUL"

Vaul2comb <- full_join(vaul.stream, QSummary.VA)
VAUL2.lm <- lm(Vaul2comb$MeasuredQ_Ls ~ Vaul2comb$WaterLevel)

vaul.formula <- y ~ x

vrc.1 <- ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Vaul2comb) +
  geom_point(aes(color = Method), size = 3) +
  geom_smooth(method = "lm", se=FALSE) +
  stat_poly_eq(formula = vaul.formula, 
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) +
  xlim(197.5, 198.5) + 
  ylim(0, 1500) +
  theme_classic() +
  ggtitle("Vault2 all measured Q")  
vrc.1















stat_poly_eq(formula = moos.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Moos2 all measured Q")
moos.stream.two.2021$Site <- "MOOS"
Moos2comb.2021 <- full_join(moos.stream.two.2021, QSummary.MO.2021.1)
MOOS2.lm.2021 <- lm(Moos2comb.2021$MeasuredQ_Ls ~ Moos2comb.2021$WaterLevel)
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Moos2comb.2021) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = moos.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Moos2 all measured Q")
Moos1comb.2021$pred.moos1.Q <- coef(MOOS1.lm.2021)[2] * Moos1comb.2021$WaterLevel+ coef(MOOS1.lm.2021)[1]
ggplot(aes(x = DateTime, y = pred.moos1.Q), data = Moos1comb.2021) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Moose1 predicted all measured Q") +
#scale_shape_discrete(name = "Method", labels = c("ADCP", "Wading Rod", "Salt Dilution")) +
xlab("Date") +
ylab("Discharge (L/s)")
Moos2comb.2021$pred.moos2.Q <- coef(MOOS2.lm.2021)[2] * Moos2comb.2021$WaterLevel+ coef(MOOS2.lm.2021)[1]
ggplot(aes(x = DateTime, y = pred.moos2.Q), data = Moos2comb.2021) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Moose 2 Predicted Q") +
scale_shape_discrete(name = "Method", labels = c("ADCP", "Wading Rod", "Salt Dilution")) +
xlab("") +
ylab("Discharge(L/s)")
moos.final.discharge.2021 <- full_join(Moos1comb.2021, Moos2comb.2021, by = "DateTime")
moos.final.discharge.2021$MeanDischarge <- rowMeans(moos.final.discharge.2021[,c("pred.moos1.Q", 'pred.moos2.Q')], na.rm = TRUE) # taking the average of the two PTs
moos.final.discharge.2021 <- moos.final.discharge.2021 %>% dplyr::select(Site.x, DateTime, pred.moos1.Q, pred.moos2.Q, MeanDischarge) # remove unnecesary columns
# Moose1 (light blue) and Moose2 (dark blue) with observed Q.
ggplot(aes(x = DateTime, y = pred.moos1.Q), data = Moos1comb.2021) +
geom_line(aes(x = DateTime, y = pred.moos1.Q), data = Moos1comb.2021, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.moos2.Q), data = Moos2comb.2021,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = DateTime, y = MeanDischarge), data = moos.final.discharge.2021, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 4000) +
ggtitle("Moose1(light) & Moose2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
moos.final.discharge.2021_final <- moos.final.discharge.2021 %>% dplyr::select(Site.x, DateTime, MeanDischarge)
moos.final.discharge.2021_final$Site.x <- "MOOS"
names(moos.final.discharge.2021_final) <- c("Site", "DateTime", "Q")
# Round Q to 15 minute interval
moos.final.discharge.2021_final$DateTime <- lubridate::round_date(moos.final.discharge.2021_final$DateTime, "15 minutes")
moos.final.discharge.2021_final <- moos.final.discharge.2021_final %>% group_by(Site, DateTime) %>% summarise(Q = mean(Q, na.rm = TRUE))
# Fill in gaps
moos.final.discharge.2021_final <- moos.final.discharge.2021_final[order(moos.final.discharge.2021_final$DateTime),]
moos.final.discharge.2021_final <- na_kalman(moos.final.discharge.2021_final, maxgap = 10)
write.csv(moos.final.discharge.2021_final, here("Predicted_Discharge/2021/MOOS/MOOS.Q.csv"), row.names = FALSE)
plot(frch.stream.one.2021$DateTime, frch.stream.one.2021$WaterLevel, type = 'l')
frch.stream.one.2021 <- frch.stream.one.2021 %>% subset(frch.stream.one.2021$DateTime <= "2021-09-28 04:00") # Some ice influence on the 28th
frch.stream.one.2021[12958, 4] - frch.stream.one.2021[12957, 4] #0.568 is the difference
frch.stream.one.2021.before <- frch.stream.one.2021[-c(12958:31360), ]
frch.stream.one.2021.after <- frch.stream.one.2021[-c(1:12957), ]
frch.stream.one.2021.before$WaterLevel <- frch.stream.one.2021.before[, 4] + 0.568
frch.stream.one.2021.final <- rbind(frch.stream.one.2021.before, frch.stream.one.2021.after)
plot(frch.stream.one.2021.final$DateTime, frch.stream.one.2021.final$WaterLevel)
frch.stream.one.2021 <- frch.stream.one.2021.final
plot(frch.stream.one.2021$DateTime, frch.stream.one.2021$WaterLevel)
plot(frch.stream.two.2021$DateTime, frch.stream.two.2021$WaterLevel)
frch.stream.two.2021 <- frch.stream.two.2021 %>% subset(frch.stream.two.2021$DateTime <= "2021-09-28 04:00") #  removed on the 28th of september and it appears that there was some ice influence on the 28th
frch.stream.two.2021[c(12948, 17535,31360,31361), 4] <- NA
frch.stream.two.2021 <- na_kalman(frch.stream.two.2021, maxgap = 10)
plot(frch.stream.two.2021$DateTime, frch.stream.two.2021$WaterLevel, type = 'l')
# Add any missing time steps
DateTimeFill <- data.frame(DateTime = seq(ymd_hm("2021-06-30 03:00", tz = "America/Anchorage"),ymd_hm("2021-09-28 24:00", tz = "America/Anchorage"), by = '15 mins'))
frch.stream.one.2021 <- full_join(frch.stream.one.2021, DateTimeFill)
frch.stream.one.2021 <- na_kalman(frch.stream.one.2021, maxgap = 10)
DateTimeFill <- data.frame(DateTime = seq(ymd_hm("2021-05-04 09:00", tz = "America/Anchorage"),ymd_hm("2021-09-28 24:00", tz = "America/Anchorage"), by = '15 mins'))
frch.stream.two.2021 <- full_join(frch.stream.two.2021, DateTimeFill)
frch.stream.two.2021 <- na_kalman(frch.stream.two.2021, maxgap = 10)
frch.pt.2021 <- rbind(frch.stream.one.2021, frch.stream.two.2021)
frch.pt.2021 <- frch.pt.2021[,-1]
frch.pt.2021$Site <- "FRCH"
write.csv(frch.pt.2021, here("PT_data/2021/FRCH/frch.pt.2021.csv"), row.names = FALSE)
### Filter FRCH ###
QSummary.FR.2021 <- QSummary.2021 %>% filter(Site =="FRCH") %>% filter(Date >= "2021-06-29")
setDT(QSummary.FR.2021)
frch.stream.one.2021 <- setDT(frch.stream.one.2021) %>% filter(!WaterLevel %in% NA)
Frch1comb.2021 <- frch.stream.one.2021[QSummary.FR.2021, on = "DateTime", roll = 'nearest']
### Rating curve for FRCH PT1 ###
Frch1comb.2021$Site <- "FRCH"
frch.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Frch1comb.2021) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = frch.formula) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Frch1 all measured Q")
Frch1comb.2021.1 <- Frch1comb.2021 %>% filter(MeasuredQ_Ls > 180) %>% group_by(Date) %>% summarise(MeasuredQ_Ls = mean(MeasuredQ_Ls, na.rm = TRUE),
WaterLevel = mean(WaterLevel, na.rm = TRUE),
DateTime = min(DateTime, na.rm = TRUE))
FRCH1.lm.2021 <- lm(Frch1comb.2021.1$MeasuredQ_Ls ~ Frch1comb.2021.1$WaterLevel)
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Frch1comb.2021.1) +
geom_point( size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = frch.formula) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Frch1 all measured Q")
### Filter FRCH ###
frch.stream.two.2021$Site <- "FRCH"
QSummary.FR.2021.2 <- QSummary.2021 %>% filter(Site =="FRCH")
setDT(QSummary.FR.2021.2)
frch.stream.two.2021 <- setDT(frch.stream.two.2021)
Frch2comb.2021 <- frch.stream.two.2021[QSummary.FR.2021.2, on = "DateTime", roll = 'nearest']
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Frch2comb.2021) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Frch2 all measured Q")
Frch2comb.2021.2 <- Frch2comb.2021 %>% filter(Date != "2021-09-28", MeasuredQ_Ls < 450 | WaterLevel > 184.05) %>% group_by(Date) %>% summarise(MeasuredQ_Ls = mean(MeasuredQ_Ls, na.rm = TRUE),
WaterLevel = mean(WaterLevel, na.rm = TRUE),
DateTime = min(DateTime, na.rm = TRUE))
FRCH2.lm.2021 <- lm(Frch2comb.2021.2$MeasuredQ_Ls ~ Frch2comb.2021.2$WaterLevel)
frch.formula = y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Frch2comb.2021.2) +
geom_point( size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = frch.formula) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Frch1 measured Q")
# PT1 #
frch.stream.one.2021$pred.frch1.Q <- coef(FRCH1.lm.2021)[2] * frch.stream.one.2021$WaterLevel+ coef(FRCH1.lm.2021)[1]
frch.stream.one.2021 <- frch.stream.one.2021 %>% filter(DateTime < "2021-09-26")
ggplot(aes(x = DateTime, y = pred.frch1.Q), data = frch.stream.one.2021) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(data = Frch1comb.2021, aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
geom_point(data = Frch1comb.2021.1, aes(x = DateTime, y = MeasuredQ_Ls), size=3, color = "red", shape = 0) +
theme_classic() +
ggtitle("French1 predicted all measured Q") +
xlab("Date") +
ylab("Discharge (L/s)")
frch.stream.two.2021$pred.frch2.Q <- coef(FRCH2.lm.2021)[2] * frch.stream.two.2021$WaterLevel+ coef(FRCH2.lm.2021)[1]
frch.stream.two.2021 %>%
ggplot(aes(x = DateTime, y = pred.frch2.Q)) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(data = Frch2comb.2021.2, aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3, shape = 0, color = "red") +
geom_point(data = Frch2comb.2021, aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("French 2 Predicted Q") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylab("Discharge(L/s)")
frch.final.discharge.2021 <- full_join(frch.stream.one.2021, frch.stream.two.2021, by = "DateTime")
frch.final.discharge.2021$MeanDischarge <- rowMeans(frch.final.discharge.2021[,c ("pred.frch1.Q", 'pred.frch2.Q')], na.rm = TRUE) # taking the average of the two PTs
# French1 (light blue) and French2 (dark blue) with observed Q.
ggplot(aes(x = DateTime, y = pred.frch1.Q), data = frch.final.discharge.2021) +
geom_line(aes(x = DateTime, y = pred.frch1.Q), data = frch.final.discharge.2021, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.frch2.Q), data = frch.final.discharge.2021,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = DateTime, y = MeanDischarge), data = frch.final.discharge.2021, color = "red", size = 1.25, alpha = 0.25) +
geom_point(data =Frch2comb.2021, aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 1500) +
ggtitle("French1(light) & French2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
frch.final.discharge.2021_final <- frch.final.discharge.2021 %>% dplyr::select(DateTime, MeanDischarge)
frch.final.discharge.2021_final$Site <- "FRCH"
names(frch.final.discharge.2021_final) <- c( "DateTime", "Q", "Site")
# Round Q to 15 minute interval
frch.final.discharge.2021_final$DateTime <- lubridate::round_date(frch.final.discharge.2021_final$DateTime, "15 minutes")
frch.final.discharge.2021_final <- frch.final.discharge.2021_final %>% group_by(Site, DateTime) %>% summarise(Q = mean(Q, na.rm = TRUE))
# Fill in gaps
frch.final.discharge.2021_final <- frch.final.discharge.2021_final[order(frch.final.discharge.2021_final$DateTime),]
frch.final.discharge.2021_final <- na_kalman(frch.final.discharge.2021_final, maxgap = 10)
write.csv(frch.final.discharge.2021_final, here("Predicted_Discharge/2021/FRCH/FRCH.Q.csv"), row.names = FALSE)
#plot(POKE_RainGauge_2021$inst_rainfall_mm ~ POKE_RainGauge_2021$DateTime, type="h",
#     xlim = as.POSIXct(c("2021-05-06 09:00:00","2021-09-29 06:25:00"), tz="America/Anchorage"),
#     ylim = c(20,0),
#     axes=F, xlab="", ylab="")
#par(new = T)
poke.stream.one.2021 %>% ggplot(aes(DateTime, WaterLevel)) + geom_point() #+ geom_point(data = NEON_bp, aes(DateTime, corPres-5))
poke.stream.one.2021[c(5957:7397, 8261:9773,17247,23665:25616), 4] <- NA
# Shift jump on August 16
216.296 - 216.118 # 0.178
poke.stream.one.2021 <- poke.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ifelse(DateTime >= "2021-08-16 06:50:00", WaterLevel - 0.178,.)))
poke.stream.one.2021 <- poke.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ifelse(DateTime > "2021-08-16" & DateTime < "2021-08-16 06:50:00" & WaterLevel > 216.125, NA,.)))
poke.stream.one.2021 %>% #filter(DateTime < "2021-05-20") %>%
#filter(DateTime > "2021-08-16" & DateTime < "2021-08-17") %>%
ggplot(aes(DateTime, WaterLevel)) + geom_point()
plot(poke.stream.two.2021$DateTime, poke.stream.two.2021$WaterLevel)
poke.stream.two.2021[c(3725, 5957:7175,7973:9145,17247,23733:25600), 4] <- NA
poke.stream.two.2021 <- na_kalman(poke.stream.two.2021, maxgap = 10)
poke.stream.two.2021 %>% #filter(DateTime < "2021-05-20") %>%
filter(DateTime > "2021-06-21" & DateTime < "2021-06-25") %>%
ggplot(aes(DateTime, WaterLevel)) + geom_point()
# Add any missing time steps
DateTimeFill <- data.frame(DateTime = seq(ymd_hm("2021-05-06 09:00", tz = "America/Anchorage"),ymd_hm("2021-09-29 06:30", tz = "America/Anchorage"), by = '15 mins'))
poke.stream.one.2021 <- full_join(poke.stream.one.2021, DateTimeFill)
poke.stream.one.2021 <- na_kalman(poke.stream.one.2021, maxgap = 10)
DateTimeFill <- data.frame(DateTime = seq(ymd_hm("2021-05-06 09:00", tz = "America/Anchorage"),ymd_hm("2021-09-29 06:30", tz = "America/Anchorage"), by = '15 mins'))
poke.stream.two.2021 <- full_join(poke.stream.two.2021, DateTimeFill)
poke.stream.two.2021 <- na_kalman(poke.stream.two.2021, maxgap = 10)
poke.pt.2021 <- rbind(poke.stream.one.2021, poke.stream.two.2021)
poke.pt.2021 <- poke.pt.2021[,-1]
poke.pt.2021$Site <- "POKE"
write.csv(poke.pt.2021, here("PT_data/2021/POKE/poke.pt.2021.csv"), row.names = FALSE)
### Filter Poker ###
QSummary.PO.2021 <- QSummary.2021 %>% filter(Site =="POKE")
# trying to merge by nearest date if we have an offset point
poke.stream.one.2021.dt <- setDT(poke.stream.one.2021)
QSummary.PO.2021.dt <- setDT(QSummary.PO.2021)
Poke1comb.2021 <- poke.stream.one.2021.dt[QSummary.PO.2021.dt, on = "DateTime", roll = 'nearest']
### Rating curve for POKE PT1 ###
poke.stream.one.2021$Site <- "POKE"
Poke1comb.2021 <- full_join(poke.stream.one.2021, QSummary.PO.2021, by = "DateTime")
POKE1.lm.2021 <- lm(Poke1comb.2021$MeasuredQ_Ls ~ Poke1comb.2021$WaterLevel)
poke.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Poke1comb.2021) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = poke.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Poke1 all measured Q")
### Filter Poker ###
QSummary.PO.2021.1 <- QSummary.PO.2021[-c(1,2,11,24), ]
Poke1comb.2021 <- full_join(poke.stream.one.2021, QSummary.PO.2021.1, by = "DateTime")
POKE1.lm.2021 <- lm(Poke1comb.2021$MeasuredQ_Ls ~ Poke1comb.2021$WaterLevel)
poke.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Poke1comb.2021) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = poke.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Poke1 all measured Q")
poke.stream.two.2021$Site <- "POKE"
Poke2comb.2021 <- full_join(poke.stream.two.2021, QSummary.PO.2021)
POKE2.lm.2021 <- lm(Poke2comb.2021$MeasuredQ_Ls ~ Poke2comb.2021$WaterLevel)
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Poke2comb.2021) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Poker2 all measured Q")
### Filter Poker ###
Poke2comb.2021 <- full_join(poke.stream.two.2021, QSummary.PO.2021.1)
POKE2.lm.2021 <- lm(Poke2comb.2021$MeasuredQ_Ls ~ Poke2comb.2021$WaterLevel)
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Poke2comb.2021) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Poker2 all measured Q")
### Filter Poker ###
Poke1comb.2021$pred.poke1.Q <- coef(POKE1.lm.2021)[2] * Poke1comb.2021$WaterLevel+ coef(POKE1.lm.2021)[1]
ggplot(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb.2021) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Poker1 predicted all measured Q") +
xlab("Date") +
ylab("Discharge (L/s)")
### Filter Poker ###
Poke2comb.2021$pred.poke2.Q <- coef(POKE2.lm.2021)[2] * Poke2comb.2021$WaterLevel+ coef(POKE2.lm.2021)[1]
ggplot(aes(x = DateTime, y = pred.poke2.Q), data = Poke2comb.2021) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Poker") +
scale_shape_discrete(name = "Method", labels = c("Wading Rod", "Salt Dilution", "")) +
xlab("") +
ylim(0, 1500) +
ylab("Discharge(L/s)")
poke.final.discharge.2021 <- full_join(Poke1comb.2021, Poke2comb.2021, by = "DateTime")
poke.final.discharge.2021$MeanDischarge <- rowMeans(poke.final.discharge.2021[,c ("pred.poke1.Q", 'pred.poke2.Q')], na.rm = TRUE) # taking the average of the two PTs
poke.final.discharge.2021 <- poke.final.discharge.2021 %>% dplyr::select(Site.x, DateTime, pred.poke2.Q, pred.poke1.Q, MeanDischarge)
# Poker1 (light blue) and Poker2 (dark blue) with observed Q.
ggplot(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb.2021) +
geom_line(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb.2021, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.poke2.Q), data = Poke2comb.2021,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = DateTime, y = MeanDischarge), data = poke.final.discharge.2021, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 1500) +
ggtitle("Poker1(light) & Poker2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
poke.final.discharge.2021.2 <- poke.final.discharge.2021 %>% mutate(across(c(MeanDischarge), ~ifelse(DateTime < "2021-05-20", pred.poke2.Q,.)))
poke.final.discharge.2021.2 <- poke.final.discharge.2021.2 %>% mutate(across(c(MeanDischarge), ~ifelse(DateTime > "2021-09-05", pred.poke1.Q,.)))
# Poker1 (light blue) and Poker2 (dark blue) with observed Q.
ggplot(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb.2021) +
geom_line(aes(x = DateTime, y = pred.poke1.Q), data = Poke1comb.2021, color="#A6CEE3", size=1.25) +
geom_line(aes(x = DateTime, y = pred.poke2.Q), data = Poke2comb.2021,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_line(aes(x = DateTime, y = MeanDischarge), data = poke.final.discharge.2021.2, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 1500) +
ggtitle("Poker1(light) & Poker2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
poke.final.discharge.2021_final <- poke.final.discharge.2021.2 %>% dplyr::select(DateTime, MeanDischarge)
poke.final.discharge.2021_final$Site <- "POKE"
names(poke.final.discharge.2021_final) <- c("DateTime", "Q", "Site")
# Round Q to 15 minute interval
poke.final.discharge.2021_final$DateTime <- lubridate::round_date(poke.final.discharge.2021_final$DateTime, "15 minutes")
poke.final.discharge.2021_final <- poke.final.discharge.2021_final %>% group_by(Site, DateTime) %>% summarise(Q = mean(Q, na.rm = TRUE))
# Fill in gaps
poke.final.discharge.2021_final <- poke.final.discharge.2021_final[order(poke.final.discharge.2021_final$DateTime),]
poke.final.discharge.2021_final <- na_kalman(poke.final.discharge.2021_final, maxgap = 10)
write.csv(poke.final.discharge.2021_final, here("Predicted_Discharge/2021/POKE/POKE.Q.csv"), row.names = FALSE)
plot(vaul.stream.one.2021$DateTime, vaul.stream.one.2021$WaterLevel, type = 'l')
vaul.stream.one.2021[c(4777:4994, 16861, 30756:30759), 4] <- NA
vaul.stream.one.2021 <- na_kalman(vaul.stream.one.2021, maxgap = 10)
plot(vaul.stream.one.2021$DateTime, vaul.stream.one.2021$WaterLevel, type = 'l')
# Add any missing time steps
DateTimeFill <- data.frame(DateTime = seq(ymd_hm("2021-06-30 05:10", tz = "America/Anchorage"),ymd_hm("2021-09-27 16:10", tz = "America/Anchorage"), by = '15 mins'))
vaul.stream.one.2021 <- full_join(vaul.stream.one.2021, DateTimeFill)
vaul.stream.one.2021 <- na_kalman(vaul.stream.one.2021, maxgap = 10)
write.csv(vaul.stream.one.2021, here("PT_data/2021/VAUL/vaul.pt.2021.csv"), row.names = FALSE)
### Filter VAUL ###
QSummary.VA.2021 <- QSummary.2021 %>% filter(Site =="VAUL")
### Rating curve for VAUL PT1 ###
vaul.stream.one.2021$Site <- "VAUL"
Vaul1comb.2021 <- full_join(vaul.stream.one.2021, QSummary.VA.2021)
VAUL1.lm.2021 <- lm(Vaul1comb.2021$MeasuredQ_Ls ~ Vaul1comb.2021$WaterLevel)
vaul.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Vaul1comb.2021) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = vaul.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Vaul1 all measured Q")
Vaul1comb.2021$pred.vaul1.Q <- coef(VAUL1.lm.2021)[2] * Vaul1comb.2021$WaterLevel+ coef(VAUL1.lm.2021)[1]
ggplot(aes(x = DateTime, y = pred.vaul1.Q), data = Vaul1comb.2021) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Vaul1 predicted all measured Q") +
xlab("Date") +
ylab("Discharge (L/s)")
vaul.final.discharge.2021_final <- Vaul1comb.2021 %>% dplyr::select(Site, DateTime, pred.vaul1.Q)
names(vaul.final.discharge.2021_final) <- c("Site", "DateTime", "Q")
# Round Q to 15 minute interval
vaul.final.discharge.2021_final$DateTime <- lubridate::round_date(vaul.final.discharge.2021_final$DateTime, "15 minutes")
vaul.final.discharge.2021_final <- vaul.final.discharge.2021_final %>% group_by(Site, DateTime) %>% summarise(Q = mean(Q, na.rm = TRUE))
# Fill in gaps
vaul.final.discharge.2021_final <- vaul.final.discharge.2021_final[order(vaul.final.discharge.2021_final$DateTime),]
vaul.final.discharge.2021_final <- na_kalman(vaul.final.discharge.2021_final, maxgap = 10)
write.csv(vaul.final.discharge.2021_final, here("Predicted_Discharge/2021/VAUL/VAUL.Q.csv"), row.names = FALSE)
#strt.stream.one.2021.b <- strt.stream.one.2021
strt.stream.one.2021 %>% #filter(DateTime > "2021-07-02") %>%
ggplot(aes(DateTime, WaterLevel)) + geom_point(data= frch.stream.one.2021.final, aes(DateTime, WaterLevel + 65.97), col = "blue") + #geom_point(data= moos.stream.one.2021, aes(DateTime, WaterLevel + 84.5), col = "green") +
geom_point()
#strt.stream.one.2021 <- strt.stream.one.2021.b
strt.stream.one.2021[5261, 4] - strt.stream.one.2021[5257, 4] # 0.543
strt.stream.one.2021 <- strt.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ifelse(DateTime <= "2021-06-28 11:00:00", WaterLevel + 0.543,. )))
# First beaver damn
strt.stream.one.2021 <- strt.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ifelse(DateTime > "2021-06-28 11:00:00" & DateTime < "2021-07-16 12:40:00", NA,. )))
# Second beaver damn
strt.stream.one.2021 <- strt.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ifelse(DateTime > "2021-07-20 19:00" & DateTime < "2021-07-28 11:50", NA,. )))
# Remove beaver dam at beginning of August
strt.stream.one.2021 <- strt.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ ifelse(DateTime > "2021-08-02 15:00" & DateTime < "2021-08-04" & WaterLevel > 250.67, NA, .)))
strt.stream.one.2021 <- strt.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ ifelse(DateTime > "2021-08-02" & DateTime < "2021-08-10" & WaterLevel < 250.2, NA, .)))
# Small shift
strt.stream.one.2021 <- strt.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ ifelse(DateTime >= "2021-08-03", WaterLevel + .05, .)))
strt.stream.one.2021 <- strt.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ ifelse(DateTime >= "2021-08-03" & DateTime <= "2021-08-03 12:15", NA, .))) %>% filter(WaterLevel > 250.5)
# Fieldbook says that beaver damn was removed 8/9
strt.stream.one.2021 <- strt.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ ifelse(DateTime > "2021-08-09" & DateTime < "2021-08-10" & WaterLevel > 250.77, NA, .)))
strt.stream.one.2021 <- strt.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ ifelse(DateTime > "2021-08-09 06:00" & DateTime < "2021-08-09 11:15", NA, .)))
strt.stream.one.2021 <- strt.stream.one.2021 %>% mutate(across(c(WaterLevel), ~ ifelse(WaterLevel > 251.3, NA, .)))
strt.stream.one.2021 %>% #filter(DateTime > "2021-06-15" & DateTime < "2021-08-15") %>%
ggplot(aes(DateTime, WaterLevel)) + geom_point(data= frch.stream.one.2021.final, aes(DateTime, WaterLevel + 65.97), col = "blue") + geom_point() #+ scale_x_datetime(limits = ymd_h(c("2021-07-25 06", "2021-08-21 23"), tz = "America/Anchorage")) + ylim(250.5,250.8)
strt.stream.two.2021 %>% #filter(DateTime > "2021-08-02" & DateTime < "2021-08-04") %>%
ggplot(aes(DateTime, WaterLevel)) + geom_point()
#strt.stream.two.2021.b <- strt.stream.two.2021
#strt.stream.two.2021 <- strt.stream.two.2021.b
# Shift down first section
strt.stream.two.2021 <- strt.stream.two.2021 %>% mutate(across(c(WaterLevel), ~ifelse(DateTime <= "2021-06-28 11:00:00", WaterLevel - 0.282,. )))
strt.stream.two.2021[5257,4] <- NA
# First beaver damn
strt.stream.two.2021 <- strt.stream.two.2021 %>% mutate(across(c(WaterLevel), ~ifelse(DateTime > "2021-06-28 11:00:00" & DateTime < "2021-07-16 12:40:00", NA,. )))
# Second beaver damn
strt.stream.two.2021 <- strt.stream.two.2021 %>% mutate(across(c(WaterLevel), ~ifelse(DateTime > "2021-07-20 19:00" & DateTime < "2021-07-28 11:50", NA,. )))
# Remove beaver dam at beginning of August
strt.stream.two.2021 <- strt.stream.two.2021 %>% mutate(across(c(WaterLevel), ~ ifelse(DateTime > "2021-08-02 17:30" & DateTime <= "2021-08-03 12:00", NA, .)))
# Shift jump on 8/9
strt.stream.two.2021 <- strt.stream.two.2021 %>% mutate(across(c(WaterLevel), ~ifelse(DateTime >= "2021-08-09 11:15:00", WaterLevel - 0.225,. )))
strt.stream.two.2021[c(17349:17355),4] <- NA
strt.stream.two.2021 %>% ggplot(aes(DateTime, WaterLevel))   + #+ geom_point(data = strt.stream.one.2021, aes(DateTime, WaterLevel), color = 2) + geom_point(data = strt.stream.two.2021.b, aes(DateTime, WaterLevel), color = "blue")
geom_point(data= frch.stream.one.2021.final, aes(DateTime, WaterLevel + 64.95), color = 2)+
geom_point() #+ scale_x_datetime(limits = ymd_h(c("2021-08-07 06", "2021-08-20 23"), tz = "America/Anchorage")) #+ ylim(249.5,249.8)
# Add any missing time steps
DateTimeFill <- data.frame(DateTime = seq(ymd_hm("2021-05-07 17:00", tz = "America/Anchorage"),ymd_hm("
2021-09-28 10:30", tz = "America/Anchorage"), by = '15 mins'))
strt.stream.one.2021 <- full_join(strt.stream.one.2021, DateTimeFill)
strt.stream.one.2021 <- na_kalman(strt.stream.one.2021, maxgap = 15)
# Add any missing time steps
DateTimeFill <- data.frame(DateTime = seq(ymd_hm("2021-05-19 17:00", tz = "America/Anchorage"),ymd_hm("2021-09-28 10:30", tz = "America/Anchorage"), by = '15 mins'))
strt.stream.two.2021 <- full_join(strt.stream.two.2021, DateTimeFill)
strt.stream.two.2021 <- na_kalman(strt.stream.two.2021, maxgap = 10)
strt.pt.2021 <- rbind(strt.stream.one.2021, strt.stream.two.2021)
write.csv(strt.pt.2021, here("PT_data/2021/STRT/strt.pt.2021.csv"), row.names = FALSE)
### Filter STRT ###
QSummary.ST.2021 <- QSummary.2021 %>% filter(Site =="STRT")
strt.stream.one.2021.dt <- setDT(strt.stream.one.2021) %>% filter(!WaterLevel %in% NA)
QSummary.ST.2021.dt <- setDT(QSummary.ST.2021)
Strt1comb.2021 <- strt.stream.one.2021.dt[QSummary.ST.2021.dt, on = "DateTime", roll = 'nearest'] %>% dplyr::select(DateTime, WaterLevel, MeasuredQ_Ls, Method, Date)
### Rating curve for STRT PT1 ###
strt.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt1comb.2021) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic()
ggtitle("Strt1 all measured Q")
### Filter STRT ###
Strt1comb.2021.1 <- Strt1comb.2021[-c(1,2,3,22,8,10),]
STRT1.lm.2021 <- lm(Strt1comb.2021.1$MeasuredQ_Ls ~ Strt1comb.2021.1$WaterLevel)
strt.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt1comb.2021.1) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic()
ggtitle("Strt1 all measured Q")
strt.stream.two.2021.dt <- setDT(strt.stream.two.2021) %>% filter(!WaterLevel %in% NA)
Strt2comb.2021 <- strt.stream.two.2021.dt[QSummary.ST.2021.dt, on = "DateTime", roll = 'nearest'] %>% dplyr::select(DateTime, WaterLevel, MeasuredQ_Ls, Method, Date)
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt2comb.2021) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() + ylim(0,1600)
ggtitle("Stuart2 all measured Q")
Strt2comb.2021.1 <- Strt2comb.2021[-c(1,2,3,22,8,10),]
STRT2.lm.2021 <- lm(Strt2comb.2021.1$MeasuredQ_Ls ~ Strt2comb.2021.1$WaterLevel)
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt2comb.2021.1) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Stuart2 all measured Q")
strt.stream.one.2021$pred.strt1.Q <- coef(STRT1.lm.2021)[2] * strt.stream.one.2021$WaterLevel+ coef(STRT1.lm.2021)[1]
strt.stream.one.2021 %>% #filter(DateTime > "2021-07-30" & DateTime < "2021-08-15") %>%
ggplot(aes(x = DateTime, y = pred.strt1.Q)) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(data = Strt1comb.2021, aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart1 predicted all measured Q") +
xlab("Date") +
ylab("Discharge (L/s)") #+ geom_point(data = frch.test, aes(DateTime, pred.frch1.Q))
strt.stream.two.2021$pred.strt2.Q <- coef(STRT2.lm.2021)[2] * strt.stream.two.2021$WaterLevel+ coef(STRT2.lm.2021)[1]
ggplot(aes(x = DateTime, y = pred.strt2.Q), data = strt.stream.two.2021) +
geom_point(color="#A6CEE3", size=1.25) +
geom_point(data=Strt2comb.2021, aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart 2 Predicted Q") +
scale_shape_discrete(name = "Method", labels = c("ADCP", "Wading Rod", "Salt Dilution")) +
xlab("") +
#ylim(0, 2000) +
ylab("Discharge(L/s)") #+ geom_point(data = frch.final.discharge.2021_final, aes(DateTime, Q))
strt.final.discharge.2021 <- full_join(strt.stream.one.2021, strt.stream.two.2021, by = "DateTime")
strt.final.discharge.2021$MeanDischarge <- rowMeans(strt.final.discharge.2021[,c ("pred.strt1.Q", 'pred.strt2.Q')], na.rm = TRUE) # taking the average of the two PTs
strt.final.discharge.2021 <- strt.final.discharge.2021 %>% dplyr::select(Site.y, DateTime, pred.strt1.Q, pred.strt2.Q, MeanDischarge) # remove unnecesary columns
# Stuart1 (light blue) and Stuart2 (dark blue) with observed Q.
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = strt.final.discharge.2021) +
geom_point(aes(x = DateTime, y = pred.strt1.Q), data = strt.final.discharge.2021, color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = pred.strt2.Q), data = strt.final.discharge.2021,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_point(aes(x = DateTime, y = MeanDischarge), data = strt.final.discharge.2021, color = "red", size = 0.25, alpha = 0.25) +
geom_point(data=Strt2comb.2021, aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("STRT1(light) & STRT2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
strt.final.discharge.2021 <- strt.final.discharge.2021 %>% mutate(across(c(MeanDischarge), ~ifelse(DateTime < "2021-07-05", pred.strt2.Q,.)))
# Stuart1 (light blue) and Stuart2 (dark blue) with observed Q.
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = strt.final.discharge.2021) +
geom_point(aes(x = DateTime, y = pred.strt1.Q), data = strt.final.discharge.2021, color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = pred.strt2.Q), data = strt.final.discharge.2021,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_point(aes(x = DateTime, y = MeanDischarge), data = strt.final.discharge.2021, color = "red", size = 0.25, alpha = 0.25) +
geom_point(data=Strt2comb.2021, aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("STRT1(light) & STRT2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")

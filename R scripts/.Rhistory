parse = TRUE) +
theme_classic() + #geom_point(data = preds, aes(x = WaterLevel, y = MeasuredQ_Ls))
ggtitle("Strt1 all measured Q")
strt.formula <- y ~ x + I(x^2) + I(x^3)
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() + #geom_point(data = preds, aes(x = WaterLevel, y = MeasuredQ_Ls))
ggtitle("Strt1 all measured Q")
strt.formula <- y ~ x + I(x^2/3)
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() + #geom_point(data = preds, aes(x = WaterLevel, y = MeasuredQ_Ls))
ggtitle("Strt1 all measured Q")
STRT1.lm.2021 <- lm(Strt1comb.2021.1$MeasuredQ_Ls ~ Strt1comb.2021.1$WaterLevel +I(Strt1comb.2021.1$WaterLevel^3))
summary(STRT1.lm.2021)
preds <- data.frame(WaterLevel = seq(250.5, 251.2, .01))
preds$MeasuredQ_Ls <- coef(STRT1.lm.2021)[1] +I(preds$WaterLevel^3)*coef(STRT1.lm.2021)[3]
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() + geom_point(data = preds, aes(x = WaterLevel, y = MeasuredQ_Ls))
summary(STRT1.lm.2021)
preds$MeasuredQ_Ls <- coef(STRT1.lm.2021)[1] + I(preds$WaterLevel^3)*coef(STRT1.lm.2021)[2] + I(preds$WaterLevel^3)*coef(STRT1.lm.2021)[3]
summary(STRT1.lm.2021)
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() + geom_point(data = preds, aes(x = WaterLevel, y = MeasuredQ_Ls))
summary(STRT1.lm.2021)
preds$MeasuredQ_Ls <- coef(STRT1.lm.2021)[1] + preds$WaterLevel*coef(STRT1.lm.2021)[2] + I(preds$WaterLevel^3)*coef(STRT1.lm.2021)[3]
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() + geom_point(data = preds, aes(x = WaterLevel, y = MeasuredQ_Ls))
STRT1.lm.2021 <- lm(Strt1comb.2021.1$MeasuredQ_Ls ~ Strt1comb.2021.1$WaterLevel+I(Strt1comb.2021.1$WaterLevel^2) +I(Strt1comb.2021.1$WaterLevel^3))
summary(STRT1.lm.2021)
STRT1.lm.2021 <- lm(Strt1comb.2021.1$MeasuredQ_Ls ~ I(Strt1comb.2021.1$WaterLevel^3))
summary(STRT1.lm.2021)
preds$MeasuredQ_Ls <- coef(STRT1.lm.2021)[1]+ I(preds$WaterLevel^3)*coef(STRT1.lm.2021)[2]
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() + geom_point(data = preds, aes(x = WaterLevel, y = MeasuredQ_Ls))
strt.formula <- y ~ x + I(x^2/3)
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
### Filter STRT ###
Strt1comb.2021.1 <- Strt1comb.2021[-c(1,2,3,22,10),]
strt.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt1comb.2021.1) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic()
### Filter STRT ###
Strt1comb.2021.1 <- Strt1comb.2021[-c(2,3,22,10),]
strt.formula <- y ~ x + I(x^2/3)
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
### Filter STRT ###
Strt1comb.2021.1 <- Strt1comb.2021[-c(2,3,22,10),]
Strt1comb.2021.1 <- Strt1comb.2021.1 %>% group_by(Date) %>% summarise(MeasuredQ_Ls = mean(MeasuredQ_Ls, na.rm = TRUE),
WaterLevel = mean(WaterLevel, na.rm = TRUE))
strt.formula <- y ~ x + I(x^2/3)
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
strt.formula <- y ~ x + I(x^2)
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
strt.formula <- y ~ x + I(x^3/2)
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
strt.formula <- y ~ x + I(x^(3/2))
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
strt.formula <- y ~ x + I(x^(4/2))
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
strt.formula <- y ~ x + I(x^(5/2))
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
strt.formula <- y ~ x + I(x^(7/2))
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
strt.formula <- y ~ x + I(2*x^2)
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
### Filter STRT ###
Strt1comb.2021.1 <- Strt1comb.2021[-c(1,2,3,22, 13),]
strt.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt1comb.2021.1) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic()
### Filter STRT ###
Strt1comb.2021.1 <- Strt1comb.2021[-c(1,2,3,22,8.10),]
strt.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt1comb.2021.1) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic()
### Filter STRT ###
QSummary.ST.2021 <- QSummary.2021 %>% filter(Site =="STRT")
### Filter STRT ###
Strt1comb.2021.1 <- Strt1comb.2021[-c(1,2,3,22,8,10),]
strt.formula <- y ~ x
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt1comb.2021.1) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic()
### Filter STRT ###
Strt1comb.2021.1 <- Strt1comb.2021[-c(2,3,22,8,10),]
Strt1comb.2021.1 <- Strt1comb.2021.1 %>% group_by(Date) %>% summarise(MeasuredQ_Ls = mean(MeasuredQ_Ls, na.rm = TRUE),
WaterLevel = mean(WaterLevel, na.rm = TRUE))
strt.formula <- y ~ x + I(x^2)
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
### Filter STRT ###
Strt1comb.2021.1 <- Strt1comb.2021[-c(1, 2,3,22,8,10),]
strt.formula <- y ~ x
Strt1comb.2021.1 %>% ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls)) +
geom_point(aes(), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Strt1 all measured Q")
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt1comb.2021.1) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = poke.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic()
STRT1.lm.2021 <- lm(Strt1comb.2021.1$MeasuredQ_Ls ~ Strt1comb.2021.1$WaterLevel)
Strt2comb.2021.1 <- Strt2comb.2021[-c(1,2,3,22,8,10),]
STRT2.lm.2021 <- lm(Strt2comb.2021.1$MeasuredQ_Ls ~ Strt2comb.2021.1$WaterLevel)
ggplot(aes(x = WaterLevel, y = MeasuredQ_Ls), data = Strt2comb.2021.1) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_classic() +
ggtitle("Stuart2 all measured Q")
strt.stream.one.2021$pred.strt1.Q <- coef(STRT1.lm.2021)[2] * strt.stream.one.2021$WaterLevel+ coef(STRT1.lm.2021)[1]
Strt1comb.2021 %>% #filter(DateTime > "2021-07-30" & DateTime < "2021-08-15") %>%
ggplot(aes(x = DateTime, y = pred.strt1.Q)) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart1 predicted all measured Q") +
xlab("Date") +
ylab("Discharge (L/s)") #+ geom_point(data = frch.test, aes(DateTime, pred.frch1.Q))
strt.stream.one.2021 %>% #filter(DateTime > "2021-07-30" & DateTime < "2021-08-15") %>%
ggplot(aes(x = DateTime, y = pred.strt1.Q)) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart1 predicted all measured Q") +
xlab("Date") +
ylab("Discharge (L/s)") #+ geom_point(data = frch.test, aes(DateTime, pred.frch1.Q))
strt.stream.one.2021 %>% #filter(DateTime > "2021-07-30" & DateTime < "2021-08-15") %>%
ggplot(aes(x = DateTime, y = pred.strt1.Q)) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(data = Strt1comb.2021, aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart1 predicted all measured Q") +
xlab("Date") +
ylab("Discharge (L/s)") #+ geom_point(data = frch.test, aes(DateTime, pred.frch1.Q))
Strt2comb.2021$pred.strt2.Q <- coef(STRT2.lm.2021)[2] * Strt2comb.2021$WaterLevel+ coef(STRT2.lm.2021)[1]
ggplot(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb.2021) +
geom_point(color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart 2 Predicted Q") +
scale_shape_discrete(name = "Method", labels = c("ADCP", "Wading Rod", "Salt Dilution")) +
xlab("") +
#ylim(0, 2000) +
ylab("Discharge(L/s)") #+ geom_point(data = frch.final.discharge.2021_final, aes(DateTime, Q))
strt.stream.two.2021$pred.strt2.Q <- coef(STRT2.lm.2021)[2] * strt.stream.two.2021$WaterLevel+ coef(STRT2.lm.2021)[1]
ggplot(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb.2021) +
geom_point(color="#A6CEE3", size=1.25) +
geom_point(data=Strt2comb.2021, aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart 2 Predicted Q") +
scale_shape_discrete(name = "Method", labels = c("ADCP", "Wading Rod", "Salt Dilution")) +
xlab("") +
#ylim(0, 2000) +
ylab("Discharge(L/s)") #+ geom_point(data = frch.final.discharge.2021_final, aes(DateTime, Q))
ggplot(aes(x = DateTime, y = pred.strt2.Q), data = strt.stream.two.2021) +
geom_point(color="#A6CEE3", size=1.25) +
geom_point(data=Strt2comb.2021, aes(x = DateTime, y = MeasuredQ_Ls, shape = Method), size=3) +
theme_classic() +
ggtitle("Stuart 2 Predicted Q") +
scale_shape_discrete(name = "Method", labels = c("ADCP", "Wading Rod", "Salt Dilution")) +
xlab("") +
#ylim(0, 2000) +
ylab("Discharge(L/s)") #+ geom_point(data = frch.final.discharge.2021_final, aes(DateTime, Q))
strt.final.discharge.2021 <- full_join(Strt1comb.2021, Strt2comb.2021, by = "DateTime")
strt.final.discharge.2021$MeanDischarge <- rowMeans(strt.final.discharge.2021[,c ("pred.strt1.Q", 'pred.strt2.Q')], na.rm = TRUE) # taking the average of the two PTs
strt.final.discharge.2021 <- strt.final.discharge.2021 %>% dplyr::select(Site.y, DateTime, pred.strt1.Q, pred.strt2.Q, MeanDischarge) # remove unnecesary columns
strt.final.discharge.2021 <- full_join(strt.stream.one.2021, strt.stream.two.2021, by = "DateTime")
strt.final.discharge.2021$MeanDischarge <- rowMeans(strt.final.discharge.2021[,c ("pred.strt1.Q", 'pred.strt2.Q')], na.rm = TRUE) # taking the average of the two PTs
strt.final.discharge.2021 <- strt.final.discharge.2021 %>% dplyr::select(Site.y, DateTime, pred.strt1.Q, pred.strt2.Q, MeanDischarge) # remove unnecesary columns
# Stuart1 (light blue) and Stuart2 (dark blue) with observed Q.
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb.2021) +
geom_point(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb.2021, color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb.2021,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_point(aes(x = DateTime, y = MeanDischarge), data = strt.final.discharge.2021, color = "red", size = 0.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("STRT1(light) & STRT2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
# Stuart1 (light blue) and Stuart2 (dark blue) with observed Q.
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = strt.final.discharge.2021) +
geom_point(aes(x = DateTime, y = pred.strt1.Q), data = strt.final.discharge.2021, color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = pred.strt2.Q), data = strt.final.discharge.2021,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_point(aes(x = DateTime, y = MeanDischarge), data = strt.final.discharge.2021, color = "red", size = 0.25, alpha = 0.25) +
geom_point(data=Strt2comb.2021, aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("STRT1(light) & STRT2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
strt.final.discharge.2021 <- strt.final.discharge.2021 %>% mutate(across(c(MeanDischarge), ~ifelse(DateTime < "2021-07-05", pred.strt1.Q,.)))
# Stuart1 (light blue) and Stuart2 (dark blue) with observed Q.
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb.2021) +
geom_point(aes(x = DateTime, y = pred.strt1.Q), data = Strt1comb.2021, color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = pred.strt2.Q), data = Strt2comb.2021,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_point(aes(x = DateTime, y = MeanDischarge), data = strt.final.discharge.2021, color = "red", size = 1.25, alpha = 0.25) +
geom_point(aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("STRT1(light) & STRT2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
strt.final.discharge.2021 <- strt.final.discharge.2021 %>% mutate(across(c(MeanDischarge), ~ifelse(DateTime < "2021-07-05", pred.strt1.Q,.)))
# Stuart1 (light blue) and Stuart2 (dark blue) with observed Q.
ggplot(aes(x = DateTime, y = pred.strt1.Q), data = strt.final.discharge.2021) +
geom_point(aes(x = DateTime, y = pred.strt1.Q), data = strt.final.discharge.2021, color="#A6CEE3", size=1.25) +
geom_point(aes(x = DateTime, y = pred.strt2.Q), data = strt.final.discharge.2021,color="#1F78B4", size=1.25, alpha = 0.75) +
geom_point(aes(x = DateTime, y = MeanDischarge), data = strt.final.discharge.2021, color = "red", size = 0.25, alpha = 0.25) +
geom_point(data=Strt2comb.2021, aes(x = DateTime, y = MeasuredQ_Ls), size=2) +
theme_classic() +
ylim(0, 3000) +
ggtitle("STRT1(light) & STRT2(dark) predicted all measured Q") +
ylab("Predicted discharge L/s") +
xlab("Time")
strt.final.discharge.2021_final <- strt.final.discharge.2021 %>% dplyr::select(Site.y, DateTime, MeanDischarge)
strt.final.discharge.2021_final$Site.y <- rep("STRT", length(strt.final.discharge.2021_final$Site.y))
names(strt.final.discharge.2021_final) <- c("Site", "DateTime", "Q")
# Round Q to 15 minute interval
strt.final.discharge.2021_final$DateTime <- lubridate::round_date(strt.final.discharge.2021_final$DateTime, "15 minutes")
strt.final.discharge.2021_final <- strt.final.discharge.2021_final %>% group_by(Site, DateTime) %>% summarise(Q = mean(Q, na.rm = TRUE))
# Fill in gaps
strt.final.discharge.2021_final <- strt.final.discharge.2021_final[order(strt.final.discharge.2021_final$DateTime),]
strt.final.discharge.2021_final <- strt.final.discharge.2021_final %>% mutate(across(c(Q), ~ifelse(Q == "NaN", NA, .)))
strt.final.discharge.2021_final$Q <- na_kalman(strt.final.discharge.2021_final$Q, maxgap = 10)
write.csv(strt.final.discharge.2021_final, here("Predicted_Discharge/2021/STRT/STRT.Q.csv"), row.names = FALSE)
Q_2021 <- rbind(moos.final.discharge.2021_final, frch.final.discharge.2021_final,
poke.final.discharge.2021_final, vaul.final.discharge.2021_final,
strt.final.discharge.2021_final)
# Round all sites to 15 minute intervals
#Q_2021$DateTime <- lubridate::round_date(Q_2021$DateTime, "15 minutes")
#Q_2021 <- Q_2021 %>% group_by(Site, DateTime) %>% summarise(Q = mean(Q, na.rm = TRUE))
Q_2021 <- Q_2021 %>% mutate(across(c(Q), ~ifelse(Q == "NaN", NA, .)))
# Fill gaps in data
#DateTimeFill <- data.frame(DateTime = seq(ymd_hm("
#2021-05-04 00:00", tz = "America/Anchorage"),ymd_hm("2021-10-01 00:00", tz = #"America/Anchorage"), by = '15 mins'))
#DateTimeFill_all <- data.frame(Site = c(rep("FRCH", length(DateTimeFill$DateTime)),rep("MOOS", length(DateTimeFill$DateTime)),rep("POKE", length(DateTimeFill$DateTime)),rep("STRT", length(DateTimeFill$DateTime)),rep("VAUL", length(DateTimeFill$DateTime))), DateTime = rep(DateTimeFill$DateTime, 5))
#Q_2021 <- full_join(Q_2021, DateTimeFill_all)
#Q_2021 <- Q_2021[order(Q_2021$DateTime),]
# Fill in gaps up to 15 x 10 minutes
#Q_2021 <- Q_2021 %>%
#  group_by(Site) %>% summarise(Q = na_kalman(Q, maxgap = 10),
#                                                  DateTime = DateTime) %>% #filter(DateTime < "2021-10-01")
write.csv(Q_2021, here("Predicted_Discharge/2021/Q_2021.csv"), row.names = FALSE)
Q_2021$Day = format(as.POSIXct(Q_2021$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
Q_2021$Day = as.POSIXct(Q_2021$Day, "%Y-%m-%d", tz="America/Anchorage")
Q.daily.2021 <- Q_2021 %>% group_by(Day, Site) %>% summarise(Q = mean(Q))
write.csv(Q.daily.2021, here("Predicted_Discharge/2021/Q.daily.2021.csv"), row.names = FALSE)
# Plot
Q_2021 %>%  filter(Site == "STRT") %>%
#filter(DateTime > "2021-09-22")%>%
ggplot(aes(DateTime, Q, color = Site)) + geom_point(size = 0.25)
# Check time step intervals
Q_2021_check <- Q_2021 %>% group_by(Site) %>%
summarise(diff = DateTime - lag(DateTime), DateTime = DateTime)
unique(Q_2021_check$diff)
Q_2021_check %>% ggplot(aes(DateTime, diff, color = Site)) + geom_point()# + ylim(0,60)
# Check length of consecutive NA's
Q_2021_check_NA <- Q_2021 %>% mutate(Yes_NA = ifelse(Q %in% NA, "Y", "N"))
Q_2021_check_NA %>% filter(Site == "STRT") %>%
ggplot(aes(DateTime, Yes_NA)) + geom_point(size = 0.5) + facet_wrap(~Site)
Q_2021
# Plot
Q_2021 %>%  #filter(Site == "STRT") %>%
#filter(DateTime > "2021-09-22")%>%
ggplot(aes(DateTime, Q, color = Site)) + geom_point(size = 0.25)
# Check time step intervals
Q_2021_check <- Q_2021 %>% group_by(Site) %>%
summarise(diff = DateTime - lag(DateTime), DateTime = DateTime)
Q_2021_check %>% ggplot(aes(DateTime, diff, color = Site)) + geom_point()# + ylim(0,60)
# Check length of consecutive NA's
Q_2021_check_NA <- Q_2021 %>% mutate(Yes_NA = ifelse(Q %in% NA, "Y", "N"))
Q_2021_check_NA %>% filter(Site == "STRT") %>%
ggplot(aes(DateTime, Yes_NA)) + geom_point(size = 0.5) + facet_wrap(~Site)
Q_2021_check_NA %>% #filter(Site == "STRT") %>%
ggplot(aes(DateTime, Yes_NA)) + geom_point(size = 0.5) + facet_wrap(~Site)
strt.stream.one.2021 %>% #filter(DateTime > "2021-07-02") %>%
ggplot(aes(DateTime, WaterLevel)) + geom_point(data= frch.stream.one.2021.final, aes(DateTime, WaterLevel + 65.97), col = "blue") + #geom_point(data= moos.stream.one.2021, aes(DateTime, WaterLevel + 84.5), col = "green") +
geom_point()
moos.stream.one.2021 %>% filter(DateTime > "2021-08-09" & DateTime < "2021-08-11") %>% ggplot(aes(DateTime, WaterLevel)) + geom_point()
moos.stream.one.2021 %>% filter(DateTime > "2021-08-09" & DateTime < "2021-08-12") %>% ggplot(aes(DateTime, WaterLevel)) + geom_point()
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(TZ='America/Anchorage')
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readr)
library(lubridate)
library(rio)
library(neonUtilities)
library(raster)
library(data.table)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(imputeTS)
library(itsmr)
library(here)
poke.stream.2021.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRuPTbgwOrFhhVETrN4HMpVoHrNVwLSecr0acVH7i8ePtxme0PxX1tR_SQ7Mqlg3iiCOHUFw80NFfA5/pub?output=csv"
poke.stream.2021.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTgmuOVxwxSfNzLsb76OmrUQhYzl6prnjP17ubO4XV7x0T0bMpUX7jX5itel6oPe3HDCORnoYD25IgU/pub?output=csv"
strt.stream.2021.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTBHVco3KO6uDX5ixIteIKLgnLUTe1GIGYK-8WBM2eXn1VWvthOjFIGvmXyVOq3l2vnxiBQQaDzbqE1/pub?output=csv"
strt.stream.2021.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTqHls7RlLhnawrL43INl8xLeRLigkYcLhNaUtpHBCN91YmE0rCpNJqBiwvJKp9d0rDapG_UGid43fC/pub?output=csv"
vaul.stream.2021.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSUpdW2ARqdQmnNzpRIbIyGD24DhBSwL5CHFzAG8bwhOsttnyU2nehzfJ0gG8BZHX2VbSc3W1NikCIH/pub?output=csv"
frch.stream.2021.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQi6_PAev36hNhtcXdBBQk3pyJqBoQEKpV8tSvtZgz_DPdqXSg93-d_FDomNSH_lkNhb7fJJVloxl1g/pub?output=csv"
frch.stream.2021.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR0NaSrjYnUkQC42v448LFY0EZEr98R6a2gH0FpPlMBwpfEDY80rSzbDOP3OfpB-SI4QQBCOMgoQxd2/pub?output=csv"
moos.stream.2021.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSVsPDDkXNKBU9Ux2qnvtWl-HS0hgXM2cww9_1l2Xz0Vc9C1_KA2Ss56FuS1fq8mESdgqq2Pl5Nvw6o/pub?output=csv"
moos.stream.2021.url.two <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRCnhugeQ8EmP9P22kirbLQhPgDwFoPyMmZ4SR05jSHgleJBcUQYjNb3K2w6hGtdu4W-XJixdl8fk6-/pub?output=csv"
# Load Data#
poke.stream.one.2021 <- read.csv(url(poke.stream.2021.url), skip = 1)
poke.stream.two.2021 <- read.csv(url(poke.stream.2021.url.two), skip = 1)
strt.stream.one.2021 <- read.csv(url(strt.stream.2021.url), skip = 1) # Deployed the 7th of May
strt.stream.two.2021 <- read.csv(url(strt.stream.2021.url.two), skip = 1) # Deployed the 19th of May
vaul.stream.one.2021 <- read.csv(url(vaul.stream.2021.url), skip = 1)
frch.stream.one.2021 <- read.csv(url(frch.stream.2021.url), skip = 1) # Deployed the 7th of May
frch.stream.two.2021 <- read.csv(url(frch.stream.2021.url.two), skip = 1) # Deployed the 19th of May
View(moos.stream.one.2021)
moos.stream.one.2021 <- read.csv(url(moos.stream.2021.url), skip = 1) # Deployed the 7th of May
View(moos.stream.one.2021)
moos.stream.two.2021 <- read.csv(url(moos.stream.2021.url.two), skip = 1) # Deployed the 19th of May
# Erase columns that are unneeded
poke.stream.one.2021 <- poke.stream.one.2021[,-c(4,5)] # Dont need temperature and barometric pressure
poke.stream.two.2021 <- poke.stream.two.2021[,-c(4,5)] # Dont need temperature and barometric pressure
strt.stream.one.2021 <- strt.stream.one.2021[,-c(4,5)] # Dont need temperature and barometric pressure
strt.stream.two.2021 <- strt.stream.two.2021[,-c(4,5)] # Dont need temperature and barometric pressure
vaul.stream.one.2021 <- vaul.stream.one.2021[,-c(4,5)] # Dont need temperature and barometric pressure
frch.stream.one.2021 <- frch.stream.one.2021[,-c(4,5)] # Dont need temperature and barometric pressure
frch.stream.two.2021 <- frch.stream.two.2021[,-c(4,5)] # Dont need temperature and barometric pressure
moos.stream.one.2021 <- moos.stream.one.2021[,-c(4,5)] # Dont need temperature and barometric pressure
moos.stream.two.2021 <- moos.stream.two.2021[,-c(4,5)] # Dont need temperature and barometric pressure
# Rename columns
names(poke.stream.one.2021) <- c("Site", "DateTime", "AbsolutePressure", "WaterLevel")
names(poke.stream.two.2021) <- c("Site", "DateTime", "AbsolutePressure", "WaterLevel")
names(strt.stream.one.2021) <- c("Site", "DateTime", "AbsolutePressure", "WaterLevel")
names(strt.stream.two.2021) <- c("Site", "DateTime", "AbsolutePressure", "WaterLevel")
names(vaul.stream.one.2021) <- c("Site", "DateTime", "AbsolutePressure", "WaterLevel")
names(frch.stream.one.2021) <- c("Site", "DateTime", "AbsolutePressure", "WaterLevel")
names(frch.stream.two.2021) <- c("Site", "DateTime", "AbsolutePressure", "WaterLevel")
names(moos.stream.one.2021) <- c("Site", "DateTime", "AbsolutePressure", "WaterLevel")
names(moos.stream.two.2021) <- c("Site", "DateTime", "AbsolutePressure", "WaterLevel")
# Input NAs for time
poke.stream.one.2021$DateTime[poke.stream.one.2021$DateTime == ""] <- NA
poke.stream.two.2021$DateTime[poke.stream.two.2021$DateTime == ""] <- NA
strt.stream.one.2021$DateTime[strt.stream.one.2021$DateTime == ""] <- NA
strt.stream.two.2021$DateTime[strt.stream.two.2021$DateTime == ""] <- NA
vaul.stream.one.2021$DateTime[vaul.stream.one.2021$DateTime == ""] <- NA
frch.stream.one.2021$DateTime[frch.stream.one.2021$DateTime == ""] <- NA
frch.stream.two.2021$DateTime[frch.stream.two.2021$DateTime == ""] <- NA
moos.stream.one.2021$DateTime[moos.stream.one.2021$DateTime == ""] <- NA
moos.stream.two.2021$DateTime[moos.stream.two.2021$DateTime == ""] <- NA
# Set as AK time
poke.stream.one.2021$DateTime <- mdy_hms(poke.stream.one.2021$DateTime, tz = "America/Anchorage")
poke.stream.two.2021$DateTime <- mdy_hms(poke.stream.two.2021$DateTime, tz = "America/Anchorage")
strt.stream.one.2021$DateTime <- mdy_hms(strt.stream.one.2021$DateTime, tz = "America/Anchorage")
strt.stream.two.2021$DateTime <- mdy_hms(strt.stream.two.2021$DateTime, tz = "America/Anchorage")
vaul.stream.one.2021$DateTime <- mdy_hms(vaul.stream.one.2021$DateTime, tz = "America/Anchorage")
frch.stream.one.2021$DateTime <- mdy_hms(frch.stream.one.2021$DateTime, tz = "America/Anchorage")
frch.stream.two.2021$DateTime <- mdy_hms(frch.stream.two.2021$DateTime, tz = "America/Anchorage")
moos.stream.one.2021$DateTime <- mdy_hms(moos.stream.one.2021$DateTime, tz = "America/Anchorage")
moos.stream.two.2021$DateTime <- mdy_hms(moos.stream.two.2021$DateTime, tz = "America/Anchorage")
# Observed discharge
# Import data from google drive #
discharge.2021.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQopx6zhl3WLbG0qJfOtpbsVd6h6M0dOR78mmKMc35CDKnZa88dnrw_kDQg8eklmVV9548gnhJ3XNNo/pub?output=csv"
QSummary.2021 <- read_csv(url(discharge.2021.url))
QSummary.2021$Time[QSummary.2021$Time == ""] <- NA
QSummary.2021$MeasuredQ_Ls[QSummary.2021$MeasuredQ_Ls == " "] <- NA
### Format Time ###
QSummary.2021$Date <- mdy(QSummary.2021$Date)
QSummary.2021$DateTime <- as.POSIXct(paste(QSummary.2021$Date, QSummary.2021$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
QSummary.2021$DateTime <- lubridate::round_date(QSummary.2021$DateTime, "15 minutes")
moos.stream.one.2021 %>% ggplot(aes(DateTime, WaterLevel)) + geom_point()
View(moos.stream.one.2021)

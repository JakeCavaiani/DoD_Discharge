aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Poker measured Q")
## Predict POKE Q
POKE1.lm.2022 <- lm(Poker1comb.2022.3$MeasuredQ_Ls ~ Poker1comb.2022.3$difference + I(Poker1comb.2022.3$difference^2))
POKE.2022.dt$pred.poke.Q <- coef(POKE1.lm.2022)[2] * POKE.2022.dt$difference + I(coef(POKE1.lm.2022)[3] * POKE.2022.dt$difference^2)+coef(POKE1.lm.2022)[1]
POKE.2022.dt <- POKE.2022.dt %>% dplyr::select(DateTimeAK, pred.poke.Q)
POKE.2022.dt <- na_kalman(POKE.2022.dt)
POKE.2022.dt %>% na.omit() %>% ggplot(aes(x = DateTimeAK, y = pred.poke.Q)) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(data = Poker1comb.2022, aes(x = DateTimeAK, y = MeasuredQ_Ls, color = Method), size=3) +
theme_classic() +
ggtitle("Poker predicted and measured Q") +
xlab("Date") +
ylab("Discharge (L/s)")
strt.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS4XSmuumKD-j1aDhpA1gfyfrpqUiJUTuvcP9UGrgagvIrzlGYWk71hl0zAC8g8GHqOm1ONjWOpO_So/pub?output=csv" # WL
strt.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRhNn42-Jr1Y3aTFfMPiRxKrNZZjHeBBxkCmVcLVPQEKBf4qg_1Pw4nyUBr3mDwtEE8NKGIbS7kNSrS/pub?output=csv" #WR
strt.atmo.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQxotkNZ6zyvUi51XOjNPumqSvwGfsZMJc7I6-QXBELHY7msBzAaqvEHV41A88Lt0I1Ga-l1343Q1cr/pub?output=csv"
# load in data
strt.stream.one.2022 <- read.csv(url(strt.stream.one.2022.url), skip = 1)
strt.stream.two.2022 <- read.csv(url(strt.stream.two.2022.url), skip = 1)
strt.atmo.2022 <- read.csv(url(strt.atmo.2022.url), skip = 1)
# clean for merging purposes
strt.stream.one.2022 <- strt.stream.one.2022[, -c(4,6:19)] # removing columns that arent date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(5:12)] # removing columns that arent date/abs pressure and temp
strt.atmo.2022 <- strt.atmo.2022[,-c(4:9)]
# changing to AK time (It reads in as GMT but it is actually AKST )
strt.stream.one.2022$DateTimeAK <- mdy_hms(strt.stream.one.2022$Date.Time..GMT.08.00)
strt.stream.two.2022$DateTimeAK <- mdy_hms(strt.stream.two.2022$Date.Time..GMT.08.00)
strt.atmo.2022$DateTimeAK <- mdy_hms(strt.atmo.2022$Date.Time..GMT.08.00)
strt.stream.two.2022$DateTimeAK <- force_tz(strt.stream.two.2022$DateTimeAK, tzone = "America/Anchorage")
strt.stream.one.2022$DateTimeAK <- force_tz(strt.stream.one.2022$DateTimeAK, tzone = "America/Anchorage")
strt.atmo.2022$DateTimeAK <- force_tz(strt.atmo.2022$DateTimeAK, tzone = "America/Anchorage")
# round date to 5 minute intervals
strt.stream.one.2022$DateTimeAK <- lubridate::round_date(strt.stream.one.2022$DateTimeAK, "5 minutes")
strt.stream.two.2022$DateTimeAK <- lubridate::round_date(strt.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
strt.stream.one.2022 <- strt.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
strt.stream.two.2022 <- strt.stream.two.2022[, -c(2)] # removing columns that arent
strt.atmo.2022 <- strt.atmo.2022[,-c(2)]
names(strt.stream.one.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
names(strt.stream.two.2022) <- c("Site","WaterPressure", "TempC", "DateTimeAK")
names(strt.atmo.2022) <- c("Site", "AirPressureSTRT", "DateTimeAK")
# Plot atmosphere data
strt.atmo.2022 %>% ggplot(aes(DateTimeAK, AirPressureSTRT)) + geom_point()
ggplot(strt.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
strt.stream.two.2022 %>% #filter(DateTimeAK > "2022-06-03" & DateTimeAK < "2022-06-04" ) %>%
ggplot(aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
#strt.stream.two.2022.b <- strt.stream.two.2022
#strt.stream.two.2022 <- strt.stream.two.2022.b
#adjusting/cleaning STRT 2
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-06-03", NA, .))) # PT wasnt placed into the stream until 6/3
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-10-03" &
WaterPressure < 100, NA, .))) %>%
filter(WaterPressure > 100)
strt.stream.two.2022 <- strt.stream.two.2022 %>% filter(DateTimeAK < "2022-08-01 00:00:00" | DateTimeAK > "2022-08-10 22:30:00")
strt.stream.two.2022 <- strt.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-15 12:00:00" & DateTimeAK <= "2022-08-17" & WaterPressure > 102.45, NA, .)))
strt.stream.two.2022 %>% #filter(DateTimeAK > "2022-10-01" & DateTimeAK < "2022-10-20" ) %>%
ggplot(aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# merge to one
strt.final.pressure.2022 <- strt.stream.two.2022 # the first PT is crap
#Clean and plot our measured air pressure
strt.atmo.2022 <- strt.atmo.2022 %>% filter(AirPressureSTRT > 96)
strt.atmo.2022 <- strt.atmo.2022 %>%
mutate(across(c(AirPressureSTRT),
~ifelse(DateTimeAK <= "2022-06-01" & AirPressureSTRT < 98, NA, .))) %>% filter( DateTimeAK <= "2022-09-10")
strt.atmo.2022 %>% ggplot() +  geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red")
# Plot STRT measured and Eilson air pressure
STRT.atmo.2022.compare <- full_join(Air_combo, strt.atmo.2022, by = "DateTimeAK")
STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT)) +
geom_point(aes(DateTimeAK, AirPressureSTRT), color = "red") +
ggtitle("STRT air and water pressure")
## Use measured air pressure when possible
#STRT.atmo.2022.compare <- STRT.atmo.2022.compare %>% select(DateTimeAK, AirPressureCorrectedSTRT, AirPressureSTRT )
### Using mostly our air pressure data with gap filled in by Eilson:
#STRT.atmo.2022.compare$strt.combo <- c()
#STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
#  mutate(strt.combo = ifelse(DateTimeAK <= "2022-05-18" | DateTimeAK >= "2022-06-03", #AirPressureSTRT, AirPressureCorrectedSTRT))
#STRT.atmo.2022.compare<- STRT.atmo.2022.compare %>%
#  mutate(across(c(strt.combo),
#                ~ifelse(DateTimeAK >= "2022-07-18" & DateTimeAK <= "2022-09-03" | DateTimeAK >= "2022-09-08", AirPressureCorrectedSTRT, .)))
#STRT.atmo.2022.compare %>% filter(DateTimeAK > "2022-05-01") %>% ggplot() + geom_point(aes(DateTimeAK, strt.combo)) #+ geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red", cex = 0.5)
# join the two atmospheric and water pressure together
STRT.2022 <- full_join(Air_combo, strt.final.pressure.2022, by = "DateTimeAK") %>% dplyr::select("DateTimeAK", "AirPressureCorrectedSTRT", "WaterPressure")
# Fill time gaps
DateTimeFill <- data.frame(DateTimeAK = seq(ymd_hm("2022-06-03 00:00", tz = "America/Anchorage"),ymd_hm("2022-10-08 15:00", tz = "America/Anchorage"), by = '5 mins'))
STRT.2022 <- full_join(STRT.2022, DateTimeFill, by = "DateTimeAK")
STRT.2022 <- STRT.2022[order(STRT.2022$DateTimeAK),]
STRT.2022 <- na_kalman(STRT.2022, maxgap = 10)
# Water pressure - atmospheric pressure
STRT.2022$difference <- STRT.2022$WaterPressure - STRT.2022$AirPressureCorrectedSTRT
# Plot air and water pressure
STRT.2022 %>% filter(DateTimeAK >"2022-09-01 10:00:00" & DateTimeAK < "2022-09-26 20:00:00") %>%
filter(DateTimeAK > "2022-05-05") %>%
ggplot(aes(DateTimeAK, WaterPressure)) + geom_point() + geom_point(aes(DateTimeAK, AirPressureCorrectedSTRT), color = "red") +
ggtitle("POKE air and water pressure")
# Remove duplicated time steps
STRT.2022 <- STRT.2022 %>% group_by(DateTimeAK) %>% summarise( difference = mean( difference))
any(duplicated(STRT.2022$DateTimeAK))
# Check time step intervals
STRT.2022$diff <- STRT.2022$DateTimeAK - lag(STRT.2022$DateTimeAK)
unique(STRT.2022$diff)
STRT.2022 %>% ggplot(aes(DateTimeAK, diff)) + geom_point()
# Plot difference
STRT.2022 %>% ggplot(aes(DateTimeAK, difference)) + geom_point()
### Filter STRT ###
QSummary.ST.2022 <- QSummary.2022 %>% filter(Site =="STRT")
ggplot(QSummary.ST.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, color = Method), size=3) +
theme_classic() +
ggtitle("STRT")
# trying to merge by nearest date if we have an offset point
STRT.2022.dt <- setDT(STRT.2022)
QSummary.ST.2022.dt <- QSummary.ST.2022
Stuart1comb.2022 <- STRT.2022.dt[QSummary.ST.2022.dt, on = "DateTimeAK", roll = 'nearest']
### Filter STRT ###
strt.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Stuart1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Stuart all measured Q")
strt.formula <- y ~ poly(x, 2, raw = TRUE)
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = Stuart1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = strt.formula) +
stat_poly_eq(formula = strt.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Stuart measured Q")
## Predict STRT Q
STRT1.lm.2022 <- lm(Stuart1comb.2022$MeasuredQ_Ls ~ Stuart1comb.2022$difference + I(Stuart1comb.2022$difference^2))
summary(STRT1.lm.2022)
STRT.2022.dt$pred.strt1.Q <- coef(STRT1.lm.2022)[2] * STRT.2022.dt$difference + coef(STRT1.lm.2022)[3] * I(STRT.2022.dt$difference^2) + coef(STRT1.lm.2022)[1]
STRT.2022.dt <- na_kalman(STRT.2022.dt, maxgap = 10)
STRT.2022.dt %>% na.omit() %>% ggplot(aes(x = DateTimeAK, y = pred.strt1.Q)) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(data = Stuart1comb.2022, aes(x = DateTimeAK, y = MeasuredQ_Ls, color = Method), size=3) +
theme_classic() +
ggtitle("STRT predicted and measured Q") +
xlab("Date") +
ylab("Discharge (L/s)")
frch.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vRkT5GIhFY4nLblzPi4Upc8y6Pk2k4vXLSGAkFyMhLowsCmct0fZ5rxm-vd85RfFr7YLrCuuSiOqQbL/pub?output=csv"
frch.stream.two.2022.url <-  "https://docs.google.com/spreadsheets/d/e/2PACX-1vRiDAbzBj_jHk1Hd3iM7fFvzMrRCSF9fbKTcmQD_dUFGOjoIQuBZBKV4KdNhfevLOq0Udch0LbWiKXw/pub?output=csv"
# load in url
frch.stream.one.2022 <- read.csv(url(frch.stream.one.2022.url), skip = 1)
frch.stream.two.2022 <- read.csv(url(frch.stream.two.2022.url), skip = 1)
# clean for merging purposes
frch.stream.one.2022 <- frch.stream.one.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(5:14)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
frch.stream.one.2022$DateTimeAK <- mdy_hms(frch.stream.one.2022$Date.Time..GMT.08.00)
frch.stream.two.2022$DateTimeAK <- mdy_hms(frch.stream.two.2022$Date.Time..GMT.08.00)
frch.stream.two.2022$DateTimeAK <- force_tz(frch.stream.two.2022$DateTimeAK, tzone = "America/Anchorage")
frch.stream.one.2022$DateTimeAK <- force_tz(frch.stream.one.2022$DateTimeAK, tzone = "America/Anchorage")
# cleaning off original datetime
frch.stream.one.2022 <- frch.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
frch.stream.two.2022 <- frch.stream.two.2022[, -c(2)] # removing columns that arent
names(frch.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(frch.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
# Round date to 5 minute intervals
frch.stream.two.2022$DateTimeAK <- lubridate::round_date(frch.stream.two.2022$DateTimeAK, "5 minutes")
frch.stream.one.2022$DateTimeAK <- lubridate::round_date(frch.stream.one.2022$DateTimeAK, "5 minutes")
# merge to one
frch.final.pressure.2022 <- left_join(frch.stream.one.2022, frch.stream.two.2022, by = c("DateTimeAK"))
ggplot(frch.stream.one.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-05-09" & DateTimeAK <= "2022-05-12", NA, .))) # PT wasnt placed into the stream until 5/12
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 102, NA, .))) %>% filter(WaterPressure > 98.4) # PT wasnt placed into the stream until 5/12
frch.stream.one.2022 <- frch.stream.one.2022 %>% filter(DateTimeAK < "2022-10-10 10:30:00")
# Shift small gap on June 6th
frch.stream.one.2022 <- frch.stream.one.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK > "2022-05-07" & DateTimeAK < "2022-05-08" &
WaterPressure < 109.5, NA, ifelse(WaterPressure > 110.5, NA, .)))) %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-06-07 11:25:00", WaterPressure - 0.231, .))) %>%
mutate(across(c(WaterPressure), ~ifelse(DateTimeAK == "2022-06-07 11:10:00", NA, .)))
frch.stream.one.2022 %>% #filter(DateTimeAK > "2022-06-07" & DateTimeAK < "2022-06-08") %>%
ggplot(aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
ggplot(frch.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
frch.stream.two.2022 <- frch.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK <= "2022-08-15" &
WaterPressure < 100, NA, .))) %>% filter(WaterPressure > 98.4)# PT wasnt placed into the stream until 5/12
# Shift step in August
frch2.before <- frch.stream.two.2022[c(1:2685), ]
frch2.after <- frch.stream.two.2022[c(2687:40000), ]
frch.stream.two.2022[2685, 2] - frch.stream.two.2022[2687, 2] # 1.5485
frch2.after$WaterPressure <- frch2.after$WaterPressure + 1.5485
frch.stream.two.2022 <- rbind(frch2.before, frch2.after)
frch.stream.two.2022 <- frch.stream.two.2022 %>% filter(DateTimeAK < "2022-10-10 10:30:00")
frch.stream.two.2022 %>% #filter(DateTimeAK > "2022-10-05") %>%
ggplot(aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# Checking closeness between two PTs
frch.pt.both <- full_join(frch.stream.one.2022, frch.stream.two.2022, by = "DateTimeAK")
ggplot(aes(x = DateTimeAK, y = WaterPressure.x), data = frch.pt.both) +
geom_point(aes(x=DateTimeAK, y=WaterPressure.x), data = frch.pt.both, color="#A6CEE3") +
geom_point(aes(x=DateTimeAK, y=WaterPressure.y), data = frch.pt.both, color="#FF7F00") +
theme_classic() +
ggtitle("FRCH PT1(blue) & FRCH PT2(orange) Water Pressure")
frch.pt.both <- frch.pt.both %>% dplyr::mutate(WaterPressure.merged = ifelse(DateTimeAK >= "2022-07-23 17:00:00" & DateTimeAK <= "2022-08-02 12:00:00", WaterPressure.y, WaterPressure.x))
diff <- frch.pt.both$DateTimeAK - lag(frch.pt.both$DateTimeAK)
unique(diff)
frch.pt.both %>% #filter(DateTimeAK > "2022-07-20" & DateTimeAK < "2022-08-01") %>%
ggplot(aes(x = DateTimeAK, y = WaterPressure.merged)) +
geom_point()
## Clean merged water pressure data
# Shift step in July
frch.pt.both <- frch.pt.both %>% dplyr::mutate(across(c(WaterPressure.merged), ~ ifelse(DateTimeAK >= "2022-08-02 11:30:00", WaterPressure.merged + 1.914, .)))
frch.pt.both %>% #filter(DateTimeAK > "2022-08-01" & DateTimeAK < "2022-08-05") %>%
ggplot(aes(x = DateTimeAK, y = WaterPressure.merged)) +
geom_point()
# join the two atmospheric and water pressure together
frch.final.pressure.2022 <- frch.pt.both
FRCH.2022 <- left_join(Air_combo, frch.final.pressure.2022, by = "DateTimeAK") %>% select(DateTimeAK, AirPressureCorrectedFRCH, WaterPressure.merged) %>% filter(DateTimeAK >= "2022-06-04" & DateTimeAK <= "2022-10-10 10:00")
# Fill time gaps
DateTimeFill <- data.frame(DateTimeAK = seq(ymd_hm("2022-06-04 12:20", tz = "America/Anchorage"),ymd_hm("2022-10-10 10:00", tz = "America/Anchorage"), by = '5 mins'))
FRCH.2022 <- full_join(FRCH.2022, DateTimeFill, by = "DateTimeAK")
FRCH.2022 <- FRCH.2022[order(FRCH.2022$DateTimeAK),]
FRCH.2022$WaterPressure.merged <- na_kalman(FRCH.2022$WaterPressure.merged, maxgap = 10)
FRCH.2022 %>% filter(DateTimeAK > "2022-05-15") %>%
#filter(DateTimeAK > "2022-09-18" & DateTimeAK < "2022-09-22") %>%
ggplot(aes(DateTimeAK, WaterPressure.merged)) + geom_point() + geom_point(aes(DateTimeAK, AirPressureCorrectedFRCH)) + #geom_vline (xintercept = as.POSIXct("2022-09-20 20:00:00"))
ggtitle("FRCH air and water pressure")
# Water pressure - atmospheric pressure
FRCH.2022$difference <- FRCH.2022$WaterPressure.merged - FRCH.2022$AirPressureCorrectedFRCH
FRCH.2022 <- FRCH.2022 %>% group_by(DateTimeAK) %>% summarise(difference = mean(difference))
any(duplicated(FRCH.2022$DateTimeAK))
FRCH.2022$diff <- FRCH.2022$DateTimeAK - lag(FRCH.2022$DateTimeAK)
unique(FRCH.2022$diff)
#FRCH.2022 %>% ggplot(aes(DateTimeAK, diff)) + geom_point()
FRCH.2022$Site <- "FRCH"
FRCH.2022 %>% filter(DateTimeAK >= "2022-08-01" & DateTimeAK < "2022-08-03") %>% ggplot(aes(DateTimeAK, difference)) + geom_point()
# Remove outliers
FRCH.2022 <- FRCH.2022 %>% dplyr::mutate(across(c(difference), ~ ifelse(DateTimeAK >= "2022-08-01" & DateTimeAK < "2022-08-03" & difference > 6.6, NA, .)))
FRCH.2022$difference <- na_kalman(FRCH.2022$difference, maxgap = 10)
FRCH.2022 %>% ggplot(aes(DateTimeAK, difference)) + geom_point()
### Filter FRCH ###
QSummary.FR.2022 <- QSummary.2022 %>% filter(Site =="FRCH")
ggplot(QSummary.FR.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#FF7F00")) +
ggtitle("FRCH")
# trying to merge by nearest date if we have an offset point
FRCH.2022.dt <- setDT(FRCH.2022)
QSummary.FR.2022.dt <- QSummary.FR.2022
French1comb.2022 <- FRCH.2022.dt[QSummary.FR.2022.dt, on = "DateTimeAK", roll = 'nearest'] %>% select(DateTimeAK, difference, MeasuredQ_Ls, Method)
# rating curve #
frch.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = French1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = frch.formula) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("French1 all measured Q")
# rating curve #
frch.formula <- y ~ x
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = French1comb.2022) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = frch.formula) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
#xlim(216, 216.4) +
#ylim(0,1500) +
theme_light() +
ggtitle("French all measured Q") + facet_wrap(~Method)
French1comb.2022.3 <- French1comb.2022 %>% filter(MeasuredQ_Ls < 800 | difference > 6)
# rating curve #
frch.formula <- y ~ poly(x,2)
ggplot(aes(x = difference, y = MeasuredQ_Ls), data = French1comb.2022.3) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = frch.formula) +
stat_poly_eq(formula = frch.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
#xlim(216, 216.4) +
#ylim(0,1500) +
theme_light() +
ggtitle("French measured Q")
## Predict FRCH Q
FRCH.lm.2022 <- lm(French1comb.2022.3$MeasuredQ_Ls ~ French1comb.2022.3$difference)
summary(FRCH.lm.2022)
FRCH.2022.dt$pred.frch.Q <- coef(FRCH.lm.2022)[2] * FRCH.2022.dt$difference + coef(FRCH.lm.2022)[1]
FRCH.2022.dt <- FRCH.2022.dt %>% filter(!pred.frch.Q %in% NA)
FRCH.2022.dt %>% ggplot(aes(x = DateTimeAK, y = pred.frch.Q)) +
geom_line(color="#A6CEE3", size=1.25) +
geom_point(data = French1comb.2022, aes(x = DateTimeAK, y = MeasuredQ_Ls, color = Method), size=3) +
theme_classic() +
ggtitle("FRCH predicted and measured Q") +
xlab("Date") +
ylab("Discharge (L/s)")
vaul.stream.one.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQf78OhtBtjvs6HmnEVPJ0PVYSlpIjVAom5VIv12LhZDMbezaFb-LJCGMZUoyVjLJI-pqizM-Be2hbl/pubhtml"
vaul.stream.two.2022.url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSR7qqdF5BXklT1ocG9bLLUwJ07ha8qmzAVRPaUjm7mUq12VptmViI9NJcW1-jO4cu0KtHBLl90A4DZ/pub?output=csv"
# load in url
vaul.stream.one.2022 <- read.csv(url(vaul.stream.one.2022.url), skip = 1)
vaul.stream.two.2022 <- read.csv(url(vaul.stream.two.2022.url), skip = 1)
# clean for merging purposes
vaul.stream.one.2022 <- vaul.stream.one.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
vaul.stream.two.2022 <- vaul.stream.two.2022[, -c(5:13)] # removing columns that arent date/abs pressure and temp
# changing to AK time (It reads in as GMT but it is actually AKST )
vaul.stream.two.2022$DateTimeAK <- mdy_hms(vaul.stream.two.2022$Date.Time..GMT.08.00)
vaul.stream.two.2022$DateTimeAK <- force_tz(vaul.stream.two.2022$DateTimeAK, "America/Anchorage")
#vaul.stream.one.2022$DateTimeAK <- mdy_hms(vaul.stream.one.2022$Date.Time..GMT.08.00)
#vaul.stream.one.2022$DateTimeAK <- force_tz(vaul.stream.one.2022$DateTimeAK, "America/Anchorage")
# round date to 5 minute intervals
#vaul.stream.one.2022$DateTimeAK <- lubridate::round_date(vaul.stream.one.2022$DateTimeAK, "5 minutes")
vaul.stream.two.2022$DateTimeAK <- lubridate::round_date(vaul.stream.two.2022$DateTimeAK, "5 minutes")
# cleaning off original datetime
#vaul.stream.one.2022 <- vaul.stream.one.2022[, -c(2)] # removing columns that aren't date/abs pressure and temp
vaul.stream.two.2022 <- vaul.stream.two.2022[, -c(2)] # removing columns that arent
#names(vaul.stream.one.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
names(vaul.stream.two.2022) <- c("Site", "WaterPressure", "TempC", "DateTimeAK")
ggplot(vaul.stream.two.2022, aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK <= "2022-05-26", NA, .))) # PT wasnt placed into the stream until 5/26
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-08-15" & DateTimeAK <= "2022-08-31" &
WaterPressure < 98, NA, .)))
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-09-20" & DateTimeAK <= "2022-10-01" &
WaterPressure < 98, NA, .)))
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK >= "2022-10-10" &
WaterPressure < 99, NA, .)))
# Clear up strange messiness on 10/11
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK > "2022-10-11 13:55:00" & DateTimeAK < "2022-10-11 19:10:00", NA, .)))
a <- vaul.stream.two.2022 %>% filter(DateTimeAK == "2022-10-11 13:55:00")
b<- vaul.stream.two.2022 %>% filter(DateTimeAK == "2022-10-11 19:10:00")
a$WaterPressure-b$WaterPressure # 0.924
vaul.stream.two.2022 <- vaul.stream.two.2022 %>%
mutate(across(c(WaterPressure),
~ifelse(DateTimeAK < "2022-10-11 19:10:00", WaterPressure, WaterPressure + 0.924)))
vaul.stream.two.2022 %>%
#filter(DateTimeAK > "2022-10-10") %>%
ggplot( aes(x = DateTimeAK, y = WaterPressure))+
geom_point() +
theme_classic()
# Join the atmospheric and water pressure together
vaul.final.pressure.2022 <- vaul.stream.two.2022
# Eielson atmosphere data
VAUL.2022 <- left_join(Air_combo, vaul.final.pressure.2022 , by = "DateTimeAK")
# Fill time gaps
DateTimeFill <- data.frame(DateTimeAK = seq(ymd_hm("2022-05-26 00:00", tz = "America/Anchorage"),ymd_hm("2022-10-12 15:30", tz = "America/Anchorage"), by = '5 mins'))
VAUL.2022 <- full_join(VAUL.2022, DateTimeFill, by = "DateTimeAK")
VAUL.2022 <- VAUL.2022[order(VAUL.2022$DateTimeAK),]
VAUL.2022 <- na_kalman(VAUL.2022, maxgap = 10)
# Water pressure - atmospheric pressure
VAUL.2022$difference <- VAUL.2022$WaterPressure - VAUL.2022$AirPressureCorrectedVAUL
# Plot air and water pressure
VAUL.2022 %>% filter(DateTimeAK > "2022-05-15") %>%
ggplot(aes(DateTimeAK, WaterPressure)) + geom_point() + geom_point(aes(DateTimeAK, AirPressureCorrectedVAUL), color = "red", size = 0.5) +
ggtitle("VAUL air and water pressure")
# Remove duplicated time steps
VAUL.2022 <- VAUL.2022 %>% group_by(DateTimeAK) %>% summarise( difference = mean( difference))
any(duplicated(VAUL.2022$DateTimeAK))
# Check time step intervals
VAUL.2022$diff <- VAUL.2022$DateTimeAK - lag(VAUL.2022$DateTimeAK)
unique(VAUL.2022$diff)
VAUL.2022 %>% ggplot(aes(DateTimeAK, diff)) + geom_point()
VAUL.2022$Site <- "VAUL"
VAUL.2022$difference <- na_kalman(VAUL.2022$difference, maxgap = 50)
# Plot difference
VAUL.2022 %>% #filter(DateTimeAK > "2022-08-15" & DateTimeAK < "2022-09-01") %>%
ggplot(aes(DateTimeAK, difference)) + geom_point() + ggtitle("VAUL difference")
### Filter VAUL ###
# Remove measurements during pressure gap!
QSummary.VA.2022 <- QSummary.2022 %>% filter(Site =="VAUL") %>% filter(DateTimeAK < "2022-06-07" | DateTimeAK > "2022-08-01")
ggplot(QSummary.VA.2022) +
geom_point(aes(x = DateTimeAK, y = MeasuredQ_Ls, shape = Method, color = Site), size=3) +
theme_classic() +
scale_color_manual(values=c("#E7298A")) +
ggtitle("VAUL")
# Merge by nearest date if we have an offset point
VAUL.2022.dt <- setDT(VAUL.2022) %>% filter(!difference %in% NA)
QSummary.VA.2022.dt <- QSummary.VA.2022 %>% filter(DateTimeAK > "2022-05-25" & DateTimeAK < "2022-10-01")
Vault1comb.2022 <- VAUL.2022.dt[QSummary.VA.2022.dt, on = "DateTimeAK", roll = 'nearest']
# rating curve #
vaul.formula <- y ~ x
Vault1comb.2022  %>% ggplot(aes(x = difference, y = MeasuredQ_Ls)) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = vaul.formula) +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Vault all measured Q")
# Remove high difference point
Vault1comb.2022.2 <- Vault1comb.2022 %>% filter(MeasuredQ_Ls < 200)
# rating curve #
vaul.formula <- y ~ x
Vault1comb.2022.2  %>% ggplot(aes(x = difference, y = MeasuredQ_Ls)) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = vaul.formula) +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Vault measured Q")
Vault1comb.2022.3 <- Vault1comb.2022.2 %>% group_by(Date) %>% summarise(MeasuredQ_Ls = mean(MeasuredQ_Ls),
difference = mean(difference))
# rating curve #
vaul.formula <- y ~ x
Vault1comb.2022.3 %>% filter(MeasuredQ_Ls < 150) %>% ggplot(aes(x = difference, y = MeasuredQ_Ls)) +
geom_point(size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = vaul.formula) +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Vault measured Q averaged by date")
# rating curve #
vaul.formula <- y ~ x
Vault1comb.2022.2  %>% ggplot(aes(x = difference, y = MeasuredQ_Ls)) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = vaul.formula) +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
#xlim(216, 216.4) +
#ylim(0,1500) +
theme_light() +
ggtitle("Vault measured Q by method") + facet_wrap(~Method)
# Remove high difference point
Vault1comb.2022.3 <- Vault1comb.2022 %>% filter(MeasuredQ_Ls < 130)
# rating curve #
vaul.formula <- y ~ x
Vault1comb.2022.3  %>% ggplot(aes(x = difference, y = MeasuredQ_Ls)) +
geom_point(aes(color = Method), size = 3) +
geom_smooth(method = "lm", se=FALSE, formula = vaul.formula) +
stat_poly_eq(formula = vaul.formula,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE) +
theme_light() +
ggtitle("Vault measured Q")
## Predict VAUL Q
VAUL.lm.2022 <- lm(Vault1comb.2022.3$MeasuredQ_Ls ~ Vault1comb.2022.3$difference)
summary(VAUL.lm.2022)
VAUL.2022.dt$pred.vaul.Q <- coef(VAUL.lm.2022)[2] * VAUL.2022.dt$difference + coef(VAUL.lm.2022)[1]
VAUL.2022.dt <- VAUL.2022.dt %>% dplyr::select(DateTimeAK, pred.vaul.Q) %>% na.omit()
VAUL.2022.dt <- na_kalman(VAUL.2022.dt)
VAUL.2022.dt %>% ggplot(aes(x = DateTimeAK, y = pred.vaul.Q)) +
geom_point(color="#A6CEE3", size=1.25) +
geom_point(data = Vault1comb.2022, aes(x = DateTimeAK, y = MeasuredQ_Ls, color = Method), size=3) +
theme_classic() +
ggtitle("VAUL predicted and measured Q") +
xlab("Date") +
ylab("Discharge (L/s)")
VAUL.2022.dt$Site <- "VAUL"
names(VAUL.2022.dt) <- c("DateTimeAK", "Q", "Site")
MOOS.2022.dt$Site <- "MOOS"
names(MOOS.2022.dt) <- c("DateTimeAK", "Q", "Site")
MOOS.2022.dt$Q <- as.numeric(MOOS.2022.dt$Q)
POKE.2022.dt$Site <- "POKE"
names(POKE.2022.dt) <- c("DateTimeAK", "Q", "Site")
POKE.2022.dt$Q <- as.numeric(POKE.2022.dt$Q)
STRT.2022.dt$Site <- "STRT"
STRT.2022.dt <- STRT.2022.dt %>% dplyr::select(DateTimeAK, pred.strt1.Q, Site)
names(STRT.2022.dt) <- c("DateTimeAK", "Q", "Site")
STRT.2022.dt$Q <- as.numeric(STRT.2022.dt$Q)
FRCH.2022.dt$Site <- "FRCH"
FRCH.2022.dt <- FRCH.2022.dt %>% dplyr::select(DateTimeAK, pred.frch.Q, Site)
names(FRCH.2022.dt) <- c("DateTimeAK", "Q", "Site")
pred_Q_2022 <- rbind(VAUL.2022.dt, MOOS.2022.dt, POKE.2022.dt, STRT.2022.dt, FRCH.2022.dt)
write.csv(pred_Q_2022, here("Predicted_Discharge/2022/Predicted_Q_2022.csv"), row.names = FALSE)
pred_Q_2022$Day = format(as.POSIXct(pred_Q_2022$DateTime, format = "%Y-%m-%d %H:%M:%S"), format = "%Y-%m-%d")
pred_Q_2022$Day = as.POSIXct(pred_Q_2022$Day, "%Y-%m-%d", tz = "America/Anchorage")
Q.daily.2022 <- pred_Q_2022 %>% group_by(Site, Day) %>% summarise(Q = mean(Q))
write.csv(Q.daily.2022, here("Predicted_Discharge/2022/Q.daily.2022.csv"), row.names = FALSE)
pred_Q_2022 %>% ggplot(aes(DateTimeAK, Q, color = Site)) + geom_point()
install.packages("xfun")
